{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\React-Medi-App\\\\src\\\\Components\\\\AddReminder1.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\"; // Material UI Components\n\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\nimport Box from \"@mui/material/Box\";\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport Stack from '@mui/material/Stack';\nimport Typography from \"@mui/material/Typography\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport TextField from \"@mui/material/TextField\"; // Custom Components\n\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object().shape({\n  medication: Yup.string().required(\"Medication is required\"),\n  dose: Yup.string().required(\"Dose is required\")\n});\n\nfunction setSuggestions() {\n  // This is the array of medication objects that will be displayed on the cards\n  let medicationList = localStorage.getItem(\"medications\");\n  let parsed = JSON.parse(medicationList); // This will be an array of medication suggestions for the inputs\n\n  let medSuggestions = [];\n  let doseSuggestions = [];\n\n  if (parsed !== null && parsed.length > 0) {\n    const meds = {};\n    const doses = {};\n    parsed.forEach((medication, index) => {\n      meds[medication.medication] = index;\n      doses[medication.dose] = index;\n    });\n    medSuggestions = Object.keys(meds).map(med => {\n      return {\n        label: med\n      };\n    });\n    doseSuggestions = Object.keys(doses).map(dose => {\n      return {\n        label: dose\n      };\n    });\n    return [medSuggestions, doseSuggestions];\n  }\n\n  return [];\n}\n\nexport default function AddReminder1() {\n  _s();\n\n  // Styles\n  const autoCompleteSx = {\n    width: \"100%\"\n  };\n  const boxSx = {\n    \"& .MuiTextField-root\": {\n      mb: 5,\n      width: \"100%\"\n    },\n    alignItems: \"center\",\n    bgcolor: \"background.paper\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    ml: \"50px\",\n    mr: \"50px\"\n  };\n  const typographySx = {\n    mb: 5,\n    textAlign: \"center\"\n  };\n  const {\n    handleSubmit,\n    control,\n    formState\n  } = useForm({\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema)\n  });\n\n  const onSubmit = data => {\n    // This saves the reminder into a local session storage for the purposes of displaying the reminders on another page.\n    // If I were going to create a deployed version of the app, I would create a DB and save the data there.\n    // I also set this condition --> localStorage.getItem(\"reminders\").length < 2 --> because if the array is empty, the length === 2\n    if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\n      localStorage.setItem(\"reminders\", JSON.stringify([{\n        id: 0,\n        medication: data.medication,\n        dose: data.dose,\n        days: [],\n        timesPerDay: 0,\n        times: []\n      }]));\n    } else {\n      let reminderList = localStorage.getItem(\"reminders\");\n      let parsed = JSON.parse(reminderList);\n      let newId = parsed[parsed.length - 1].id + 1;\n      parsed.push({\n        id: newId,\n        medication: data.medication,\n        dose: data.dose,\n        days: [],\n        timesPerDay: 0,\n        times: []\n      });\n      localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n    }\n\n    fetch(\"http://localhost:3000/add-reminder/time\").then(resp => {\n      window.location = \"http://localhost:3000/add-reminder/time\";\n    });\n  };\n\n  const breadcrumbs = [/*#__PURE__*/_jsxDEV(Typography, {\n    color: \"text.primary\",\n    children: \"Name & Dose\"\n  }, \"1\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this)];\n\n  if (setSuggestions().length > 1) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        sx: {\n          mb: 10\n        },\n        children: /*#__PURE__*/_jsxDEV(Breadcrumbs, {\n          separator: /*#__PURE__*/_jsxDEV(NavigateNextIcon, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 36\n          }, this),\n          \"aria-label\": \"breadcrumb\",\n          children: breadcrumbs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        sx: typographySx,\n        variant: \"h4\",\n        children: \"What medication do you want to make a reminder for?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        noValidate: true,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: boxSx,\n          children: [/*#__PURE__*/_jsxDEV(Controller, {\n            name: \"medication\",\n            control: control,\n            defaultValue: \"\",\n            render: _ref => {\n              let {\n                field: {\n                  ref,\n                  ...field\n                },\n                fieldState: {\n                  error\n                }\n              } = _ref;\n              return /*#__PURE__*/_jsxDEV(Autocomplete, { ...field,\n                autoHighlight: true,\n                disableClearable: true,\n                id: \"medication-autocomplete\",\n                onChange: (event, value) => field.onChange(value.label),\n                options: setSuggestions()[0],\n                sx: autoCompleteSx,\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                  required: true,\n                  error: !!error,\n                  helperText: error === null || error === void 0 ? void 0 : error.message,\n                  id: \"medication\",\n                  label: \"Medication\",\n                  name: \"medication\",\n                  type: \"search\",\n                  inputRef: ref,\n                  ...params\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 33\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"dose\",\n            control: control,\n            defaultValue: \"\",\n            render: _ref2 => {\n              let {\n                field: {\n                  ref,\n                  ...field\n                },\n                fieldState: {\n                  error\n                }\n              } = _ref2;\n              return /*#__PURE__*/_jsxDEV(Autocomplete, { ...field,\n                autoHighlight: true,\n                disableClearable: true,\n                isOptionEqualToValue: (option, value) => option.id === value.id,\n                id: \"dose-autocomplete\",\n                onChange: (event, value) => field.onChange(value.label),\n                options: setSuggestions()[1],\n                sx: autoCompleteSx,\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                  required: true,\n                  error: !!error,\n                  helperText: error === null || error === void 0 ? void 0 : error.message,\n                  id: \"dose\",\n                  label: \"Dose\",\n                  name: \"dose\",\n                  type: \"numeric\",\n                  inputRef: ref,\n                  ...params\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 33\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: !formState.isValid,\n            type: \"submit\",\n            children: /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n              sx: {\n                fontSize: 75\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(NoRegisteredMedications, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(AddReminder1, \"qw4uJ56/71qY3KYVVBgBKHcMt38=\", false, function () {\n  return [useForm];\n});\n\n_c = AddReminder1;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddReminder1\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/React-Medi-App/src/Components/AddReminder1.js"],"names":["React","useForm","Controller","yupResolver","Yup","ArrowForwardIcon","Box","Breadcrumbs","Button","Container","NavigateNextIcon","Stack","Typography","Autocomplete","TextField","NoRegisteredMedications","validationSchema","object","shape","medication","string","required","dose","setSuggestions","medicationList","localStorage","getItem","parsed","JSON","parse","medSuggestions","doseSuggestions","length","meds","doses","forEach","index","Object","keys","map","med","label","AddReminder1","autoCompleteSx","width","boxSx","mb","alignItems","bgcolor","display","flexDirection","ml","mr","typographySx","textAlign","handleSubmit","control","formState","mode","resolver","onSubmit","data","setItem","stringify","id","days","timesPerDay","times","reminderList","newId","push","fetch","then","resp","window","location","breadcrumbs","field","ref","fieldState","error","event","value","onChange","params","message","option","isValid","fontSize"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,OAAR,EAAiBC,UAAjB,QAAkC,iBAAlC;AACA,SAAQC,WAAR,QAA0B,yBAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB,C,CAEA;;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,SAAP,MAAsB,yBAAtB,C,CAEA;;AACA,OAAOC,uBAAP,MAAoC,2BAApC;;AAEA,MAAMC,gBAAgB,GAAGZ,GAAG,CAACa,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,EAAAA,UAAU,EAAEf,GAAG,CAACgB,MAAJ,GACPC,QADO,CACE,wBADF,CAD4B;AAGxCC,EAAAA,IAAI,EAAElB,GAAG,CAACgB,MAAJ,GACDC,QADC,CACQ,kBADR;AAHkC,CAAnB,CAAzB;;AAOA,SAASE,cAAT,GAA0B;AACtB;AACA,MAAIC,cAAc,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAArB;AACA,MAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWL,cAAX,CAAb,CAHsB,CAKtB;;AACA,MAAIM,cAAc,GAAG,EAArB;AACA,MAAIC,eAAe,GAAG,EAAtB;;AAEA,MAAIJ,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACK,MAAP,GAAgB,CAAvC,EAA0C;AACtC,UAAMC,IAAI,GAAG,EAAb;AACA,UAAMC,KAAK,GAAG,EAAd;AAEAP,IAAAA,MAAM,CAACQ,OAAP,CAAe,CAAChB,UAAD,EAAaiB,KAAb,KAAuB;AAClCH,MAAAA,IAAI,CAACd,UAAU,CAACA,UAAZ,CAAJ,GAA8BiB,KAA9B;AACAF,MAAAA,KAAK,CAACf,UAAU,CAACG,IAAZ,CAAL,GAAyBc,KAAzB;AACH,KAHD;AAKAN,IAAAA,cAAc,GAAGO,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBM,GAAlB,CAAuBC,GAAD,IAAS;AAC5C,aAAO;AAACC,QAAAA,KAAK,EAAED;AAAR,OAAP;AACH,KAFgB,CAAjB;AAIAT,IAAAA,eAAe,GAAGM,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,GAAnB,CAAwBjB,IAAD,IAAU;AAC/C,aAAO;AAACmB,QAAAA,KAAK,EAAEnB;AAAR,OAAP;AACH,KAFiB,CAAlB;AAIA,WAAO,CAACQ,cAAD,EAAiBC,eAAjB,CAAP;AACH;;AAED,SAAO,EAAP;AACH;;AAED,eAAe,SAASW,YAAT,GAAwB;AAAA;;AACnC;AACA,QAAMC,cAAc,GAAG;AACnBC,IAAAA,KAAK,EAAE;AADY,GAAvB;AAIA,QAAMC,KAAK,GAAG;AACV,4BAAwB;AAACC,MAAAA,EAAE,EAAE,CAAL;AAAQF,MAAAA,KAAK,EAAE;AAAf,KADd;AAEVG,IAAAA,UAAU,EAAE,QAFF;AAGVC,IAAAA,OAAO,EAAE,kBAHC;AAIVC,IAAAA,OAAO,EAAE,MAJC;AAKVC,IAAAA,aAAa,EAAE,QALL;AAMVC,IAAAA,EAAE,EAAE,MANM;AAOVC,IAAAA,EAAE,EAAE;AAPM,GAAd;AAUA,QAAMC,YAAY,GAAG;AACjBP,IAAAA,EAAE,EAAE,CADa;AAEjBQ,IAAAA,SAAS,EAAE;AAFM,GAArB;AAKA,QAAM;AAACC,IAAAA,YAAD;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA;AAAxB,MAAqCxD,OAAO,CAAC;AAC/CyD,IAAAA,IAAI,EAAE,UADyC;AAE/CC,IAAAA,QAAQ,EAAExD,WAAW,CAACa,gBAAD;AAF0B,GAAD,CAAlD;;AAKA,QAAM4C,QAAQ,GAAIC,IAAD,IAAU;AACvB;AACA;AACA;AACA,QAAIpC,YAAY,CAACC,OAAb,CAAqB,WAArB,MAAsC,IAAtC,IAA8CD,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCM,MAAlC,GAA2C,CAA7F,EAAgG;AAC5FP,MAAAA,YAAY,CAACqC,OAAb,CAAqB,WAArB,EAAkClC,IAAI,CAACmC,SAAL,CAAe,CAAC;AAC9CC,QAAAA,EAAE,EAAE,CAD0C;AAE9C7C,QAAAA,UAAU,EAAE0C,IAAI,CAAC1C,UAF6B;AAG9CG,QAAAA,IAAI,EAAEuC,IAAI,CAACvC,IAHmC;AAI9C2C,QAAAA,IAAI,EAAE,EAJwC;AAK9CC,QAAAA,WAAW,EAAE,CALiC;AAM9CC,QAAAA,KAAK,EAAE;AANuC,OAAD,CAAf,CAAlC;AAQH,KATD,MASO;AACH,UAAIC,YAAY,GAAG3C,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAnB;AACA,UAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWuC,YAAX,CAAb;AACA,UAAIC,KAAK,GAAG1C,MAAM,CAACA,MAAM,CAACK,MAAP,GAAgB,CAAjB,CAAN,CAA0BgC,EAA1B,GAA+B,CAA3C;AACArC,MAAAA,MAAM,CAAC2C,IAAP,CAAY;AACRN,QAAAA,EAAE,EAAEK,KADI;AAERlD,QAAAA,UAAU,EAAE0C,IAAI,CAAC1C,UAFT;AAGRG,QAAAA,IAAI,EAAEuC,IAAI,CAACvC,IAHH;AAIR2C,QAAAA,IAAI,EAAE,EAJE;AAKRC,QAAAA,WAAW,EAAE,CALL;AAMRC,QAAAA,KAAK,EAAE;AANC,OAAZ;AAQA1C,MAAAA,YAAY,CAACqC,OAAb,CAAqB,WAArB,EAAkClC,IAAI,CAACmC,SAAL,CAAepC,MAAf,CAAlC;AACH;;AAED4C,IAAAA,KAAK,CAAC,yCAAD,CAAL,CACKC,IADL,CACWC,IAAD,IAAU;AACZC,MAAAA,MAAM,CAACC,QAAP,GAAkB,yCAAlB;AACH,KAHL;AAIH,GAhCD;;AAkCA,QAAMC,WAAW,GAAG,cAChB,QAAC,UAAD;AAAoB,IAAA,KAAK,EAAC,cAA1B;AAAA;AAAA,KAAgB,GAAhB;AAAA;AAAA;AAAA;AAAA,UADgB,CAApB;;AAMA,MAAIrD,cAAc,GAAGS,MAAjB,GAA0B,CAA9B,EAAiC;AAC7B,wBACI,QAAC,SAAD;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAE,CAAhB;AAAmB,QAAA,EAAE,EAAE;AAACc,UAAAA,EAAE,EAAE;AAAL,SAAvB;AAAA,+BACI,QAAC,WAAD;AACI,UAAA,SAAS,eAAE,QAAC,gBAAD;AAAkB,YAAA,QAAQ,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,kBADf;AAEI,wBAAW,YAFf;AAAA,oBAIK8B;AAJL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAUI,QAAC,UAAD;AAAY,QAAA,EAAE,EAAEvB,YAAhB;AAA8B,QAAA,OAAO,EAAC,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ,eAcI;AAAM,QAAA,QAAQ,EAAEE,YAAY,CAACK,QAAD,CAA5B;AAAwC,QAAA,UAAU,MAAlD;AAAA,+BACI,QAAC,GAAD;AACI,UAAA,EAAE,EAAEf,KADR;AAAA,kCAGI,QAAC,UAAD;AACI,YAAA,IAAI,EAAC,YADT;AAEI,YAAA,OAAO,EAAEW,OAFb;AAGI,YAAA,YAAY,EAAE,EAHlB;AAII,YAAA,MAAM,EAAE;AAAA,kBAAC;AAACqB,gBAAAA,KAAK,EAAE;AAACC,kBAAAA,GAAD;AAAM,qBAAGD;AAAT,iBAAR;AAAyBE,gBAAAA,UAAU,EAAE;AAACC,kBAAAA;AAAD;AAArC,eAAD;AAAA,kCACJ,QAAC,YAAD,OACQH,KADR;AAEI,gBAAA,aAAa,MAFjB;AAGI,gBAAA,gBAAgB,MAHpB;AAII,gBAAA,EAAE,EAAC,yBAJP;AAKI,gBAAA,QAAQ,EAAE,CAACI,KAAD,EAAQC,KAAR,KAAkBL,KAAK,CAACM,QAAN,CAAeD,KAAK,CAACzC,KAArB,CALhC;AAMI,gBAAA,OAAO,EAAElB,cAAc,GAAG,CAAH,CAN3B;AAOI,gBAAA,EAAE,EAAEoB,cAPR;AAQI,gBAAA,WAAW,EAAGyC,MAAD,iBACT,QAAC,SAAD;AACI,kBAAA,QAAQ,MADZ;AAEI,kBAAA,KAAK,EAAE,CAAC,CAACJ,KAFb;AAGI,kBAAA,UAAU,EAAEA,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEK,OAHvB;AAII,kBAAA,EAAE,EAAC,YAJP;AAKI,kBAAA,KAAK,EAAC,YALV;AAMI,kBAAA,IAAI,EAAC,YANT;AAOI,kBAAA,IAAI,EAAC,QAPT;AAQI,kBAAA,QAAQ,EAAEP,GARd;AAAA,qBASQM;AATR;AAAA;AAAA;AAAA;AAAA;AATR;AAAA;AAAA;AAAA;AAAA,sBADI;AAAA;AAJZ;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAiCI,QAAC,UAAD;AACI,YAAA,IAAI,EAAC,MADT;AAEI,YAAA,OAAO,EAAE5B,OAFb;AAGI,YAAA,YAAY,EAAE,EAHlB;AAII,YAAA,MAAM,EAAE;AAAA,kBAAC;AAACqB,gBAAAA,KAAK,EAAE;AAACC,kBAAAA,GAAD;AAAM,qBAAGD;AAAT,iBAAR;AAAyBE,gBAAAA,UAAU,EAAE;AAACC,kBAAAA;AAAD;AAArC,eAAD;AAAA,kCACJ,QAAC,YAAD,OACQH,KADR;AAEI,gBAAA,aAAa,MAFjB;AAGI,gBAAA,gBAAgB,MAHpB;AAII,gBAAA,oBAAoB,EAAE,CAACS,MAAD,EAASJ,KAAT,KAAmBI,MAAM,CAACtB,EAAP,KAAckB,KAAK,CAAClB,EAJjE;AAKI,gBAAA,EAAE,EAAC,mBALP;AAMI,gBAAA,QAAQ,EAAE,CAACiB,KAAD,EAAQC,KAAR,KAAkBL,KAAK,CAACM,QAAN,CAAeD,KAAK,CAACzC,KAArB,CANhC;AAOI,gBAAA,OAAO,EAAElB,cAAc,GAAG,CAAH,CAP3B;AAQI,gBAAA,EAAE,EAAEoB,cARR;AASI,gBAAA,WAAW,EAAGyC,MAAD,iBACT,QAAC,SAAD;AACI,kBAAA,QAAQ,MADZ;AAEI,kBAAA,KAAK,EAAE,CAAC,CAACJ,KAFb;AAGI,kBAAA,UAAU,EAAEA,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEK,OAHvB;AAII,kBAAA,EAAE,EAAC,MAJP;AAKI,kBAAA,KAAK,EAAC,MALV;AAMI,kBAAA,IAAI,EAAC,MANT;AAOI,kBAAA,IAAI,EAAC,SAPT;AAQI,kBAAA,QAAQ,EAAEP,GARd;AAAA,qBASQM;AATR;AAAA;AAAA;AAAA;AAAA;AAVR;AAAA;AAAA;AAAA;AAAA,sBADI;AAAA;AAJZ;AAAA;AAAA;AAAA;AAAA,kBAjCJ,eAgEI,QAAC,MAAD;AAAQ,YAAA,QAAQ,EAAE,CAAC3B,SAAS,CAAC8B,OAA7B;AACQ,YAAA,IAAI,EAAC,QADb;AAAA,mCACsB,QAAC,gBAAD;AAAkB,cAAA,EAAE,EAAE;AAACC,gBAAAA,QAAQ,EAAE;AAAX;AAAtB;AAAA;AAAA;AAAA;AAAA;AADtB;AAAA;AAAA;AAAA;AAAA,kBAhEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAsFH,GAvFD,MAuFO;AACH,wBACI,QAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;AACJ;;GA9JuB9C,Y;UAqBuBzC,O;;;KArBvByC,Y","sourcesContent":["import * as React from \"react\";\r\nimport {useForm, Controller} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n\r\n// Material UI Components\r\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\r\nimport Box from \"@mui/material/Box\";\r\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\r\nimport Button from \"@mui/material/Button\";\r\nimport Container from \"@mui/material/Container\";\r\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\r\nimport Stack from '@mui/material/Stack';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\n// Custom Components\r\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    medication: Yup.string()\r\n        .required(\"Medication is required\"),\r\n    dose: Yup.string()\r\n        .required(\"Dose is required\"),\r\n});\r\n\r\nfunction setSuggestions() {\r\n    // This is the array of medication objects that will be displayed on the cards\r\n    let medicationList = localStorage.getItem(\"medications\");\r\n    let parsed = JSON.parse(medicationList);\r\n\r\n    // This will be an array of medication suggestions for the inputs\r\n    let medSuggestions = [];\r\n    let doseSuggestions = [];\r\n\r\n    if (parsed !== null && parsed.length > 0) {\r\n        const meds = {};\r\n        const doses = {};\r\n\r\n        parsed.forEach((medication, index) => {\r\n            meds[medication.medication] = index;\r\n            doses[medication.dose] = index;\r\n        });\r\n\r\n        medSuggestions = Object.keys(meds).map((med) => {\r\n            return {label: med};\r\n        })\r\n\r\n        doseSuggestions = Object.keys(doses).map((dose) => {\r\n            return {label: dose};\r\n        })\r\n\r\n        return [medSuggestions, doseSuggestions];\r\n    }\r\n\r\n    return [];\r\n}\r\n\r\nexport default function AddReminder1() {\r\n    // Styles\r\n    const autoCompleteSx = {\r\n        width: \"100%\"\r\n    };\r\n\r\n    const boxSx = {\r\n        \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\r\n        alignItems: \"center\",\r\n        bgcolor: \"background.paper\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        ml: \"50px\",\r\n        mr: \"50px\",\r\n    };\r\n\r\n    const typographySx = {\r\n        mb: 5,\r\n        textAlign: \"center\"\r\n    };\r\n\r\n    const {handleSubmit, control, formState} = useForm({\r\n        mode: \"onChange\",\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n\r\n    const onSubmit = (data) => {\r\n        // This saves the reminder into a local session storage for the purposes of displaying the reminders on another page.\r\n        // If I were going to create a deployed version of the app, I would create a DB and save the data there.\r\n        // I also set this condition --> localStorage.getItem(\"reminders\").length < 2 --> because if the array is empty, the length === 2\r\n        if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\r\n            localStorage.setItem(\"reminders\", JSON.stringify([{\r\n                id: 0,\r\n                medication: data.medication,\r\n                dose: data.dose,\r\n                days: [],\r\n                timesPerDay: 0,\r\n                times: []\r\n            }]));\r\n        } else {\r\n            let reminderList = localStorage.getItem(\"reminders\");\r\n            let parsed = JSON.parse(reminderList);\r\n            let newId = parsed[parsed.length - 1].id + 1;\r\n            parsed.push({\r\n                id: newId,\r\n                medication: data.medication,\r\n                dose: data.dose,\r\n                days: [],\r\n                timesPerDay: 0,\r\n                times: []\r\n            });\r\n            localStorage.setItem(\"reminders\", JSON.stringify(parsed));\r\n        }\r\n\r\n        fetch(\"http://localhost:3000/add-reminder/time\")\r\n            .then((resp) => {\r\n                window.location = \"http://localhost:3000/add-reminder/time\";\r\n            });\r\n    };\r\n\r\n    const breadcrumbs = [\r\n        <Typography key=\"1\" color=\"text.primary\">\r\n            Name & Dose\r\n        </Typography>\r\n    ];\r\n\r\n    if (setSuggestions().length > 1) {\r\n        return (\r\n            <Container>\r\n                <Stack spacing={2} sx={{mb: 10}}>\r\n                    <Breadcrumbs\r\n                        separator={<NavigateNextIcon fontSize=\"small\"/>}\r\n                        aria-label=\"breadcrumb\"\r\n                    >\r\n                        {breadcrumbs}\r\n                    </Breadcrumbs>\r\n                </Stack>\r\n\r\n                <Typography sx={typographySx} variant=\"h4\">\r\n                    What medication do you want to make a reminder for?\r\n                </Typography>\r\n\r\n                <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                    <Box\r\n                        sx={boxSx}\r\n                    >\r\n                        <Controller\r\n                            name=\"medication\"\r\n                            control={control}\r\n                            defaultValue={\"\"}\r\n                            render={({field: {ref, ...field}, fieldState: {error}}) => (\r\n                                <Autocomplete\r\n                                    {...field}\r\n                                    autoHighlight\r\n                                    disableClearable\r\n                                    id=\"medication-autocomplete\"\r\n                                    onChange={(event, value) => field.onChange(value.label)}\r\n                                    options={setSuggestions()[0]}\r\n                                    sx={autoCompleteSx}\r\n                                    renderInput={(params) => (\r\n                                        <TextField\r\n                                            required\r\n                                            error={!!error}\r\n                                            helperText={error?.message}\r\n                                            id=\"medication\"\r\n                                            label=\"Medication\"\r\n                                            name=\"medication\"\r\n                                            type=\"search\"\r\n                                            inputRef={ref}\r\n                                            {...params}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            )}\r\n                        />\r\n\r\n                        <Controller\r\n                            name=\"dose\"\r\n                            control={control}\r\n                            defaultValue={\"\"}\r\n                            render={({field: {ref, ...field}, fieldState: {error}}) => (\r\n                                <Autocomplete\r\n                                    {...field}\r\n                                    autoHighlight\r\n                                    disableClearable\r\n                                    isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                                    id=\"dose-autocomplete\"\r\n                                    onChange={(event, value) => field.onChange(value.label)}\r\n                                    options={setSuggestions()[1]}\r\n                                    sx={autoCompleteSx}\r\n                                    renderInput={(params) => (\r\n                                        <TextField\r\n                                            required\r\n                                            error={!!error}\r\n                                            helperText={error?.message}\r\n                                            id=\"dose\"\r\n                                            label=\"Dose\"\r\n                                            name=\"dose\"\r\n                                            type=\"numeric\"\r\n                                            inputRef={ref}\r\n                                            {...params}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            )}\r\n                        />\r\n\r\n                        <Button disabled={!formState.isValid}\r\n                                type=\"submit\"><ArrowForwardIcon sx={{fontSize: 75}}/></Button>\r\n                    </Box>\r\n                </form>\r\n            </Container>\r\n        );\r\n    } else {\r\n        return (\r\n            <NoRegisteredMedications/>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}