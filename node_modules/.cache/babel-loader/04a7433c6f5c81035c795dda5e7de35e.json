{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\Medi-Reminder-App\\\\src\\\\Components\\\\Registered Medications\\\\DisplayMedications.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\"; // Custom Components\n\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\nimport Medication from \"./Medication\"; // Styles\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerSx = {\n  pl: 5,\n  pr: 5,\n  width: \"100%\"\n};\nexport default function DisplayMedications() {\n  _s();\n\n  // This forces the DisplayMedications component to re-render after a medication has been deleted\n  const [updated, setUpdated] = useState(false); // I needed to add this because deleting dupes was not working in prod\n\n  const [lastDeleted, setLastDeleted] = useState(null); // I needed to add this because updating was not consistently working in prod with dupes\n\n  const [lastUpdated, setLastUpdated] = useState(null); // These are the unique components\n\n  const [finalComps, setFinalComps] = useState(\"null\");\n  useEffect(() => {\n    localStorage.setItem(\"medications\", finalComps);\n  }, [finalComps]); // This is the array of medication objects that will be displayed on the cards\n\n  const medicationList = localStorage.getItem(\"medications\");\n  const parsedList = JSON.parse(medicationList);\n  let medicationComps;\n\n  if (parsedList && parsedList.length > 0) {\n    const stringified = [];\n    const comparedComponents = [];\n    const dupeIndexes = []; // This makes it so the objs can be more easily compared\n\n    for (const obj of parsedList) {\n      stringified.push(JSON.stringify([obj.medication, obj.dose]));\n    } // This checks for duplicates\n    // The arr is a stringified [med, dose]\n\n\n    stringified.forEach((arr, index) => {\n      if (!comparedComponents.includes(arr) && arr !== lastDeleted && arr !== lastUpdated) {\n        comparedComponents.push(arr);\n      } else {\n        dupeIndexes.push(index);\n      }\n    });\n    const copiedList = [...parsedList];\n\n    for (let i = 0; i < copiedList.length; i++) {\n      for (const element of dupeIndexes) {\n        if (i === element) {\n          copiedList[i] = \"dupe\";\n          break;\n        }\n      }\n    }\n\n    const finalComponents = copiedList.filter(index => index !== \"dupe\");\n    setFinalComps(JSON.stringify(finalComponents));\n\n    if (finalComponents.length > 0) {\n      medicationComps = finalComponents.map(medication => {\n        return /*#__PURE__*/_jsxDEV(Medication, {\n          medication: medication,\n          updated: updated,\n          setUpdated: setUpdated,\n          parsedList: parsedList,\n          setLastDeleted: setLastDeleted,\n          setLastUpdated: setLastUpdated\n        }, \"Medication_\" + medication.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this);\n      });\n    } else {\n      medicationComps = /*#__PURE__*/_jsxDEV(NoRegisteredMedications, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 31\n      }, this);\n    }\n  } else {\n    // This catches if the parsedList is initially empty\n    medicationComps = /*#__PURE__*/_jsxDEV(NoRegisteredMedications, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 27\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: containerSx,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: medicationComps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DisplayMedications, \"2GTR+xSn2ZDJ28yS33traKCrntM=\");\n\n_c = DisplayMedications;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayMedications\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/Medi-Reminder-App/src/Components/Registered Medications/DisplayMedications.js"],"names":["useEffect","useState","Box","Container","NoRegisteredMedications","Medication","containerSx","pl","pr","width","DisplayMedications","updated","setUpdated","lastDeleted","setLastDeleted","lastUpdated","setLastUpdated","finalComps","setFinalComps","localStorage","setItem","medicationList","getItem","parsedList","JSON","parse","medicationComps","length","stringified","comparedComponents","dupeIndexes","obj","push","stringify","medication","dose","forEach","arr","index","includes","copiedList","i","element","finalComponents","filter","map","id","flexDirection"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\r\n\r\n// Material UI Components\r\nimport Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\n\r\n// Custom Components\r\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\r\nimport Medication from \"./Medication\";\r\n\r\n// Styles\r\nconst containerSx = {\r\n    pl: 5,\r\n    pr: 5,\r\n    width: \"100%\"\r\n};\r\n\r\nexport default function DisplayMedications() {\r\n    // This forces the DisplayMedications component to re-render after a medication has been deleted\r\n    const [updated, setUpdated] = useState(false);\r\n\r\n    // I needed to add this because deleting dupes was not working in prod\r\n    const [lastDeleted, setLastDeleted] = useState(null);\r\n\r\n    // I needed to add this because updating was not consistently working in prod with dupes\r\n    const [lastUpdated, setLastUpdated] = useState(null);\r\n\r\n    // These are the unique components\r\n    const [finalComps, setFinalComps] = useState(\"null\");\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"medications\", finalComps);\r\n    }, [finalComps]);\r\n\r\n    // This is the array of medication objects that will be displayed on the cards\r\n    const medicationList = localStorage.getItem(\"medications\");\r\n    const parsedList = JSON.parse(medicationList);\r\n\r\n    let medicationComps;\r\n\r\n    if (parsedList && parsedList.length > 0) {\r\n        const stringified = [];\r\n        const comparedComponents = [];\r\n        const dupeIndexes = [];\r\n\r\n        // This makes it so the objs can be more easily compared\r\n        for (const obj of parsedList) {\r\n            stringified.push(JSON.stringify([obj.medication, obj.dose]));\r\n        }\r\n\r\n        // This checks for duplicates\r\n        // The arr is a stringified [med, dose]\r\n        stringified.forEach((arr, index) => {\r\n            if (!comparedComponents.includes(arr) && arr !== lastDeleted && arr !== lastUpdated) {\r\n                comparedComponents.push(arr);\r\n            } else {\r\n                dupeIndexes.push(index);\r\n            }\r\n        });\r\n\r\n        const copiedList = [...parsedList];\r\n\r\n        for (let i = 0; i < copiedList.length; i++) {\r\n            for (const element of dupeIndexes) {\r\n                if (i === element) {\r\n                    copiedList[i] = \"dupe\";\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const finalComponents = copiedList.filter((index) => index !== \"dupe\");\r\n        setFinalComps(JSON.stringify(finalComponents));\r\n\r\n        if (finalComponents.length > 0) {\r\n            medicationComps = finalComponents.map((medication) => {\r\n                return (\r\n                    <Medication medication={medication} updated={updated} setUpdated={setUpdated}\r\n                                parsedList={parsedList}\r\n                                setLastDeleted={setLastDeleted} setLastUpdated={setLastUpdated}\r\n                                key={\"Medication_\" + medication.id}/>)\r\n            });\r\n        } else {\r\n            medicationComps = <NoRegisteredMedications/>;\r\n        }\r\n\r\n    } else { // This catches if the parsedList is initially empty\r\n        medicationComps = <NoRegisteredMedications/>;\r\n    }\r\n\r\n    return (\r\n        <Container sx={containerSx}>\r\n            <Box style={{flexDirection: \"column\"}}>\r\n                {medicationComps}\r\n            </Box>\r\n        </Container>\r\n    );\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}