{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\Medi-Reminder-App\\\\src\\\\Components\\\\Add Reminder\\\\AddReminder1\\\\AddReminder1.js\",\n    _s = $RefreshSig$();\n\nimport { useForm } from \"react-hook-form\";\nimport { useState } from \"react\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\nimport { v4 as uuidv4 } from \"uuid\"; // Material UI Components\n\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport Box from \"@mui/material/Box\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\"; // Custom Components\n\nimport DoseInput from \"../../Inputs/DoseInput.js\";\nimport MedicationInput from \"../../Inputs/MedicationInput.js\";\nimport NoRegisteredMedications from \"../../Registered Medications/NoRegisteredMedications\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object().shape({\n  medication: Yup.string().required(\"Medication is required\"),\n  dose: Yup.string().required(\"Dose is required\")\n}); // Styles\n\nconst boxSx = {\n  \"& .MuiTextField-root\": {\n    mb: 5,\n    width: \"100%\"\n  },\n  alignItems: \"center\",\n  display: \"flex\",\n  flexDirection: \"column\"\n};\nconst containerSx = {\n  mb: 5,\n  mt: 5,\n  pl: 5,\n  pr: 5,\n  width: \"100%\"\n};\nconst iconButtonSx = {\n  fontSize: 75\n};\nconst stackSx = {\n  mb: 5\n};\nconst typographySx = {\n  mb: 5,\n  textAlign: \"center\"\n}; // Components -> this could be its own component\n\nconst breadcrumbs = [/*#__PURE__*/_jsxDEV(Typography, {\n  color: \"text.primary\",\n  children: \"Name & Dose\"\n}, \"1\", false, {\n  fileName: _jsxFileName,\n  lineNumber: 60,\n  columnNumber: 5\n}, this)]; // Functions\n\nconst onSubmit = data => {\n  const {\n    medication,\n    dose\n  } = data; // This saves the reminder into a local session storage for the purposes of displaying the reminders on another page.\n  // If I were going to create a deployed version of the app, I would create a DB and save the data there.\n  // I also set this condition --> localStorage.getItem(\"reminders\").length < 2 --> because if the array is empty, the length === 2\n\n  if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\n    localStorage.setItem(\"reminders\", JSON.stringify([{\n      id: uuidv4(),\n      medication,\n      dose,\n      days: [],\n      timesPerDay: 0,\n      times: [],\n      submitted: false\n    }]));\n  } else {\n    const reminderList = localStorage.getItem(\"reminders\");\n    const parsedList = JSON.parse(reminderList);\n    const lastReminder = parsedList[parsedList.length - 1];\n\n    if (lastReminder.submitted === true) {\n      parsedList.push({\n        id: uuidv4(),\n        medication,\n        dose,\n        days: [],\n        timesPerDay: 0,\n        times: [],\n        submitted: false\n      });\n      localStorage.setItem(\"reminders\", JSON.stringify(parsedList));\n    }\n  }\n\n  fetch(\"/add-reminder/days\").then(() => {\n    window.location = \"/add-reminder/days\";\n  });\n}; // This does not need to be in the component because it doesn't use hooks\n\n\nconst setNameSuggestions = () => {\n  const medicationList = localStorage.getItem(\"medications\");\n  const parsedList = JSON.parse(medicationList);\n\n  if (parsedList !== null && parsedList.length > 0) {\n    const uniqueMeds = [...new Set(parsedList.map(medication => medication.medication))];\n    return uniqueMeds.map(medication => {\n      return {\n        label: medication\n      };\n    });\n  }\n\n  return [];\n};\n\nexport default function AddReminder1() {\n  _s();\n\n  // This is passed into the medication input\n  const [medValue, setMedValue] = useState(null); // This is passed into the dose input and medication input\n\n  const [doseValue, setDoseValue] = useState(null);\n\n  const setDoseSuggestions = () => {\n    if (medValue) {\n      const medicationList = localStorage.getItem(\"medications\");\n      const parsedList = JSON.parse(medicationList);\n      const doseSuggestions = {};\n      parsedList.forEach(medication => {\n        const {\n          medication: name,\n          dose\n        } = medication;\n\n        if (doseSuggestions[name]) {\n          doseSuggestions[name] = [...doseSuggestions[name], dose];\n        } else {\n          doseSuggestions[name] = [dose];\n        }\n      });\n      const medValueName = medValue.label;\n      const uniqueDoses = [...new Set(doseSuggestions[medValueName].map(dose => dose))];\n      return uniqueDoses.map(dose => {\n        return {\n          label: dose\n        };\n      });\n    }\n\n    return [];\n  };\n\n  const {\n    handleSubmit,\n    control,\n    formState\n  } = useForm({\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema)\n  }); // If there are any registered medications\n\n  if (setNameSuggestions().length > 0) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      sx: containerSx,\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        sx: stackSx,\n        children: /*#__PURE__*/_jsxDEV(Breadcrumbs, {\n          separator: /*#__PURE__*/_jsxDEV(NavigateNextIcon, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 36\n          }, this),\n          \"aria-label\": \"breadcrumb\",\n          children: breadcrumbs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        noValidate: true,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: typographySx,\n          variant: \"h4\",\n          children: \"What medication do you want to make a reminder for?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: boxSx,\n          children: [/*#__PURE__*/_jsxDEV(MedicationInput, {\n            control: control,\n            suggestions: setNameSuggestions(),\n            medValue: medValue,\n            setMedValue: setMedValue,\n            setDoseValue: setDoseValue,\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DoseInput, {\n            control: control,\n            suggestions: setDoseSuggestions(),\n            doseValue: doseValue,\n            setDoseValue: setDoseValue,\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              disabled: !formState.isValid,\n              type: \"submit\",\n              children: /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n                sx: iconButtonSx\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 51\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      sx: containerSx,\n      children: /*#__PURE__*/_jsxDEV(NoRegisteredMedications, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(AddReminder1, \"JNrCaDdAy85+m/HKABzm24KH83Q=\", false, function () {\n  return [useForm];\n});\n\n_c = AddReminder1;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddReminder1\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/Medi-Reminder-App/src/Components/Add Reminder/AddReminder1/AddReminder1.js"],"names":["useForm","useState","yupResolver","Yup","v4","uuidv4","ArrowForwardIcon","Box","Breadcrumbs","Button","Container","NavigateNextIcon","Stack","Typography","DoseInput","MedicationInput","NoRegisteredMedications","validationSchema","object","shape","medication","string","required","dose","boxSx","mb","width","alignItems","display","flexDirection","containerSx","mt","pl","pr","iconButtonSx","fontSize","stackSx","typographySx","textAlign","breadcrumbs","onSubmit","data","localStorage","getItem","length","setItem","JSON","stringify","id","days","timesPerDay","times","submitted","reminderList","parsedList","parse","lastReminder","push","fetch","then","window","location","setNameSuggestions","medicationList","uniqueMeds","Set","map","label","AddReminder1","medValue","setMedValue","doseValue","setDoseValue","setDoseSuggestions","doseSuggestions","forEach","name","medValueName","uniqueDoses","handleSubmit","control","formState","mode","resolver","isValid"],"mappings":"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","sourcesContent":["import {useForm} from \"react-hook-form\";\r\nimport {useState} from \"react\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\n// Material UI Components\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Container from \"@mui/material/Container\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\n// Custom Components\r\nimport DoseInput from \"../../Inputs/DoseInput.js\";\r\nimport MedicationInput from \"../../Inputs/MedicationInput.js\";\r\nimport NoRegisteredMedications from \"../../Registered Medications/NoRegisteredMedications\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    medication: Yup.string()\r\n        .required(\"Medication is required\"),\r\n    dose: Yup.string()\r\n        .required(\"Dose is required\")\r\n});\r\n\r\n// Styles\r\nconst boxSx = {\r\n    \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n};\r\n\r\nconst containerSx = {\r\n    mb: 5,\r\n    mt: 5,\r\n    pl: 5,\r\n    pr: 5,\r\n    width: \"100%\"\r\n};\r\n\r\nconst iconButtonSx = {\r\n    fontSize: 75\r\n};\r\n\r\nconst stackSx = {\r\n    mb: 5\r\n};\r\n\r\nconst typographySx = {\r\n    mb: 5,\r\n    textAlign: \"center\"\r\n};\r\n\r\n// Components -> this could be its own component\r\nconst breadcrumbs = [\r\n    <Typography key=\"1\" color=\"text.primary\">\r\n        Name & Dose\r\n    </Typography>\r\n];\r\n\r\n// Functions\r\nconst onSubmit = (data) => {\r\n    const {medication, dose} = data;\r\n\r\n    // This saves the reminder into a local session storage for the purposes of displaying the reminders on another page.\r\n    // If I were going to create a deployed version of the app, I would create a DB and save the data there.\r\n    // I also set this condition --> localStorage.getItem(\"reminders\").length < 2 --> because if the array is empty, the length === 2\r\n    if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\r\n        localStorage.setItem(\"reminders\", JSON.stringify([{\r\n            id: uuidv4(),\r\n            medication,\r\n            dose,\r\n            days: [],\r\n            timesPerDay: 0,\r\n            times: [],\r\n            submitted: false\r\n        }]));\r\n    } else {\r\n        const reminderList = localStorage.getItem(\"reminders\");\r\n        const parsedList = JSON.parse(reminderList);\r\n        const lastReminder = parsedList[parsedList.length - 1];\r\n\r\n        if (lastReminder.submitted === true) {\r\n            parsedList.push({\r\n                id: uuidv4(),\r\n                medication,\r\n                dose,\r\n                days: [],\r\n                timesPerDay: 0,\r\n                times: [],\r\n                submitted: false\r\n            });\r\n\r\n            localStorage.setItem(\"reminders\", JSON.stringify(parsedList));\r\n        }\r\n    }\r\n\r\n    fetch(\"/add-reminder/days\")\r\n        .then(() => {\r\n            window.location = \"/add-reminder/days\";\r\n        });\r\n};\r\n\r\n// This does not need to be in the component because it doesn't use hooks\r\nconst setNameSuggestions = () => {\r\n    const medicationList = localStorage.getItem(\"medications\");\r\n    const parsedList = JSON.parse(medicationList);\r\n\r\n    if (parsedList !== null && parsedList.length > 0) {\r\n        const uniqueMeds = [...(new Set(parsedList.map(medication => medication.medication)))];\r\n        return uniqueMeds.map(medication => {\r\n            return {label: medication};\r\n        });\r\n    }\r\n\r\n    return [];\r\n}\r\n\r\nexport default function AddReminder1() {\r\n    // This is passed into the medication input\r\n    const [medValue, setMedValue] = useState(null);\r\n\r\n    // This is passed into the dose input and medication input\r\n    const [doseValue, setDoseValue] = useState(null);\r\n\r\n    const setDoseSuggestions = () => {\r\n        if (medValue) {\r\n            const medicationList = localStorage.getItem(\"medications\");\r\n            const parsedList = JSON.parse(medicationList);\r\n            const doseSuggestions = {};\r\n\r\n            parsedList.forEach((medication) => {\r\n                const {medication: name, dose} = medication;\r\n\r\n                if (doseSuggestions[name]) {\r\n                    doseSuggestions[name] = [...doseSuggestions[name], dose];\r\n                } else {\r\n                    doseSuggestions[name] = [dose];\r\n                }\r\n            });\r\n\r\n            const medValueName = medValue.label;\r\n\r\n            const uniqueDoses = [...(new Set(doseSuggestions[medValueName].map(dose => dose)))];\r\n            return uniqueDoses.map(dose => {\r\n                return {label: dose}\r\n            });\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    const {handleSubmit, control, formState} = useForm({\r\n        mode: \"onChange\",\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n\r\n    // If there are any registered medications\r\n    if (setNameSuggestions().length > 0) {\r\n        return (\r\n            <Container sx={containerSx}>\r\n                <Stack spacing={2} sx={stackSx}>\r\n                    <Breadcrumbs\r\n                        separator={<NavigateNextIcon fontSize=\"small\"/>}\r\n                        aria-label=\"breadcrumb\"\r\n                    >\r\n                        {breadcrumbs}\r\n                    </Breadcrumbs>\r\n                </Stack>\r\n\r\n                <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                    <Typography sx={typographySx} variant=\"h4\">\r\n                        What medication do you want to make a reminder for?\r\n                    </Typography>\r\n\r\n                    <Box\r\n                        sx={boxSx}\r\n                    >\r\n                        <MedicationInput control={control} suggestions={setNameSuggestions()} medValue={medValue}\r\n                                         setMedValue={setMedValue} setDoseValue={setDoseValue} variant={\"outlined\"}/>\r\n\r\n                        <DoseInput control={control} suggestions={setDoseSuggestions()} doseValue={doseValue}\r\n                                   setDoseValue={setDoseValue} variant={\"outlined\"}/>\r\n\r\n                        <Box>\r\n                            <Button disabled={!formState.isValid}\r\n                                    type=\"submit\"><ArrowForwardIcon sx={iconButtonSx}/></Button>\r\n                        </Box>\r\n                    </Box>\r\n                </form>\r\n            </Container>\r\n        );\r\n    } else {\r\n        return (\r\n            <Container sx={containerSx}>\r\n                <NoRegisteredMedications/>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}