{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\Medi-Reminder-App\\\\src\\\\Components\\\\Registered Medications\\\\DisplayMedications.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\"; // Custom Components\n\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\nimport Medication from \"./Medication\"; // Styles\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerSx = {\n  pl: 5,\n  pr: 5,\n  width: \"100%\"\n};\nexport default function DisplayMedications() {\n  _s();\n\n  // This is the array of medication objects that will be displayed on the cards\n  const medicationList = localStorage.getItem(\"medications\");\n  const parsedList = JSON.parse(medicationList); // This forces the DisplayMedications component to re-render after a medication has been deleted\n\n  const [updated, setUpdated] = useState(false);\n  let medicationComps; // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\n\n  if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\n    const stringified = [];\n    const comparedComponents = [];\n    const dupeIndexes = []; // This makes it so the objs can be more easily compared\n\n    for (const obj of parsedList) {\n      stringified.push(JSON.stringify([obj.medication, obj.dose]));\n    } // This checks for duplicates\n\n\n    stringified.forEach((arr, index) => {\n      if (!comparedComponents.includes(arr)) {\n        comparedComponents.push(arr);\n      } else {\n        dupeIndexes.push(index);\n      }\n    });\n    const copiedList = [...parsedList];\n\n    for (let i = 0; i < copiedList.length; i++) {\n      for (const element of dupeIndexes) {\n        if (i === element) {\n          copiedList[i] = \"dupe\";\n          break;\n        }\n      }\n    }\n\n    const finalComponents = copiedList.filter(index => index !== \"dupe\");\n    medicationComps = finalComponents.map(medication => {\n      return /*#__PURE__*/_jsxDEV(Medication, {\n        medication: medication,\n        updated: updated,\n        setUpdated: setUpdated,\n        parsedList: parsedList\n      }, \"Medication_\" + medication.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this);\n    });\n  } else {\n    medicationComps = /*#__PURE__*/_jsxDEV(NoRegisteredMedications, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 27\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: containerSx,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: medicationComps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DisplayMedications, \"pjG7K5oPhWzCY/iFyMNiH3SMaG0=\");\n\n_c = DisplayMedications;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayMedications\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/Medi-Reminder-App/src/Components/Registered Medications/DisplayMedications.js"],"names":["useState","Box","Container","NoRegisteredMedications","Medication","containerSx","pl","pr","width","DisplayMedications","medicationList","localStorage","getItem","parsedList","JSON","parse","updated","setUpdated","medicationComps","length","stringified","comparedComponents","dupeIndexes","obj","push","stringify","medication","dose","forEach","arr","index","includes","copiedList","i","element","finalComponents","filter","map","id","flexDirection"],"mappings":"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","sourcesContent":["import {useState} from \"react\";\r\n\r\n// Material UI Components\r\nimport Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\n\r\n// Custom Components\r\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\r\nimport Medication from \"./Medication\";\r\n\r\n// Styles\r\nconst containerSx = {\r\n    pl: 5,\r\n    pr: 5,\r\n    width: \"100%\"\r\n};\r\n\r\nexport default function DisplayMedications() {\r\n    // This is the array of medication objects that will be displayed on the cards\r\n    const medicationList = localStorage.getItem(\"medications\");\r\n    const parsedList = JSON.parse(medicationList);\r\n\r\n    // This forces the DisplayMedications component to re-render after a medication has been deleted\r\n    const [updated, setUpdated] = useState(false);\r\n\r\n    let medicationComps;\r\n\r\n    // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\r\n    if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\r\n        const stringified = [];\r\n        const comparedComponents = [];\r\n        const dupeIndexes = [];\r\n\r\n        // This makes it so the objs can be more easily compared\r\n        for (const obj of parsedList) {\r\n            stringified.push(JSON.stringify([obj.medication, obj.dose]));\r\n        }\r\n\r\n        // This checks for duplicates\r\n        stringified.forEach((arr, index) => {\r\n            if (!comparedComponents.includes(arr)) {\r\n                comparedComponents.push(arr);\r\n            } else {\r\n                dupeIndexes.push(index);\r\n            }\r\n        });\r\n\r\n        const copiedList = [...parsedList];\r\n\r\n        for (let i = 0; i < copiedList.length; i++) {\r\n            for (const element of dupeIndexes) {\r\n                if (i === element) {\r\n                    copiedList[i] = \"dupe\";\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const finalComponents = copiedList.filter((index) => index !== \"dupe\");\r\n\r\n        medicationComps = finalComponents.map((medication) => {\r\n            return (\r\n                <Medication medication={medication} updated={updated} setUpdated={setUpdated} parsedList={parsedList}\r\n                            key={\"Medication_\" + medication.id}/>)\r\n        });\r\n    } else {\r\n        medicationComps = <NoRegisteredMedications/>;\r\n    }\r\n\r\n    return (\r\n        <Container sx={containerSx}>\r\n            <Box style={{flexDirection: \"column\"}}>\r\n                {medicationComps}\r\n            </Box>\r\n        </Container>\r\n    );\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}