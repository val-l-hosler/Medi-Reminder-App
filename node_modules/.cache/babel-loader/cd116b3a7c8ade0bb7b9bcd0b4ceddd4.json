{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\Medi-Reminder-App\\\\src\\\\Components\\\\Registered Medications\\\\DisplayMedications.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\"; // Custom Components\n\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\nimport Medication from \"./Medication\"; // Styles\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerSx = {\n  pl: 5,\n  pr: 5,\n  width: \"100%\"\n};\nexport default function DisplayMedications() {\n  _s();\n\n  // This is the array of medication objects that will be displayed on the cards\n  const medicationList = localStorage.getItem(\"medications\");\n  const parsedList = JSON.parse(medicationList); // This forces the component to re-render after a medication has been deleted\n\n  const [, updateState] = useState();\n  const forceUpdate = useCallback(() => updateState({}), []);\n  let medicationComps; // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\n\n  if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\n    medicationComps = parsedList.map(medication => {\n      return /*#__PURE__*/_jsxDEV(Medication, {\n        medication: medication,\n        forceUpdate: forceUpdate,\n        parsedList: parsedList\n      }, \"Medication_\" + medication.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this);\n    });\n  } else {\n    medicationComps = /*#__PURE__*/_jsxDEV(NoRegisteredMedications, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 27\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: containerSx,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: medicationComps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DisplayMedications, \"X5rEjsBNP/fh1FQA6Gy+z8f0U8w=\");\n\n_c = DisplayMedications;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayMedications\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/Medi-Reminder-App/src/Components/Registered Medications/DisplayMedications.js"],"names":["useState","useCallback","Box","Container","NoRegisteredMedications","Medication","containerSx","pl","pr","width","DisplayMedications","medicationList","localStorage","getItem","parsedList","JSON","parse","updateState","forceUpdate","medicationComps","length","map","medication","id","flexDirection"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,SAAP,MAAsB,yBAAtB,C,CAEA;;AACA,OAAOC,uBAAP,MAAoC,2BAApC;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;;AACA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,EAAE,EAAE,CADY;AAEhBC,EAAAA,EAAE,EAAE,CAFY;AAGhBC,EAAAA,KAAK,EAAE;AAHS,CAApB;AAMA,eAAe,SAASC,kBAAT,GAA8B;AAAA;;AACzC;AACA,QAAMC,cAAc,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAvB;AACA,QAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWL,cAAX,CAAnB,CAHyC,CAKzC;;AACA,QAAM,GAAGM,WAAH,IAAkBjB,QAAQ,EAAhC;AACA,QAAMkB,WAAW,GAAGjB,WAAW,CAAC,MAAMgB,WAAW,CAAC,EAAD,CAAlB,EAAwB,EAAxB,CAA/B;AAEA,MAAIE,eAAJ,CATyC,CAWzC;;AACA,MAAIP,YAAY,CAACC,OAAb,CAAqB,aAArB,MAAwC,IAAxC,IAAgDD,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCO,MAApC,GAA6C,CAAjG,EAAoG;AAChGD,IAAAA,eAAe,GAAGL,UAAU,CAACO,GAAX,CAAgBC,UAAD,IAAgB;AAC7C,0BAAQ,QAAC,UAAD;AAAY,QAAA,UAAU,EAAEA,UAAxB;AAAoC,QAAA,WAAW,EAAEJ,WAAjD;AAA8D,QAAA,UAAU,EAAEJ;AAA1E,SACiB,gBAAgBQ,UAAU,CAACC,EAD5C;AAAA;AAAA;AAAA;AAAA,cAAR;AAEH,KAHiB,CAAlB;AAIH,GALD,MAKO;AACHJ,IAAAA,eAAe,gBAAG,QAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,YAAlB;AACH;;AAED,sBACI,QAAC,SAAD;AAAW,IAAA,EAAE,EAAEb,WAAf;AAAA,2BACI,QAAC,GAAD;AAAK,MAAA,KAAK,EAAE;AAACkB,QAAAA,aAAa,EAAE;AAAhB,OAAZ;AAAA,gBACKL;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GA5BuBT,kB;;KAAAA,kB","sourcesContent":["import {useState, useCallback} from \"react\";\r\n\r\n// Material UI Components\r\nimport Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\n\r\n// Custom Components\r\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\r\nimport Medication from \"./Medication\";\r\n\r\n// Styles\r\nconst containerSx = {\r\n    pl: 5,\r\n    pr: 5,\r\n    width: \"100%\"\r\n};\r\n\r\nexport default function DisplayMedications() {\r\n    // This is the array of medication objects that will be displayed on the cards\r\n    const medicationList = localStorage.getItem(\"medications\");\r\n    const parsedList = JSON.parse(medicationList);\r\n\r\n    // This forces the component to re-render after a medication has been deleted\r\n    const [, updateState] = useState();\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n\r\n    let medicationComps;\r\n\r\n    // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\r\n    if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\r\n        medicationComps = parsedList.map((medication) => {\r\n            return (<Medication medication={medication} forceUpdate={forceUpdate} parsedList={parsedList}\r\n                                key={\"Medication_\" + medication.id}/>)\r\n        });\r\n    } else {\r\n        medicationComps = <NoRegisteredMedications/>;\r\n    }\r\n\r\n    return (\r\n        <Container sx={containerSx}>\r\n            <Box style={{flexDirection: \"column\"}}>\r\n                {medicationComps}\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}