{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\React-Medi-App\\\\src\\\\Components\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport Container from \"@mui/material/Container\";\nimport Link from \"@mui/material/Link\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\"; // Custom Components\n\nimport PillLogo from \"./pill.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login() {\n  _s();\n\n  // Styles\n  const boxFormSx = {\n    \"& .MuiTextField-root\": {\n      mb: 5,\n      width: \"100%\"\n    }\n  };\n  const boxLinkSx = {\n    mt: 2\n  };\n  const buttonSx = {\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    mb: 2.5,\n    width: \"100%\"\n  };\n  const containerDivStyle = {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\"\n  };\n  const containerSx = {\n    m: 0,\n    p: 0,\n    width: \"100%\"\n  };\n  const cardSx = {\n    ml: 5,\n    mt: 5,\n    mr: 5,\n    p: 5\n  };\n  const errorSx = {\n    mb: 5,\n    mt: 2.5\n  };\n  const imgStyle = {\n    filter: \"invert(100%) sepia(0%) saturate(0%) hue-rotate(231deg) brightness(103%) contrast(101%)\",\n    height: 250\n  };\n  const validationSchema = Yup.object().shape({\n    username: Yup.string().required(\"Username is required\"),\n    password: Yup.string().required(\"Password is required\")\n  });\n\n  const onSubmit = data => {\n    // This is implemented so the error UI for an invalid username/password can be displayed\n    if (!(data.username === \"test\" && data.password === \"pass\")) {\n      document.getElementById(\"userPassError\").style.display = \"flex\";\n    } else {\n      document.getElementById(\"userPassError\").style.display = \"none\";\n      fetch(\"/main-menu\").then(() => {\n        window.location = \"/main-menu\";\n      });\n    }\n  };\n\n  const {\n    handleSubmit,\n    control,\n    formState\n  } = useForm({\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema)\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: containerSx,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: containerDivStyle,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"Pill Logo\",\n        src: PillLogo,\n        style: imgStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      variant: \"outlined\",\n      sx: cardSx,\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        noValidate: true,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: boxFormSx,\n          children: [/*#__PURE__*/_jsxDEV(Controller, {\n            name: \"username\",\n            control: control,\n            defaultValue: \"\",\n            render: _ref => {\n              let {\n                field: {\n                  ref,\n                  ...field\n                },\n                fieldState: {\n                  error\n                }\n              } = _ref;\n              return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n                required: true,\n                error: !!error,\n                helperText: error === null || error === void 0 ? void 0 : error.message,\n                id: \"username\",\n                label: \"Username\",\n                name: \"username\",\n                type: \"search\",\n                inputRef: ref\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 33\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"password\",\n            control: control,\n            defaultValue: \"\",\n            render: _ref2 => {\n              let {\n                field: {\n                  ref,\n                  ...field\n                },\n                fieldState: {\n                  error\n                }\n              } = _ref2;\n              return /*#__PURE__*/_jsxDEV(TextField, { ...field,\n                required: true,\n                error: !!error,\n                helperText: error === null || error === void 0 ? void 0 : error.message,\n                id: \"password\",\n                label: \"Password\",\n                name: \"password\",\n                type: \"search\",\n                inputRef: ref\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 33\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: !formState.isValid,\n            size: \"large\",\n            sx: buttonSx,\n            type: \"submit\",\n            variant: \"contained\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"error\",\n            id: \"userPassError\",\n            style: {\n              display: \"none\"\n            },\n            sx: errorSx,\n            variant: \"inherit\",\n            children: \"The username and password are invalid\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: boxLinkSx,\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/\",\n          underline: \"hover\",\n          children: \"Create an account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Login, \"qw4uJ56/71qY3KYVVBgBKHcMt38=\", false, function () {\n  return [useForm];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/React-Medi-App/src/Components/Login.js"],"names":["React","useForm","Controller","yupResolver","Yup","Box","Button","Card","Container","Link","Typography","TextField","Login","boxFormSx","mb","width","boxLinkSx","mt","buttonSx","fontSize","height","containerDivStyle","alignItems","display","flexDirection","justifyContent","containerSx","m","p","cardSx","ml","mr","errorSx","imgStyle","filter","validationSchema","object","shape","username","string","required","password","onSubmit","data","document","getElementById","style","fetch","then","window","location","handleSubmit","control","formState","mode","resolver","PillLogo","field","ref","fieldState","error","message","isValid"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {useForm, Controller} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n\r\n// Material UI Components\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\n// Custom Components\r\nimport PillLogo from \"./pill.svg\";\r\n\r\nexport default function Login() {\r\n    // Styles\r\n    const boxFormSx = {\r\n        \"& .MuiTextField-root\": {mb: 5, width: \"100%\"}\r\n    };\r\n\r\n    const boxLinkSx = {\r\n        mt: 2\r\n    };\r\n\r\n    const buttonSx = {\r\n        fontSize: \"17px\",\r\n        height: \"5.75ch\",\r\n        mb: 2.5,\r\n        width: \"100%\"\r\n    };\r\n\r\n    const containerDivStyle = {\r\n        alignItems: \"center\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\"\r\n    };\r\n\r\n    const containerSx = {\r\n        m: 0,\r\n        p: 0,\r\n        width: \"100%\"\r\n    }\r\n\r\n    const cardSx = {\r\n        ml: 5,\r\n        mt: 5,\r\n        mr: 5,\r\n        p: 5\r\n    };\r\n\r\n    const errorSx = {\r\n        mb: 5,\r\n        mt: 2.5\r\n    };\r\n\r\n    const imgStyle = {\r\n        filter: \"invert(100%) sepia(0%) saturate(0%) hue-rotate(231deg) brightness(103%) contrast(101%)\",\r\n        height: 250\r\n    };\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        username: Yup.string()\r\n            .required(\"Username is required\"),\r\n        password: Yup.string()\r\n            .required(\"Password is required\")\r\n    });\r\n\r\n    const onSubmit = (data) => {\r\n        // This is implemented so the error UI for an invalid username/password can be displayed\r\n        if (!(data.username === \"test\" && data.password === \"pass\")) {\r\n            document.getElementById(\"userPassError\").style.display = \"flex\";\r\n        } else {\r\n            document.getElementById(\"userPassError\").style.display = \"none\";\r\n            fetch(\"/main-menu\")\r\n                .then(() => {\r\n                    window.location = \"/main-menu\";\r\n                });\r\n        }\r\n    };\r\n\r\n    const {handleSubmit, control, formState} = useForm({\r\n        mode: \"onChange\",\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n\r\n    return (\r\n        <Container sx={containerSx}>\r\n            <Box sx={containerDivStyle}>\r\n                <img alt=\"Pill Logo\" src={PillLogo} style={imgStyle}/>\r\n            </Box>\r\n\r\n            <Card variant=\"outlined\" sx={cardSx}>\r\n                <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                    <Box\r\n                        sx={boxFormSx}\r\n                    >\r\n\r\n                        <Controller\r\n                            name=\"username\"\r\n                            control={control}\r\n                            defaultValue={\"\"}\r\n                            render={({field: {ref, ...field}, fieldState: {error}}) => (\r\n                                <TextField\r\n                                    {...field}\r\n                                    required\r\n                                    error={!!error}\r\n                                    helperText={error?.message}\r\n                                    id=\"username\"\r\n                                    label=\"Username\"\r\n                                    name=\"username\"\r\n                                    type=\"search\"\r\n                                    inputRef={ref}\r\n                                />\r\n                            )}\r\n                        />\r\n\r\n                        <Controller\r\n                            name=\"password\"\r\n                            control={control}\r\n                            defaultValue={\"\"}\r\n                            render={({field: {ref, ...field}, fieldState: {error}}) => (\r\n                                <TextField\r\n                                    {...field}\r\n                                    required\r\n                                    error={!!error}\r\n                                    helperText={error?.message}\r\n                                    id=\"password\"\r\n                                    label=\"Password\"\r\n                                    name=\"password\"\r\n                                    type=\"search\"\r\n                                    inputRef={ref}\r\n                                />\r\n                            )}\r\n                        />\r\n\r\n                        <Button disabled={!formState.isValid} size=\"large\" sx={buttonSx} type=\"submit\"\r\n                                variant=\"contained\">Login</Button>\r\n\r\n                        <Typography color=\"error\" id=\"userPassError\" style={{display: \"none\"}} sx={errorSx}\r\n                                    variant=\"inherit\">\r\n                            The username and password are invalid\r\n                        </Typography>\r\n                    </Box>\r\n                </form>\r\n\r\n                <Box sx={boxLinkSx}>\r\n                    <Link href=\"/\" underline=\"hover\">\r\n                        {\"Create an account\"}\r\n                    </Link>\r\n                </Box>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}