{"ast":null,"code":"var _jsxFileName = \"/Users/valeriehosler/Desktop/Github/React-Medi-App/src/Components/DisplayReminders.js\",\n    _s2 = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useForm } from \"react-hook-form\"; // Material UI Components\n\nimport AddIcon from \"@mui/icons-material/AddCircle\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Container from \"@mui/material/Container\";\nimport IconButton from \"@mui/material/IconButton\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport Typography from \"@mui/material/Typography\";\nimport Chip from \"@mui/material/Chip\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\"; // Custom Components\n\nimport NoRegisteredReminders from \"./NoRegisteredReminders.js\";\nimport TimeInput from \"./TimeInput.js\";\nimport * as React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DisplayReminders() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // Styles\n  const boxSx = {\n    \"& .MuiTextField-root\": {\n      mb: 5,\n      width: \"100%\"\n    },\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    ml: \"50px\",\n    mr: \"50px\"\n  };\n  const buttonSx = {\n    borderRadius: 0,\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"100%\"\n  };\n  const cardSx = {\n    bgcolor: \"#eeeeee\",\n    boxShadow: 3,\n    m: 5,\n    pb: 0,\n    pt: 0\n  };\n  const confirmationButtonSx = {\n    borderRadius: 0,\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"50%\"\n  };\n  const chipSx = {\n    fontSize: 17,\n    mb: 0.75,\n    mr: 1.5,\n    mt: 0.75\n  };\n  const dialogTitleSx = {\n    m: 0,\n    p: 3\n  };\n  const iconButtonSx = {\n    position: \"absolute\",\n    right: 8,\n    top: 8,\n    color: theme => theme.palette.grey[500]\n  };\n  const typographyChipSx = {\n    m: 1.5\n  };\n  const typographySx = {\n    m: 1.5\n  }; // This is the array of reminder objects that will be displayed on the cards\n\n  const reminderList = localStorage.getItem(\"reminders\");\n  const parsed = JSON.parse(reminderList); // This forces the component to re-render after a medication has been deleted\n\n  const [, updateState] = useState();\n  const forceUpdate = useCallback(() => updateState({}), []);\n\n  const ChipList = params => {\n    return params.arr.map((index, i) => {\n      const handleDelete = () => {\n        params.arr.splice(index, 1);\n        const reminderList = localStorage.getItem(\"reminders\");\n        const parsed = JSON.parse(reminderList);\n\n        for (let i = 0; i < parsed.length; i++) {\n          if (parsed[i].id === params.id) {\n            parsed[i][params.objKey] = params.arr;\n          }\n        }\n\n        localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n        forceUpdate();\n      };\n\n      return /*#__PURE__*/_jsxDEV(Chip, {\n        onDelete: handleDelete,\n        sx: chipSx,\n        label: index\n      }, \"Chip\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this);\n    });\n  };\n\n  const {\n    control,\n    handleSubmit,\n    setValue,\n    register,\n    getValues\n  } = useForm(); // This is the Medication component that is displayed including a card, medication info, buttons, and dialogs\n\n  const Reminder = _ref => {\n    _s();\n\n    let {\n      reminder\n    } = _ref;\n\n    function getThisReminder(reminderId, parsedReminders) {\n      let index;\n\n      for (let i = 0; i < parsedReminders.length; i++) {\n        if (parsedReminders[i].id === reminderId) {\n          index = i;\n        }\n      }\n\n      return [parsedReminders[index], index];\n    } // This handles the add day dialog\n\n\n    const [openAddDay, setOpenAddDay] = useState(false);\n\n    const handleClickAddDay = () => {\n      setOpenAddDay(true);\n    };\n\n    const handleCloseAddDay = () => {\n      setOpenAddDay(false);\n    }; // This handles the add time dialog\n\n\n    const [openAddTime, setOpenAddTime] = useState(false);\n\n    const handleClickAddTime = () => {\n      setOpenAddTime(true);\n    };\n\n    const handleCloseAddTime = () => {\n      setOpenAddTime(false);\n    };\n\n    function addTime(reminderId, parsedReminders, data) {\n      const thisReminder = getThisReminder(reminderId, parsedReminders)[0];\n      const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\n      const times = [];\n      Object.values(data).forEach(value => {\n        const val = value.toString();\n        const sliced = val.slice(16, 21);\n        let finalTime;\n\n        if (sliced.charAt(0) === \"0\" && sliced.charAt(1) === \"0\") {\n          // this catches 12:00 - 12:59 am\n          finalTime = \"12\" + sliced.slice(2) + \" am\";\n        } else if (sliced.charAt(0) === \"0\" && sliced.charAt(1) !== \"0\") {\n          // this catches 1:00 - 9:59 am\n          finalTime = sliced.slice(1) + \" am\";\n        } else if (sliced.charAt(0) === \"1\" && (sliced.charAt(1) === \"0\" || sliced.charAt(1) === \"1\")) {\n          // this catches 10:00 - 11:59 am\n          finalTime = sliced + \" am\";\n        } else if (sliced.charAt(0) === \"1\" && sliced.charAt(1) === \"2\") {\n          // this catches 12:00 - 12:59 pm\n          finalTime = sliced + \" pm\";\n        } else {\n          // this catches 1:00 pm and later\n          let newSliced = sliced.slice(0, 2);\n          finalTime = parseInt(newSliced) - 12 + sliced.slice(2) + \" pm\";\n        }\n\n        times.push(finalTime);\n      });\n      thisReminder.times = [...thisReminder.times, times];\n      parsed[thisReminderIndex] = thisReminder;\n      localStorage.setItem(\"reminders\", JSON.stringify(parsed)); // This forces the dialog to close\n\n      setOpenAddTime(false); // This forces the reminder list to re-render\n\n      forceUpdate();\n    } // This handles the delete medication confirmation dialog\n\n\n    const [openDelete, setOpenDelete] = useState(false);\n\n    const handleClickOpenDelete = () => {\n      setOpenDelete(true);\n    };\n\n    const handleCloseDelete = () => {\n      setOpenDelete(false);\n    }; // Function for the delete reminder button\n\n\n    function deleteReminder(reminderId, parsedReminders) {\n      const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\n\n      if (parsedReminders.length > 1) {\n        // This removes the appropriate index of the array of reminder objects\n        parsedReminders.splice(thisReminderIndex, 1);\n      } else {\n        parsedReminders = [];\n      }\n\n      localStorage.setItem(\"reminders\", JSON.stringify(parsedReminders)); // This forces the dialog to close\n\n      setOpenDelete(false); // This forces the reminder list to re-render\n\n      forceUpdate();\n    } // This is what is rendered for the Reminder component\n\n\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        sx: cardSx,\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographySx,\n            variant: \"h5\",\n            children: [\"Medication: \", reminder.medication]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographySx,\n            variant: \"h5\",\n            children: [\"Dose: \", reminder.dose, \" mg\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyChipSx,\n            variant: \"h5\",\n            children: [\"Days: \", /*#__PURE__*/_jsxDEV(ChipList, {\n              id: reminder.id,\n              arr: reminder.days,\n              objKey: \"days\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              color: \"primary\",\n              onDelete: handleClickAddDay,\n              deleteIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 94\n              }, this),\n              sx: chipSx,\n              label: \"Add day\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyChipSx,\n            variant: \"h5\",\n            children: [\"Times: \", /*#__PURE__*/_jsxDEV(ChipList, {\n              id: reminder.id,\n              arr: reminder.times,\n              objKey: \"times\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 36\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              color: \"primary\",\n              onDelete: handleClickAddTime,\n              deleteIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 95\n              }, this),\n              sx: chipSx,\n              label: \"Add time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClickOpenDelete,\n            color: \"error\",\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"Delete Reminder\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openAddTime,\n        onClose: handleCloseAddTime,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          sx: dialogTitleSx,\n          children: handleCloseAddTime ? /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"close\",\n            onClick: handleCloseAddTime,\n            sx: iconButtonSx,\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(data => addTime(reminder.id, parsed, data)),\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: boxSx,\n            children: [/*#__PURE__*/_jsxDEV(LocalizationProvider, {\n              dateAdapter: AdapterDateFns,\n              children: /*#__PURE__*/_jsxDEV(TimeInput, {\n                setValue: setValue,\n                getValues: getValues,\n                register: register,\n                control: control,\n                counter: \"\"\n              }, \"updateTimeInput\" + reminder.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                size: \"large\",\n                sx: buttonSx,\n                type: \"submit\",\n                variant: \"contained\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openDelete,\n        onClose: handleCloseDelete,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            m: 5\n          },\n          children: [\" Do you want to delete the reminder for \", reminder.dose, \" mg of \", reminder.medication, \"? \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => deleteReminder(reminder.id, parsed),\n            size: \"large\",\n            sx: confirmationButtonSx,\n            variant: \"contained\",\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleCloseDelete,\n            color: \"error\",\n            size: \"large\",\n            sx: confirmationButtonSx,\n            variant: \"contained\",\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this);\n  }; // End Reminder component\n\n\n  _s(Reminder, \"VSOQtLI0V7k0f0OX+vs7pzdJS+w=\");\n\n  let reminders; // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\n\n  if (localStorage.getItem(\"reminders\") !== null && localStorage.getItem(\"reminders\").length > 2) {\n    reminders = parsed.map((reminder, index) => {\n      return /*#__PURE__*/_jsxDEV(Reminder, {\n        reminder: reminder\n      }, \"reminder\" + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 21\n      }, this);\n    });\n  } else {\n    reminders = /*#__PURE__*/_jsxDEV(NoRegisteredReminders, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 21\n    }, this);\n  } // This is the actual final block of code that is rendered for this component\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: reminders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(DisplayReminders, \"Z9N2Ml+uqCcV3bwcfmJzFb0K4yc=\", false, function () {\n  return [useForm];\n});\n\n_c = DisplayReminders;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayReminders\");","map":{"version":3,"sources":["/Users/valeriehosler/Desktop/Github/React-Medi-App/src/Components/DisplayReminders.js"],"names":["useCallback","useState","useForm","AddIcon","Box","Card","CardContent","CloseIcon","Container","IconButton","LocalizationProvider","Typography","Chip","Button","Dialog","DialogTitle","AdapterDateFns","NoRegisteredReminders","TimeInput","React","DisplayReminders","boxSx","mb","width","alignItems","display","flexDirection","ml","mr","buttonSx","borderRadius","fontSize","height","cardSx","bgcolor","boxShadow","m","pb","pt","confirmationButtonSx","chipSx","mt","dialogTitleSx","p","iconButtonSx","position","right","top","color","theme","palette","grey","typographyChipSx","typographySx","reminderList","localStorage","getItem","parsed","JSON","parse","updateState","forceUpdate","ChipList","params","arr","map","index","i","handleDelete","splice","length","id","objKey","setItem","stringify","control","handleSubmit","setValue","register","getValues","Reminder","reminder","getThisReminder","reminderId","parsedReminders","openAddDay","setOpenAddDay","handleClickAddDay","handleCloseAddDay","openAddTime","setOpenAddTime","handleClickAddTime","handleCloseAddTime","addTime","data","thisReminder","thisReminderIndex","times","Object","values","forEach","value","val","toString","sliced","slice","finalTime","charAt","newSliced","parseInt","push","openDelete","setOpenDelete","handleClickOpenDelete","handleCloseDelete","deleteReminder","medication","dose","days","reminders"],"mappings":"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","sourcesContent":["import {useCallback, useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\n\n// Material UI Components\nimport AddIcon from \"@mui/icons-material/AddCircle\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Container from \"@mui/material/Container\";\nimport IconButton from \"@mui/material/IconButton\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport Typography from \"@mui/material/Typography\";\nimport Chip from \"@mui/material/Chip\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\n\n// Custom Components\nimport NoRegisteredReminders from \"./NoRegisteredReminders.js\";\nimport TimeInput from \"./TimeInput.js\";\nimport * as React from \"react\";\n\nexport default function DisplayReminders() {\n    // Styles\n    const boxSx = {\n        \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        ml: \"50px\",\n        mr: \"50px\",\n    };\n\n    const buttonSx = {\n        borderRadius: 0,\n        fontSize: \"17px\",\n        height: \"5.75ch\",\n        width: \"100%\"\n    };\n\n    const cardSx = {\n        bgcolor: \"#eeeeee\",\n        boxShadow: 3,\n        m: 5,\n        pb: 0,\n        pt: 0\n    };\n\n    const confirmationButtonSx = {\n        borderRadius: 0,\n        fontSize: \"17px\",\n        height: \"5.75ch\",\n        width: \"50%\"\n    };\n\n    const chipSx = {\n        fontSize: 17,\n        mb: 0.75,\n        mr: 1.5,\n        mt: 0.75\n    };\n\n    const dialogTitleSx = {\n        m: 0,\n        p: 3\n    };\n\n    const iconButtonSx = {\n        position: \"absolute\",\n        right: 8,\n        top: 8,\n        color: (theme) => theme.palette.grey[500],\n    };\n\n    const typographyChipSx = {\n        m: 1.5\n    };\n\n    const typographySx = {\n        m: 1.5\n    };\n\n    // This is the array of reminder objects that will be displayed on the cards\n    const reminderList = localStorage.getItem(\"reminders\");\n    const parsed = JSON.parse(reminderList);\n\n    // This forces the component to re-render after a medication has been deleted\n    const [, updateState] = useState();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    const ChipList = (params) => {\n        return (params.arr.map((index, i) => {\n            const handleDelete = () => {\n                params.arr.splice(index, 1);\n\n                const reminderList = localStorage.getItem(\"reminders\");\n                const parsed = JSON.parse(reminderList);\n\n                for (let i = 0; i < parsed.length; i++) {\n                    if (parsed[i].id === params.id) {\n                        parsed[i][params.objKey] = params.arr;\n                    }\n                }\n\n                localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n                forceUpdate();\n            };\n\n            return (<Chip onDelete={handleDelete} sx={chipSx} key={\"Chip\" + i} label={index}/>);\n        }));\n    };\n\n    const {control, handleSubmit, setValue, register, getValues} = useForm();\n\n    // This is the Medication component that is displayed including a card, medication info, buttons, and dialogs\n    const Reminder = ({reminder}) => {\n        function getThisReminder(reminderId, parsedReminders) {\n            let index;\n\n            for (let i = 0; i < parsedReminders.length; i++) {\n                if (parsedReminders[i].id === reminderId) {\n                    index = i;\n                }\n            }\n\n            return [parsedReminders[index], index];\n        }\n\n        // This handles the add day dialog\n        const [openAddDay, setOpenAddDay] = useState(false);\n        const handleClickAddDay = () => {\n            setOpenAddDay(true);\n        };\n        const handleCloseAddDay = () => {\n            setOpenAddDay(false);\n        };\n\n        // This handles the add time dialog\n        const [openAddTime, setOpenAddTime] = useState(false);\n        const handleClickAddTime = () => {\n            setOpenAddTime(true);\n        };\n        const handleCloseAddTime = () => {\n            setOpenAddTime(false);\n        };\n\n        function addTime(reminderId, parsedReminders, data) {\n            const thisReminder = getThisReminder(reminderId, parsedReminders)[0];\n            const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\n            const times = [];\n\n            Object.values(data).forEach((value) => {\n                const val = value.toString();\n                const sliced = val.slice(16, 21);\n                let finalTime;\n\n                if (sliced.charAt(0) === \"0\" && sliced.charAt(1) === \"0\") { // this catches 12:00 - 12:59 am\n                    finalTime = \"12\" + sliced.slice(2) + \" am\";\n                } else if (sliced.charAt(0) === \"0\" && sliced.charAt(1) !== \"0\") { // this catches 1:00 - 9:59 am\n                    finalTime = sliced.slice(1) + \" am\";\n                } else if (sliced.charAt(0) === \"1\" && (sliced.charAt(1) === \"0\" || sliced.charAt(1) === \"1\")) { // this catches 10:00 - 11:59 am\n                    finalTime = sliced + \" am\";\n                } else if (sliced.charAt(0) === \"1\" && sliced.charAt(1) === \"2\") { // this catches 12:00 - 12:59 pm\n                    finalTime = sliced + \" pm\";\n                } else { // this catches 1:00 pm and later\n                    let newSliced = sliced.slice(0, 2);\n                    finalTime = (parseInt(newSliced) - 12) + sliced.slice(2) + \" pm\";\n                }\n\n                times.push(finalTime);\n            });\n\n            thisReminder.times = [...thisReminder.times, times];\n            parsed[thisReminderIndex] = thisReminder;\n            localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n\n            // This forces the dialog to close\n            setOpenAddTime(false);\n\n            // This forces the reminder list to re-render\n            forceUpdate();\n        }\n\n        // This handles the delete medication confirmation dialog\n        const [openDelete, setOpenDelete] = useState(false);\n        const handleClickOpenDelete = () => {\n            setOpenDelete(true);\n        };\n        const handleCloseDelete = () => {\n            setOpenDelete(false);\n        };\n\n        // Function for the delete reminder button\n        function deleteReminder(reminderId, parsedReminders) {\n            const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\n\n            if (parsedReminders.length > 1) {\n                // This removes the appropriate index of the array of reminder objects\n                parsedReminders.splice(thisReminderIndex, 1);\n            } else {\n                parsedReminders = [];\n            }\n\n            localStorage.setItem(\"reminders\", JSON.stringify(parsedReminders));\n\n            // This forces the dialog to close\n            setOpenDelete(false);\n\n            // This forces the reminder list to re-render\n            forceUpdate();\n        }\n\n        // This is what is rendered for the Reminder component\n        return (\n            <Box>\n                <Card sx={cardSx}>\n                    <CardContent>\n                        <Typography sx={typographySx} variant=\"h5\">\n                            Medication: {reminder.medication}\n                        </Typography>\n                        <Typography sx={typographySx} variant=\"h5\">\n                            Dose: {reminder.dose} mg\n                        </Typography>\n                        <Typography sx={typographyChipSx} variant=\"h5\">\n                            Days: <ChipList id={reminder.id} arr={reminder.days} objKey={\"days\"}/>\n                            {/* Note: the onDelete creates the icon in the appropriate spot and there isn't an onAdd option */}\n                            <Chip color={\"primary\"} onDelete={handleClickAddDay} deleteIcon={<AddIcon/>} sx={chipSx}\n                                  label={\"Add day\"}/>\n                        </Typography>\n                        <Typography sx={typographyChipSx} variant=\"h5\">\n                            Times: <ChipList id={reminder.id} arr={reminder.times} objKey={\"times\"}/>\n                            {/* Note: the onDelete creates the icon in the appropriate spot and there isn't an onAdd option */}\n                            <Chip color={\"primary\"} onDelete={handleClickAddTime} deleteIcon={<AddIcon/>} sx={chipSx}\n                                  label={\"Add time\"}/>\n                        </Typography>\n                    </CardContent>\n                    <Box>\n                        <Button onClick={handleClickOpenDelete} color=\"error\"\n                                size=\"large\"\n                                sx={buttonSx} variant=\"contained\">Delete Reminder</Button>\n                    </Box>\n                </Card>\n\n                {/* Add time dialog */}\n                <Dialog\n                    keepMounted={true}\n                    open={openAddTime}\n                    onClose={handleCloseAddTime}\n                >\n                    <DialogTitle sx={dialogTitleSx}>\n                        {handleCloseAddTime ? (\n                            <IconButton\n                                aria-label=\"close\"\n                                onClick={handleCloseAddTime}\n                                sx={iconButtonSx}\n                            >\n                                <CloseIcon/>\n                            </IconButton>\n                        ) : null}\n                    </DialogTitle>\n\n                    <form onSubmit={handleSubmit((data) => addTime(reminder.id, parsed, data))}>\n                        <Box sx={boxSx}>\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                <TimeInput setValue={setValue} getValues={getValues} register={register}\n                                           control={control}\n                                           counter={\"\"} key={\"updateTimeInput\" + reminder.id}/>\n                            </LocalizationProvider>\n                            <Box>\n                                <Button size=\"large\" sx={buttonSx} type=\"submit\" variant=\"contained\">Submit</Button>\n                            </Box>\n                        </Box>\n                    </form>\n                </Dialog>\n\n                {/* Delete reminder confirmation dialog */}\n                <Dialog\n                    keepMounted={true}\n                    open={openDelete}\n                    onClose={handleCloseDelete}\n                >\n                    <Typography variant=\"h5\" sx={{m: 5}}> Do you want to delete the reminder for {reminder.dose} mg\n                        of {reminder.medication}? </Typography>\n\n                    <Box>\n                        <Button onClick={() => deleteReminder(reminder.id, parsed)}\n                                size=\"large\"\n                                sx={confirmationButtonSx} variant=\"contained\">Yes</Button>\n                        <Button onClick={handleCloseDelete} color=\"error\"\n                                size=\"large\"\n                                sx={confirmationButtonSx} variant=\"contained\">No</Button>\n                    </Box>\n                </Dialog>\n            </Box>\n        )\n    }; // End Reminder component\n\n    let reminders;\n\n    // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\n    if (localStorage.getItem(\"reminders\") !== null && localStorage.getItem(\"reminders\").length > 2) {\n        reminders = parsed.map((reminder, index) => {\n            return (<Reminder reminder={reminder} key={\"reminder\" + index}/>)\n        });\n    } else {\n        reminders = <NoRegisteredReminders/>;\n    }\n\n    // This is the actual final block of code that is rendered for this component\n    return (\n        <Container>\n            <Box style={{flexDirection: \"column\"}}>\n                {reminders}\n            </Box>\n        </Container>\n    );\n}"]},"metadata":{},"sourceType":"module"}