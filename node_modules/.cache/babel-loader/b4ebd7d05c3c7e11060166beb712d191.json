{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\Medi-Reminder-App\\\\src\\\\Components\\\\Registered Medications\\\\Medication.js\",\n    _s = $RefreshSig$();\n\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useState } from \"react\";\nimport * as Yup from \"yup\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\"; // Custom components\n\nimport DoseInput from \"../Inputs/DoseInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst doseSuggestions = [{\n  label: \"10 mg\"\n}, {\n  label: \"20 mg\"\n}, {\n  label: \"30 mg\"\n}, {\n  label: \"40 mg\"\n}, {\n  label: \"50 mg\"\n}, {\n  label: \"60 mg\"\n}, {\n  label: \"70 mg\"\n}, {\n  label: \"80 mg\"\n}]; // Form validation using Yup\n\nconst validationSchema = Yup.object().shape({\n  dose: Yup.string().required(\"Dose is required\")\n}); // Styles\n\nconst boxSx = {\n  \"& .MuiTextField-root\": {\n    mb: 5,\n    width: \"100%\"\n  },\n  ml: 5,\n  mr: 5\n};\nconst buttonSx = {\n  borderRadius: 0,\n  fontSize: \"17px\",\n  height: \"5.75ch\",\n  width: \"50%\"\n};\nconst cardSx = {\n  bgcolor: \"#eeeeee\",\n  boxShadow: 3,\n  mb: 5,\n  mt: 5\n};\nconst dialogBoxSx = {\n  width: \"75vw\"\n};\nconst dialogTitleSx = {\n  p: 3\n};\nconst formButtonSx = {\n  borderRadius: 0,\n  fontSize: \"17px\",\n  height: \"5.75ch\",\n  mb: 5,\n  width: \"100%\"\n};\nconst iconButtonSx = {\n  position: \"absolute\",\n  right: 8,\n  top: 8,\n  color: theme => theme.palette.grey[500]\n};\nconst typographyMedicationSx = {\n  m: 1.5\n};\nconst updateDoseTypographySx = {\n  mb: 5,\n  ml: 5,\n  mr: 5,\n  textAlign: \"center\"\n};\nexport default function Medication(_ref) {\n  _s();\n\n  let {\n    medication,\n    parsedList,\n    setParsedList\n  } = _ref;\n  const {\n    handleSubmit,\n    control,\n    formState\n  } = useForm({\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema)\n  }); // This handles the update dose dialog\n\n  const [openUpdate, setOpenUpdate] = useState(false);\n\n  const handleClickOpenUpdate = () => {\n    setOpenUpdate(true);\n  };\n\n  const handleCloseUpdate = () => {\n    setOpenUpdate(false);\n  }; // This is passed into the dose input\n\n\n  const [doseValue, setDoseValue] = useState(null); // Function for the update dose button\n\n  const updateDose = (medicationId, parsedMedications, data) => {\n    const {\n      dose: updatedDose\n    } = data;\n\n    for (const index of parsedMedications) {\n      if (index.id === medicationId) {\n        setLastUpdated(JSON.stringify([index.medication, index.dose]));\n        index.dose = updatedDose;\n      }\n    }\n\n    localStorage.setItem(\"medications\", JSON.stringify(parsedMedications)); // This forces the dialog to close\n\n    setOpenUpdate(false); // This forces the medication list to re-render\n\n    setUpdated(!updated);\n  }; // This handles the delete medication confirmation dialog\n\n\n  const [openDelete, setOpenDelete] = useState(false);\n\n  const handleClickOpenDelete = () => {\n    setOpenDelete(true);\n  };\n\n  const handleCloseDelete = () => {\n    setOpenDelete(false);\n  }; // Function for the delete med button\n\n\n  const deleteMedication = (medicationId, parsedMedications) => {\n    let index = -1;\n\n    for (let i = 0; i < parsedMedications.length; i++) {\n      if (parsedMedications[i].id === medicationId) {\n        index = i;\n        break;\n      }\n    }\n\n    let updatedMedications = [];\n\n    if (parsedMedications.length > 0) {\n      // This removes the appropriate index of the array of medication objects\n      parsedMedications.forEach((medication, i) => {\n        if (index > -1 && index !== i) {\n          updatedMedications.push(medication);\n        } else if (index === i) {\n          setLastDeleted(JSON.stringify([medication.medication, medication.dose]));\n        }\n      });\n    }\n\n    localStorage.setItem(\"medications\", JSON.stringify(updatedMedications)); // This forces the dialog to close\n\n    setOpenDelete(false); // This forces the medication list to re-render\n\n    setUpdated(!updated);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      sx: cardSx,\n      children: [/*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: typographyMedicationSx,\n          variant: \"h5\",\n          children: [\"Medication: \", medication.medication]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          sx: typographyMedicationSx,\n          variant: \"h5\",\n          children: [\"Dose: \", medication.dose]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClickOpenUpdate,\n          size: \"large\",\n          sx: buttonSx,\n          variant: \"contained\",\n          children: \"Edit Dose\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClickOpenDelete,\n          color: \"error\",\n          size: \"large\",\n          sx: buttonSx,\n          variant: \"contained\",\n          children: \"Delete Med \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDelete,\n      onClose: handleCloseDelete,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: dialogBoxSx,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            m: 5\n          },\n          children: [\" Do you want to delete \", medication.dose, \" of \", medication.medication, \"? \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => deleteMedication(medication.id, parsedList),\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleCloseDelete,\n            color: \"error\",\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      keepMounted: true,\n      open: openUpdate,\n      onClose: handleCloseUpdate,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: dialogTitleSx,\n        children: handleCloseUpdate ? /*#__PURE__*/_jsxDEV(IconButton, {\n          \"aria-label\": \"close\",\n          onClick: handleCloseUpdate,\n          sx: iconButtonSx,\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: dialogBoxSx,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(data => updateDose(medication.id, parsedList, data)),\n          noValidate: true,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: updateDoseTypographySx,\n            variant: \"h5\",\n            children: \"Update dose\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: boxSx,\n            children: [/*#__PURE__*/_jsxDEV(DoseInput, {\n              control: control,\n              suggestions: doseSuggestions,\n              doseValue: doseValue,\n              setDoseValue: setDoseValue,\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              disabled: !formState.isValid,\n              size: \"large\",\n              sx: formButtonSx,\n              type: \"submit\",\n              variant: \"contained\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Medication, \"Sy7Jw2e5DmbeDUDWCLxCETdMje4=\", false, function () {\n  return [useForm];\n});\n\n_c = Medication;\n\nvar _c;\n\n$RefreshReg$(_c, \"Medication\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/Medi-Reminder-App/src/Components/Registered Medications/Medication.js"],"names":["useForm","yupResolver","useState","Yup","Box","Card","CardContent","Typography","Button","IconButton","CloseIcon","Dialog","DialogTitle","DoseInput","doseSuggestions","label","validationSchema","object","shape","dose","string","required","boxSx","mb","width","ml","mr","buttonSx","borderRadius","fontSize","height","cardSx","bgcolor","boxShadow","mt","dialogBoxSx","dialogTitleSx","p","formButtonSx","iconButtonSx","position","right","top","color","theme","palette","grey","typographyMedicationSx","m","updateDoseTypographySx","textAlign","Medication","medication","parsedList","setParsedList","handleSubmit","control","formState","mode","resolver","openUpdate","setOpenUpdate","handleClickOpenUpdate","handleCloseUpdate","doseValue","setDoseValue","updateDose","medicationId","parsedMedications","data","updatedDose","index","id","setLastUpdated","JSON","stringify","localStorage","setItem","setUpdated","updated","openDelete","setOpenDelete","handleClickOpenDelete","handleCloseDelete","deleteMedication","i","length","updatedMedications","forEach","push","setLastDeleted","isValid"],"mappings":"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","sourcesContent":["import {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport {useState} from \"react\";\r\nimport * as Yup from \"yup\";\r\n\r\n// Material UI Components\r\nimport Box from \"@mui/material/Box\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\n\r\n// Custom components\r\nimport DoseInput from \"../Inputs/DoseInput\";\r\n\r\nconst doseSuggestions = [\r\n    {label: \"10 mg\"},\r\n    {label: \"20 mg\"},\r\n    {label: \"30 mg\"},\r\n    {label: \"40 mg\"},\r\n    {label: \"50 mg\"},\r\n    {label: \"60 mg\"},\r\n    {label: \"70 mg\"},\r\n    {label: \"80 mg\"}\r\n];\r\n\r\n// Form validation using Yup\r\nconst validationSchema = Yup.object().shape({\r\n    dose: Yup.string()\r\n        .required(\"Dose is required\")\r\n});\r\n\r\n// Styles\r\nconst boxSx = {\r\n    \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\r\n    ml: 5,\r\n    mr: 5\r\n};\r\n\r\nconst buttonSx = {\r\n    borderRadius: 0,\r\n    fontSize: \"17px\",\r\n    height: \"5.75ch\",\r\n    width: \"50%\"\r\n};\r\n\r\nconst cardSx = {\r\n    bgcolor: \"#eeeeee\",\r\n    boxShadow: 3,\r\n    mb: 5,\r\n    mt: 5\r\n};\r\n\r\nconst dialogBoxSx = {\r\n    width: \"75vw\"\r\n};\r\n\r\nconst dialogTitleSx = {\r\n    p: 3\r\n};\r\n\r\nconst formButtonSx = {\r\n    borderRadius: 0,\r\n    fontSize: \"17px\",\r\n    height: \"5.75ch\",\r\n    mb: 5,\r\n    width: \"100%\"\r\n};\r\n\r\nconst iconButtonSx = {\r\n    position: \"absolute\",\r\n    right: 8,\r\n    top: 8,\r\n    color: (theme) => theme.palette.grey[500]\r\n};\r\n\r\nconst typographyMedicationSx = {\r\n    m: 1.5\r\n};\r\n\r\nconst updateDoseTypographySx = {\r\n    mb: 5,\r\n    ml: 5,\r\n    mr: 5,\r\n    textAlign: \"center\"\r\n};\r\n\r\nexport default function Medication({medication, parsedList, setParsedList}) {\r\n    const {handleSubmit, control, formState} = useForm({\r\n        mode: \"onChange\",\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n\r\n    // This handles the update dose dialog\r\n    const [openUpdate, setOpenUpdate] = useState(false);\r\n    const handleClickOpenUpdate = () => {\r\n        setOpenUpdate(true);\r\n    };\r\n    const handleCloseUpdate = () => {\r\n        setOpenUpdate(false);\r\n    };\r\n\r\n    // This is passed into the dose input\r\n    const [doseValue, setDoseValue] = useState(null);\r\n\r\n    // Function for the update dose button\r\n    const updateDose = (medicationId, parsedMedications, data) => {\r\n        const {dose: updatedDose} = data;\r\n\r\n        for (const index of parsedMedications) {\r\n            if (index.id === medicationId) {\r\n                setLastUpdated(JSON.stringify([index.medication, index.dose]));\r\n                index.dose = updatedDose;\r\n            }\r\n        }\r\n\r\n        localStorage.setItem(\"medications\", JSON.stringify(parsedMedications));\r\n\r\n        // This forces the dialog to close\r\n        setOpenUpdate(false);\r\n\r\n        // This forces the medication list to re-render\r\n        setUpdated(!updated);\r\n    };\r\n\r\n    // This handles the delete medication confirmation dialog\r\n    const [openDelete, setOpenDelete] = useState(false);\r\n    const handleClickOpenDelete = () => {\r\n        setOpenDelete(true);\r\n    };\r\n    const handleCloseDelete = () => {\r\n        setOpenDelete(false);\r\n    };\r\n\r\n    // Function for the delete med button\r\n    const deleteMedication = (medicationId, parsedMedications) => {\r\n        let index = -1;\r\n\r\n        for (let i = 0; i < parsedMedications.length; i++) {\r\n            if (parsedMedications[i].id === medicationId) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        let updatedMedications = [];\r\n\r\n        if (parsedMedications.length > 0) {\r\n            // This removes the appropriate index of the array of medication objects\r\n            parsedMedications.forEach((medication, i) => {\r\n                if (index > -1 && index !== i) {\r\n                    updatedMedications.push(medication);\r\n                } else if (index === i) {\r\n                    setLastDeleted(JSON.stringify([medication.medication, medication.dose]));\r\n                }\r\n            });\r\n        }\r\n\r\n        localStorage.setItem(\"medications\", JSON.stringify(updatedMedications));\r\n\r\n        // This forces the dialog to close\r\n        setOpenDelete(false);\r\n\r\n        // This forces the medication list to re-render\r\n        setUpdated(!updated);\r\n    };\r\n\r\n    return (\r\n        <Box>\r\n            <Card sx={cardSx}>\r\n                <CardContent>\r\n                    <Typography sx={typographyMedicationSx} variant=\"h5\">\r\n                        Medication: {medication.medication}\r\n                    </Typography>\r\n                    <Typography sx={typographyMedicationSx} variant=\"h5\">\r\n                        Dose: {medication.dose}\r\n                    </Typography>\r\n                </CardContent>\r\n                <Box>\r\n                    <Button onClick={handleClickOpenUpdate} size=\"large\"\r\n                            sx={buttonSx}\r\n                            variant=\"contained\">Edit\r\n                        Dose</Button>\r\n                    <Button onClick={handleClickOpenDelete} color=\"error\"\r\n                            size=\"large\"\r\n                            sx={buttonSx} variant=\"contained\">Delete\r\n                        Med </Button>\r\n                </Box>\r\n            </Card>\r\n\r\n            {/* Delete medication confirmation dialog */}\r\n            <Dialog\r\n                open={openDelete}\r\n                onClose={handleCloseDelete}\r\n            >\r\n                <Box sx={dialogBoxSx}>\r\n                    <Typography variant=\"h5\" sx={{m: 5}}> Do you want to\r\n                        delete {medication.dose} of {medication.medication}? </Typography>\r\n\r\n                    <Box>\r\n                        <Button onClick={() => deleteMedication(medication.id, parsedList)}\r\n                                size=\"large\"\r\n                                sx={buttonSx} variant=\"contained\">Yes</Button>\r\n                        <Button onClick={handleCloseDelete} color=\"error\"\r\n                                size=\"large\"\r\n                                sx={buttonSx} variant=\"contained\">No</Button>\r\n                    </Box>\r\n                </Box>\r\n            </Dialog>\r\n\r\n            {/* Update dose dialog */}\r\n            <Dialog\r\n                keepMounted={true}\r\n                open={openUpdate}\r\n                onClose={handleCloseUpdate}\r\n            >\r\n                <DialogTitle sx={dialogTitleSx}>\r\n                    {handleCloseUpdate ? (\r\n                        <IconButton\r\n                            aria-label=\"close\"\r\n                            onClick={handleCloseUpdate}\r\n                            sx={iconButtonSx}\r\n                        >\r\n                            <CloseIcon/>\r\n                        </IconButton>\r\n                    ) : null}\r\n                </DialogTitle>\r\n\r\n                <Box sx={dialogBoxSx}>\r\n                    <form onSubmit={handleSubmit((data) => updateDose(medication.id, parsedList, data))} noValidate>\r\n                        <Typography sx={updateDoseTypographySx} variant=\"h5\">\r\n                            Update dose\r\n                        </Typography>\r\n\r\n                        <Box\r\n                            sx={boxSx}\r\n                        >\r\n                            <DoseInput control={control} suggestions={doseSuggestions} doseValue={doseValue}\r\n                                       setDoseValue={setDoseValue} variant={\"outlined\"}/>\r\n\r\n                            <Button disabled={!formState.isValid} size=\"large\"\r\n                                    sx={formButtonSx} type=\"submit\"\r\n                                    variant=\"contained\">Submit</Button>\r\n                        </Box>\r\n                    </form>\r\n                </Box>\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}