{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\React-Medi-App\\\\src\\\\Components\\\\RegisterReminder.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport Typography from \"@mui/material/Typography\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport TextField from \"@mui/material/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst daysOfWeekSuggestions = [{\n  label: \"Every day\",\n  disabled: false\n}, {\n  label: \"Sunday\",\n  disabled: false\n}, {\n  label: \"Monday\",\n  disabled: false\n}, {\n  label: \"Tuesday\",\n  disabled: false\n}, {\n  label: \"Wednesday\",\n  disabled: false\n}, {\n  label: \"Thursday\",\n  disabled: false\n}, {\n  label: \"Friday\",\n  disabled: false\n}, {\n  label: \"Saturday\",\n  disabled: false\n}];\nconst medicationSuggestions = [{\n  label: \"Lisinopril\"\n}, {\n  label: \"Valsartan\"\n}];\nexport default function RegisterReminder() {\n  _s();\n\n  var _errors$medication, _errors$daysOfWeek;\n\n  //Styles and SX\n  const boxSx = {\n    \"& .MuiTextField-root\": {\n      mb: 2.5,\n      width: \"100%\"\n    },\n    bgcolor: \"background.paper\",\n    ml: \"50px\",\n    mr: \"50px\"\n  };\n  const buttonSx = {\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"100%\"\n  };\n  const errorSx = {\n    mb: 2.5\n  }; // Form validation using Yup\n\n  const validationSchema = Yup.object().shape({\n    medication: Yup.string().required(\"Medication is required\"),\n    daysOfWeek: Yup.string().required(\"Days of the week are required\")\n  }); // Form onSubmit\n\n  const onSubmit = data => {\n    console.log(data);\n  };\n\n  const {\n    formState: {\n      errors\n    },\n    handleSubmit,\n    register\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n  const [daysOfWeekSuggestions, setOptions] = useState(daysOfWeekSuggestions);\n  const [selected, setSelected] = useState([]);\n\n  const onOptionsChange = (e, valueArr) => {\n    setSelected(valueArr);\n\n    if (valueArr.length === 0) {\n      const resetOptions = [...daysOfWeekSuggestions].map(opt => {\n        opt.disabled = false;\n        return opt;\n      });\n      setOptions(resetOptions);\n    } else {\n      const everyDaySelected = valueArr.find(item => item.label === \"Every day\");\n      const notEveryDaySelected = valueArr.find(item => item.label !== \"Every day\");\n\n      if (everyDaySelected) {\n        const updatedOptions = [...daysOfWeekSuggestions].map(opt => {\n          if (opt.label !== \"Every day\") opt.disabled = true;else opt.disabled = false;\n          return opt;\n        });\n        setOptions(updatedOptions);\n      }\n\n      if (notEveryDaySelected) {\n        const updatedOptions = [...daysOfWeekSuggestions].map(opt => {\n          if (opt.label === \"Every day\") opt.disabled = true;else opt.disabled = false;\n          return opt;\n        });\n        setOptions(updatedOptions);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: boxSx,\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n          disableClearable: true,\n          disablePortal: true,\n          id: \"medication-autocomplete\",\n          options: medicationSuggestions,\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n            required: true,\n            error: errors.medication ? true : false,\n            id: \"medication\",\n            label: \"Medication\",\n            name: \"medication\",\n            type: \"search\",\n            ...params,\n            ...register(\"medication\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          sx: errorSx,\n          variant: \"inherit\",\n          children: (_errors$medication = errors.medication) === null || _errors$medication === void 0 ? void 0 : _errors$medication.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n          disableClearable: true,\n          disablePortal: true,\n          filterSelectedOptions: true,\n          multiple: true,\n          getOptionDisabled: option => option.disabled ? true : false,\n          getOptionLabel: option => option.label,\n          id: \"days-autocomplete\",\n          onChange: (event, value) => onOptionsChange(event, value),\n          options: daysOfWeekSuggestions,\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n            required: true,\n            error: errors.daysOfWeek ? true : false,\n            id: \"daysOfWeek\",\n            label: \"Days of the week\",\n            name: \"daysOfWeek\",\n            type: \"search\",\n            ...params,\n            ...register(\"daysOfWeek\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 50\n          }, this),\n          value: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          sx: errorSx,\n          variant: \"inherit\",\n          children: (_errors$daysOfWeek = errors.daysOfWeek) === null || _errors$daysOfWeek === void 0 ? void 0 : _errors$daysOfWeek.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSubmit(onSubmit),\n          size: \"large\",\n          sx: buttonSx,\n          type: \"submit\",\n          variant: \"contained\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RegisterReminder, \"58TQOPb5GDatGmNja4a1BQLu+gQ=\", false, function () {\n  return [useForm];\n});\n\n_c = RegisterReminder;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterReminder\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/React-Medi-App/src/Components/RegisterReminder.js"],"names":["React","useState","useForm","yupResolver","Yup","Box","Button","Container","Typography","Autocomplete","TextField","daysOfWeekSuggestions","label","disabled","medicationSuggestions","RegisterReminder","boxSx","mb","width","bgcolor","ml","mr","buttonSx","fontSize","height","errorSx","validationSchema","object","shape","medication","string","required","daysOfWeek","onSubmit","data","console","log","formState","errors","handleSubmit","register","resolver","setOptions","selected","setSelected","onOptionsChange","e","valueArr","length","resetOptions","map","opt","everyDaySelected","find","item","notEveryDaySelected","updatedOptions","params","message","option","event","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n\r\n// Material UI Components\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nconst daysOfWeekSuggestions = [\r\n    { label: \"Every day\", disabled: false },\r\n    { label: \"Sunday\", disabled: false },\r\n    { label: \"Monday\", disabled: false },\r\n    { label: \"Tuesday\", disabled: false },\r\n    { label: \"Wednesday\", disabled: false },\r\n    { label: \"Thursday\", disabled: false },\r\n    { label: \"Friday\", disabled: false },\r\n    { label: \"Saturday\", disabled: false }\r\n];\r\n\r\nconst medicationSuggestions = [\r\n    {label: \"Lisinopril\"},\r\n    {label: \"Valsartan\"}\r\n];\r\n\r\nexport default function RegisterReminder() {\r\n    //Styles and SX\r\n    const boxSx = {\r\n        \"& .MuiTextField-root\": {mb: 2.5, width: \"100%\"},\r\n        bgcolor: \"background.paper\",\r\n        ml: \"50px\",\r\n        mr: \"50px\"\r\n    };\r\n\r\n    const buttonSx = {\r\n        fontSize: \"17px\",\r\n        height: \"5.75ch\",\r\n        width: \"100%\"\r\n    };\r\n\r\n    const errorSx = {\r\n        mb: 2.5\r\n    };\r\n\r\n    // Form validation using Yup\r\n    const validationSchema = Yup.object().shape({\r\n        medication: Yup.string()\r\n            .required(\"Medication is required\"),\r\n        daysOfWeek: Yup.string()\r\n            .required(\"Days of the week are required\")\r\n    });\r\n\r\n    // Form onSubmit\r\n    const onSubmit = (data) => {\r\n        console.log(data);\r\n    };\r\n\r\n    const {\r\n        formState: {errors},\r\n        handleSubmit,\r\n        register\r\n    } = useForm({\r\n        resolver: yupResolver(validationSchema),\r\n    });\r\n\r\n    const [daysOfWeekSuggestions, setOptions] = useState(daysOfWeekSuggestions);\r\n    const [selected, setSelected] = useState([]);\r\n\r\n    const onOptionsChange = (e, valueArr) => {\r\n        setSelected(valueArr);\r\n        if (valueArr.length === 0) {\r\n            const resetOptions = [...daysOfWeekSuggestions].map((opt) => {\r\n                opt.disabled = false;\r\n                return opt;\r\n            });\r\n            setOptions(resetOptions);\r\n        } else {\r\n            const everyDaySelected = valueArr.find(\r\n                (item) => item.label === \"Every day\"\r\n            );\r\n\r\n            const notEveryDaySelected = valueArr.find(\r\n                (item) => item.label !== \"Every day\"\r\n            );\r\n\r\n            if (everyDaySelected) {\r\n                const updatedOptions = [...daysOfWeekSuggestions].map((opt) => {\r\n                    if (opt.label !== \"Every day\") opt.disabled = true;\r\n                    else opt.disabled = false;\r\n                    return opt;\r\n                });\r\n                setOptions(updatedOptions);\r\n            }\r\n\r\n            if(notEveryDaySelected) {\r\n                const updatedOptions = [...daysOfWeekSuggestions].map((opt) => {\r\n                    if (opt.label === \"Every day\") opt.disabled = true;\r\n                    else opt.disabled = false;\r\n                    return opt;\r\n                });\r\n                setOptions(updatedOptions);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <form>\r\n                <Box\r\n                    sx={boxSx}\r\n                >\r\n\r\n                    <Autocomplete\r\n                        disableClearable\r\n                        disablePortal\r\n                        id=\"medication-autocomplete\"\r\n                        options={medicationSuggestions}\r\n                        renderInput={(params) => <TextField\r\n                            required\r\n                            error={errors.medication ? true : false}\r\n                            id=\"medication\"\r\n                            label=\"Medication\"\r\n                            name=\"medication\"\r\n                            type=\"search\"\r\n                            {...params}\r\n                            {...register(\"medication\")}\r\n                        />}\r\n                    />\r\n\r\n                    <Typography color=\"error\" sx={errorSx} variant=\"inherit\">\r\n                        {errors.medication?.message}\r\n                    </Typography>\r\n\r\n                    <Autocomplete\r\n                        disableClearable\r\n                        disablePortal\r\n                        filterSelectedOptions\r\n                        multiple\r\n                        getOptionDisabled={(option) => option.disabled ? true : false}\r\n                        getOptionLabel={(option) => option.label}\r\n                        id=\"days-autocomplete\"\r\n                        onChange={(event, value) => onOptionsChange(event, value)}\r\n                        options={daysOfWeekSuggestions}\r\n                        renderInput={(params) => <TextField\r\n                            required\r\n                            error={errors.daysOfWeek ? true : false}\r\n                            id=\"daysOfWeek\"\r\n                            label=\"Days of the week\"\r\n                            name=\"daysOfWeek\"\r\n                            type=\"search\"\r\n                            {...params}\r\n                            {...register(\"daysOfWeek\")}\r\n                        />}\r\n                        value={value}\r\n                    />\r\n\r\n                    <Typography color=\"error\" sx={errorSx} variant=\"inherit\">\r\n                        {errors.daysOfWeek?.message}\r\n                    </Typography>\r\n\r\n                    <Button onClick={handleSubmit(onSubmit)} size=\"large\" sx={buttonSx} type=\"submit\"\r\n                            variant=\"contained\">Submit</Button>\r\n                </Box>\r\n            </form>\r\n        </Container>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}