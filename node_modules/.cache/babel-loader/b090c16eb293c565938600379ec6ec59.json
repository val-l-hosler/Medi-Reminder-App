{"ast":null,"code":"var _jsxFileName = \"/Users/valeriehosler/Desktop/Github/React-Medi-App/src/Components/DisplayMedications.js\",\n    _s2 = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport * as Yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Container from \"@mui/material/Container\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport TextField from \"@mui/material/TextField\"; // Custom Components\n\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst doseSuggestions = [{\n  label: \"10\"\n}, {\n  label: \"20\"\n}, {\n  label: \"30\"\n}, {\n  label: \"40\"\n}, {\n  label: \"50\"\n}, {\n  label: \"60\"\n}, {\n  label: \"70\"\n}, {\n  label: \"80\"\n}]; // Form validation using Yup\n\nconst validationSchema = Yup.object().shape({\n  dose: Yup.string().required(\"Dose is required\")\n});\nexport default function DisplayMedications() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // Styles\n  const boxSx = {\n    \"& .MuiTextField-root\": {\n      mb: 5,\n      width: \"100%\"\n    },\n    ml: \"50px\",\n    mr: \"50px\"\n  };\n  const buttonSx = {\n    borderRadius: 0,\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"50%\"\n  };\n  const cardSx = {\n    bgcolor: \"#eeeeee\",\n    boxShadow: 3,\n    m: 5,\n    pb: 0,\n    pt: 0\n  };\n  const dialogTitleSx = {\n    m: 0,\n    p: 3\n  };\n  const formButtonSx = {\n    borderRadius: 0,\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    mb: 5,\n    width: \"100%\"\n  };\n  const iconButtonSx = {\n    position: \"absolute\",\n    right: 8,\n    top: 8,\n    color: theme => theme.palette.grey[500]\n  };\n  const typographyMedicationSx = {\n    m: 1.5\n  };\n  const updateDoseTypographySx = {\n    mb: 5,\n    ml: 5,\n    mr: 5\n  }; // This is the array of medication objects that will be displayed on the cards\n\n  const medicationList = localStorage.getItem(\"medications\");\n  const parsed = JSON.parse(medicationList); // This forces the component to re-render after a medication has been deleted\n\n  const [, updateState] = useState();\n  const forceUpdate = useCallback(() => updateState({}), []); // This is the Medication component that is displayed including a card, medication info, buttons, and dialogs\n\n  const Medication = _ref => {\n    _s();\n\n    let {\n      medication\n    } = _ref;\n    const {\n      handleSubmit,\n      control,\n      formState\n    } = useForm({\n      mode: \"onChange\",\n      resolver: yupResolver(validationSchema)\n    }); // I added these because without it, all the autofill elements were showing up as selected\n\n    const [doseValue, setDoseValue] = useState(null); // This handles the update dose dialog\n\n    const [openUpdate, setOpenUpdate] = useState(false);\n\n    const handleClickOpenUpdate = () => {\n      setOpenUpdate(true);\n    };\n\n    const handleCloseUpdate = () => {\n      setOpenUpdate(false);\n    }; // Function for the update dose button\n\n\n    function updateDose(medicationId, parsedMedications, data) {\n      let med;\n\n      for (let i = 0; i < parsedMedications.length; i++) {\n        if (parsedMedications[i].id === medicationId) {\n          med = parsedMedications[i];\n        }\n      }\n\n      med.dose = data.dose;\n      localStorage.setItem(\"medications\", JSON.stringify(parsedMedications)); // This forces the dialog to close\n\n      setOpenUpdate(false);\n    } // This handles the delete medication confirmation dialog\n\n\n    const [openDelete, setOpenDelete] = useState(false);\n\n    const handleClickOpenDelete = () => {\n      setOpenDelete(true);\n    };\n\n    const handleCloseDelete = () => {\n      setOpenDelete(false);\n    }; // Function for the delete med button\n\n\n    function deleteMedication(medicationId, parsedMedications) {\n      let index;\n\n      for (let i = 0; i < parsedMedications.length; i++) {\n        if (parsedMedications[i].id === medicationId) {\n          index = i;\n        }\n      }\n\n      if (parsedMedications.length > 1) {\n        // This removes the appropriate index of the array of medication objects\n        parsedMedications.splice(index, 1);\n      } else {\n        parsedMedications = [];\n      }\n\n      localStorage.setItem(\"medications\", JSON.stringify(parsedMedications)); // This forces the dialog to close\n\n      setOpenDelete(false); // This forces the medication list to re-render\n\n      forceUpdate();\n    } // This is what is rendered for the Medication component\n\n\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        sx: cardSx,\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyMedicationSx,\n            variant: \"h5\",\n            children: [\"Medication: \", medication.medication]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyMedicationSx,\n            variant: \"h5\",\n            children: [\"Dose: \", medication.dose, \" mg\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClickOpenUpdate,\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"Edit Dose\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClickOpenDelete,\n            color: \"error\",\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"Delete Med \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openDelete,\n        onClose: handleCloseDelete,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            m: 5\n          },\n          children: [\" Do you want to delete \", medication.dose, \" mg of \", medication.medication, \"? \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => deleteMedication(medication.id, parsed),\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleCloseDelete,\n            color: \"error\",\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openUpdate,\n        onClose: handleCloseUpdate,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          sx: dialogTitleSx,\n          children: handleCloseUpdate ? /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"close\",\n            onClick: handleCloseUpdate,\n            sx: iconButtonSx,\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(data => updateDose(medication.id, parsed, data)),\n          noValidate: true,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: updateDoseTypographySx,\n            variant: \"h4\",\n            children: \"Update dose\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: boxSx,\n            children: [/*#__PURE__*/_jsxDEV(Controller, {\n              name: \"dose\",\n              control: control,\n              render: _ref2 => {\n                let {\n                  field: {\n                    ref,\n                    ...field\n                  },\n                  fieldState: {\n                    error\n                  }\n                } = _ref2;\n                return /*#__PURE__*/_jsxDEV(Autocomplete, { ...field,\n                  autoHighlight: true,\n                  disableClearable: true,\n                  isOptionEqualToValue: (option, value) => value.label === option.label,\n                  id: \"dose-autocomplete\",\n                  onChange: (event, value) => {\n                    field.onChange(value.label);\n                    setDoseValue(value);\n                  },\n                  options: doseSuggestions,\n                  value: doseValue,\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                    required: true,\n                    error: !!error,\n                    helperText: error === null || error === void 0 ? void 0 : error.message,\n                    id: \"dose\",\n                    label: \"Dose\",\n                    name: \"dose\",\n                    type: \"numeric\",\n                    inputRef: ref,\n                    ...params\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 37\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              disabled: !formState.isValid,\n              size: \"large\",\n              sx: formButtonSx,\n              type: \"submit\",\n              variant: \"contained\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this);\n  }; // End Medication component\n\n\n  _s(Medication, \"pOubRl9C8PY9IWWCjGoO7QDeiFs=\", false, function () {\n    return [useForm];\n  });\n\n  let medications; // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\n\n  if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\n    medications = parsed.map((medication, index) => {\n      return /*#__PURE__*/_jsxDEV(Medication, {\n        medication: medication\n      }, \"medication\" + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 21\n      }, this);\n    });\n  } else {\n    medications = /*#__PURE__*/_jsxDEV(NoRegisteredMedications, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 23\n    }, this);\n  } // This is the actual final block of code that is rendered for this component\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: medications\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(DisplayMedications, \"X5rEjsBNP/fh1FQA6Gy+z8f0U8w=\");\n\n_c = DisplayMedications;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayMedications\");","map":{"version":3,"sources":["/Users/valeriehosler/Desktop/Github/React-Medi-App/src/Components/DisplayMedications.js"],"names":["useState","useCallback","Controller","useForm","Yup","yupResolver","Box","Button","Card","CardContent","CloseIcon","Container","IconButton","Typography","Autocomplete","Dialog","DialogTitle","TextField","NoRegisteredMedications","doseSuggestions","label","validationSchema","object","shape","dose","string","required","DisplayMedications","boxSx","mb","width","ml","mr","buttonSx","borderRadius","fontSize","height","cardSx","bgcolor","boxShadow","m","pb","pt","dialogTitleSx","p","formButtonSx","iconButtonSx","position","right","top","color","theme","palette","grey","typographyMedicationSx","updateDoseTypographySx","medicationList","localStorage","getItem","parsed","JSON","parse","updateState","forceUpdate","Medication","medication","handleSubmit","control","formState","mode","resolver","doseValue","setDoseValue","openUpdate","setOpenUpdate","handleClickOpenUpdate","handleCloseUpdate","updateDose","medicationId","parsedMedications","data","med","i","length","id","setItem","stringify","openDelete","setOpenDelete","handleClickOpenDelete","handleCloseDelete","deleteMedication","index","splice","field","ref","fieldState","error","option","value","event","onChange","params","message","isValid","medications","map","flexDirection"],"mappings":"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","sourcesContent":["import {useState, useCallback} from \"react\";\nimport {Controller, useForm} from \"react-hook-form\";\nimport * as Yup from \"yup\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\n\n// Material UI Components\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Container from \"@mui/material/Container\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport TextField from \"@mui/material/TextField\";\n\n// Custom Components\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\n\nconst doseSuggestions = [\n    {label: \"10\"},\n    {label: \"20\"},\n    {label: \"30\"},\n    {label: \"40\"},\n    {label: \"50\"},\n    {label: \"60\"},\n    {label: \"70\"},\n    {label: \"80\"}\n];\n\n// Form validation using Yup\nconst validationSchema = Yup.object().shape({\n    dose: Yup.string()\n        .required(\"Dose is required\")\n});\n\nexport default function DisplayMedications() {\n    // Styles\n    const boxSx = {\n        \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\n        ml: \"50px\",\n        mr: \"50px\"\n    };\n\n    const buttonSx = {\n        borderRadius: 0,\n        fontSize: \"17px\",\n        height: \"5.75ch\",\n        width: \"50%\"\n    };\n\n    const cardSx = {\n        bgcolor: \"#eeeeee\",\n        boxShadow: 3,\n        m: 5,\n        pb: 0,\n        pt: 0\n    };\n\n    const dialogTitleSx = {\n        m: 0,\n        p: 3\n    };\n\n    const formButtonSx = {\n        borderRadius: 0,\n        fontSize: \"17px\",\n        height: \"5.75ch\",\n        mb: 5,\n        width: \"100%\"\n    };\n\n    const iconButtonSx = {\n        position: \"absolute\",\n        right: 8,\n        top: 8,\n        color: (theme) => theme.palette.grey[500],\n    };\n\n    const typographyMedicationSx = {\n        m: 1.5\n    };\n\n    const updateDoseTypographySx = {\n        mb: 5,\n        ml: 5,\n        mr: 5\n    };\n\n    // This is the array of medication objects that will be displayed on the cards\n    const medicationList = localStorage.getItem(\"medications\");\n    const parsed = JSON.parse(medicationList);\n\n    // This forces the component to re-render after a medication has been deleted\n    const [, updateState] = useState();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    // This is the Medication component that is displayed including a card, medication info, buttons, and dialogs\n    const Medication = ({medication}) => {\n        const {handleSubmit, control, formState} = useForm({\n            mode: \"onChange\",\n            resolver: yupResolver(validationSchema)\n        });\n\n        // I added these because without it, all the autofill elements were showing up as selected\n        const [doseValue, setDoseValue] = useState(null);\n\n        // This handles the update dose dialog\n        const [openUpdate, setOpenUpdate] = useState(false);\n        const handleClickOpenUpdate = () => {\n            setOpenUpdate(true);\n        };\n        const handleCloseUpdate = () => {\n            setOpenUpdate(false);\n        };\n\n        // Function for the update dose button\n        function updateDose(medicationId, parsedMedications, data) {\n            let med;\n\n            for (let i = 0; i < parsedMedications.length; i++) {\n                if (parsedMedications[i].id === medicationId) {\n                    med = parsedMedications[i];\n                }\n            }\n\n            med.dose = data.dose;\n            localStorage.setItem(\"medications\", JSON.stringify(parsedMedications));\n\n            // This forces the dialog to close\n            setOpenUpdate(false);\n        }\n\n        // This handles the delete medication confirmation dialog\n        const [openDelete, setOpenDelete] = useState(false);\n        const handleClickOpenDelete = () => {\n            setOpenDelete(true);\n        };\n        const handleCloseDelete = () => {\n            setOpenDelete(false);\n        };\n\n        // Function for the delete med button\n        function deleteMedication(medicationId, parsedMedications) {\n            let index;\n\n            for (let i = 0; i < parsedMedications.length; i++) {\n                if (parsedMedications[i].id === medicationId) {\n                    index = i;\n                }\n            }\n\n            if (parsedMedications.length > 1) {\n                // This removes the appropriate index of the array of medication objects\n                parsedMedications.splice(index, 1);\n            } else {\n                parsedMedications = [];\n            }\n\n            localStorage.setItem(\"medications\", JSON.stringify(parsedMedications));\n\n            // This forces the dialog to close\n            setOpenDelete(false);\n\n            // This forces the medication list to re-render\n            forceUpdate();\n        }\n\n        // This is what is rendered for the Medication component\n        return (\n            <Box>\n                <Card sx={cardSx}>\n                    <CardContent>\n                        <Typography sx={typographyMedicationSx} variant=\"h5\">\n                            Medication: {medication.medication}\n                        </Typography>\n                        <Typography sx={typographyMedicationSx} variant=\"h5\">\n                            Dose: {medication.dose} mg\n                        </Typography>\n                    </CardContent>\n                    <Box>\n                        <Button onClick={handleClickOpenUpdate} size=\"large\"\n                                sx={buttonSx}\n                                variant=\"contained\">Edit\n                            Dose</Button>\n                        <Button onClick={handleClickOpenDelete} color=\"error\"\n                                size=\"large\"\n                                sx={buttonSx} variant=\"contained\">Delete\n                            Med </Button>\n                    </Box>\n                </Card>\n\n                {/* Delete medication confirmation dialog */}\n                <Dialog\n                    keepMounted={true}\n                    open={openDelete}\n                    onClose={handleCloseDelete}\n                >\n                    <Typography variant=\"h5\" sx={{m: 5}}> Do you want to delete {medication.dose} mg\n                        of {medication.medication}? </Typography>\n\n                    <Box>\n                        <Button onClick={() => deleteMedication(medication.id, parsed)}\n                                size=\"large\"\n                                sx={buttonSx} variant=\"contained\">Yes</Button>\n                        <Button onClick={handleCloseDelete} color=\"error\"\n                                size=\"large\"\n                                sx={buttonSx} variant=\"contained\">No</Button>\n                    </Box>\n                </Dialog>\n\n                {/* Update dose dialog */}\n                <Dialog\n                    keepMounted={true}\n                    open={openUpdate}\n                    onClose={handleCloseUpdate}\n                >\n                    <DialogTitle sx={dialogTitleSx}>\n                        {handleCloseUpdate ? (\n                            <IconButton\n                                aria-label=\"close\"\n                                onClick={handleCloseUpdate}\n                                sx={iconButtonSx}\n                            >\n                                <CloseIcon/>\n                            </IconButton>\n                        ) : null}\n                    </DialogTitle>\n\n                    <form onSubmit={handleSubmit((data) => updateDose(medication.id, parsed, data))} noValidate>\n                        <Typography sx={updateDoseTypographySx} variant=\"h4\">\n                            Update dose\n                        </Typography>\n\n                        <Box\n                            sx={boxSx}\n                        >\n                            <Controller\n                                name=\"dose\"\n                                control={control}\n                                render={({field: {ref, ...field}, fieldState: {error}}) => (\n                                    <Autocomplete\n                                        {...field}\n                                        autoHighlight\n                                        disableClearable\n                                        isOptionEqualToValue={(option, value) => value.label === option.label}\n                                        id=\"dose-autocomplete\"\n                                        onChange={(event, value) => {\n                                            field.onChange(value.label);\n                                            setDoseValue(value);\n                                        }}\n                                        options={doseSuggestions}\n                                        value={doseValue}\n                                        renderInput={(params) => (\n                                            <TextField\n                                                required\n                                                error={!!error}\n                                                helperText={error?.message}\n                                                id=\"dose\"\n                                                label=\"Dose\"\n                                                name=\"dose\"\n                                                type=\"numeric\"\n                                                inputRef={ref}\n                                                {...params}\n                                            />\n                                        )}\n                                    />\n                                )}\n                            />\n\n                            <Button disabled={!formState.isValid} size=\"large\"\n                                    sx={formButtonSx} type=\"submit\"\n                                    variant=\"contained\">Submit</Button>\n                        </Box>\n                    </form>\n                </Dialog>\n            </Box>\n        )\n    }; // End Medication component\n\n    let medications;\n\n    // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\n    if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\n        medications = parsed.map((medication, index) => {\n            return (<Medication medication={medication} key={\"medication\" + index}/>)\n        });\n    } else {\n        medications = <NoRegisteredMedications/>;\n    }\n\n    // This is the actual final block of code that is rendered for this component\n    return (\n        <Container>\n            <Box style={{flexDirection: \"column\"}}>\n                {medications}\n            </Box>\n        </Container>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}