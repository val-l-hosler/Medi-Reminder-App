{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\Medi-Reminder-App\\\\src\\\\Components\\\\Add Reminder\\\\AddReminder1.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\"; // Material UI Components\n\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport Box from \"@mui/material/Box\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\"; // Custom Components\n\nimport DoseInput from \"../Inputs/DoseInput.js\";\nimport MedicationInput from \"../Inputs/MedicationInput.js\";\nimport NoRegisteredMedications from \"../Registered Medications/NoRegisteredMedications\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object().shape({\n  medication: Yup.string().required(\"Medication is required\"),\n  dose: Yup.string().required(\"Dose is required\")\n}); // Styles\n\nconst boxSx = {\n  \"& .MuiTextField-root\": {\n    mb: 5,\n    width: \"100%\"\n  },\n  alignItems: \"center\",\n  display: \"flex\",\n  flexDirection: \"column\"\n};\nconst containerSx = {\n  mb: 5,\n  mt: 5,\n  pl: 5,\n  pr: 5,\n  width: \"100%\"\n};\nconst iconButtonSx = {\n  fontSize: 75\n};\nconst stackSx = {\n  mb: 5\n};\nconst typographySx = {\n  mb: 5,\n  textAlign: \"center\"\n}; // Components -> this could be its own component\n\nconst breadcrumbs = [/*#__PURE__*/_jsxDEV(Typography, {\n  color: \"text.primary\",\n  children: \"Name & Dose\"\n}, \"1\", false, {\n  fileName: _jsxFileName,\n  lineNumber: 59,\n  columnNumber: 5\n}, this)];\n\nconst setSuggestions = () => {\n  // This is the array of medication objects that will be displayed on the cards\n  const medicationList = localStorage.getItem(\"medications\");\n  const parsed = JSON.parse(medicationList);\n\n  if (parsed !== null && parsed.length > 0) {\n    const meds = {};\n    const doses = {};\n    parsed.forEach((medication, index) => {\n      meds[medication.medication] = index;\n      doses[medication.dose] = index;\n    }); // {label: med}[]\n\n    const medSuggestions = Object.keys(meds).map(med => {\n      return {\n        label: med\n      };\n    }); // {label: dose}[]\n\n    const doseSuggestions = Object.keys(doses).map(dose => {\n      return {\n        label: dose\n      };\n    });\n    return [medSuggestions, doseSuggestions];\n  }\n\n  return [];\n};\n\nexport default function AddReminder1() {\n  _s();\n\n  const {\n    handleSubmit,\n    control,\n    formState\n  } = useForm({\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema)\n  });\n\n  const onSubmit = data => {\n    // This saves the reminder into a local session storage for the purposes of displaying the reminders on another page.\n    // If I were going to create a deployed version of the app, I would create a DB and save the data there.\n    // I also set this condition --> localStorage.getItem(\"reminders\").length < 2 --> because if the array is empty, the length === 2\n    if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\n      localStorage.setItem(\"reminders\", JSON.stringify([{\n        id: 0,\n        medication: data.medication,\n        dose: data.dose,\n        days: [],\n        timesPerDay: 0,\n        time: [],\n        submitted: false\n      }]));\n    } else {\n      const reminderList = localStorage.getItem(\"reminders\");\n      const parsed = JSON.parse(reminderList);\n      const lastReminder = parsed[parsed.length - 1];\n\n      if (lastReminder.submitted === true) {\n        const newId = lastReminder.id + 1;\n        parsed.push({\n          id: newId,\n          medication: data.medication,\n          dose: data.dose,\n          days: [],\n          timesPerDay: 0,\n          time: [],\n          submitted: false\n        });\n        localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n      }\n    }\n\n    fetch(\"/add-reminder/days\").then(() => {\n      window.location = \"/add-reminder/days\";\n    });\n  }; // If there are any registered medications\n\n\n  if (setSuggestions().length > 1) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      sx: containerSx,\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        sx: stackSx,\n        children: /*#__PURE__*/_jsxDEV(Breadcrumbs, {\n          separator: /*#__PURE__*/_jsxDEV(NavigateNextIcon, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 36\n          }, this),\n          \"aria-label\": \"breadcrumb\",\n          children: breadcrumbs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        noValidate: true,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: typographySx,\n          variant: \"h4\",\n          children: \"What medication do you want to make a reminder for?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: boxSx,\n          children: [/*#__PURE__*/_jsxDEV(MedicationInput, {\n            control: control,\n            suggestions: setSuggestions()[0],\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DoseInput, {\n            control: control,\n            suggestions: setSuggestions()[1],\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              disabled: !formState.isValid,\n              type: \"submit\",\n              children: /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n                sx: iconButtonSx\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 51\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      sx: containerSx,\n      children: /*#__PURE__*/_jsxDEV(NoRegisteredMedications, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(AddReminder1, \"qw4uJ56/71qY3KYVVBgBKHcMt38=\", false, function () {\n  return [useForm];\n});\n\n_c = AddReminder1;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddReminder1\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/Medi-Reminder-App/src/Components/Add Reminder/AddReminder1.js"],"names":["React","useForm","yupResolver","Yup","ArrowForwardIcon","Box","Breadcrumbs","Button","Container","NavigateNextIcon","Stack","Typography","DoseInput","MedicationInput","NoRegisteredMedications","validationSchema","object","shape","medication","string","required","dose","boxSx","mb","width","alignItems","display","flexDirection","containerSx","mt","pl","pr","iconButtonSx","fontSize","stackSx","typographySx","textAlign","breadcrumbs","setSuggestions","medicationList","localStorage","getItem","parsed","JSON","parse","length","meds","doses","forEach","index","medSuggestions","Object","keys","map","med","label","doseSuggestions","AddReminder1","handleSubmit","control","formState","mode","resolver","onSubmit","data","setItem","stringify","id","days","timesPerDay","time","submitted","reminderList","lastReminder","newId","push","fetch","then","window","location","isValid"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,SAAQC,WAAR,QAA0B,yBAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB,C,CAEA;;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,UAAP,MAAuB,0BAAvB,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,uBAAP,MAAoC,mDAApC;;AAEA,MAAMC,gBAAgB,GAAGZ,GAAG,CAACa,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,EAAAA,UAAU,EAAEf,GAAG,CAACgB,MAAJ,GACPC,QADO,CACE,wBADF,CAD4B;AAGxCC,EAAAA,IAAI,EAAElB,GAAG,CAACgB,MAAJ,GACDC,QADC,CACQ,kBADR;AAHkC,CAAnB,CAAzB,C,CAOA;;AACA,MAAME,KAAK,GAAG;AACV,0BAAwB;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,KAAK,EAAE;AAAf,GADd;AAEVC,EAAAA,UAAU,EAAE,QAFF;AAGVC,EAAAA,OAAO,EAAE,MAHC;AAIVC,EAAAA,aAAa,EAAE;AAJL,CAAd;AAOA,MAAMC,WAAW,GAAG;AAChBL,EAAAA,EAAE,EAAE,CADY;AAEhBM,EAAAA,EAAE,EAAE,CAFY;AAGhBC,EAAAA,EAAE,EAAE,CAHY;AAIhBC,EAAAA,EAAE,EAAE,CAJY;AAKhBP,EAAAA,KAAK,EAAE;AALS,CAApB;AAQA,MAAMQ,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE;AADO,CAArB;AAIA,MAAMC,OAAO,GAAG;AACZX,EAAAA,EAAE,EAAE;AADQ,CAAhB;AAIA,MAAMY,YAAY,GAAG;AACjBZ,EAAAA,EAAE,EAAE,CADa;AAEjBa,EAAAA,SAAS,EAAE;AAFM,CAArB,C,CAKA;;AACA,MAAMC,WAAW,GAAG,cAChB,QAAC,UAAD;AAAoB,EAAA,KAAK,EAAC,cAA1B;AAAA;AAAA,GAAgB,GAAhB;AAAA;AAAA;AAAA;AAAA,QADgB,CAApB;;AAMA,MAAMC,cAAc,GAAG,MAAM;AACzB;AACA,QAAMC,cAAc,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAvB;AACA,QAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWL,cAAX,CAAf;;AAEA,MAAIG,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACG,MAAP,GAAgB,CAAvC,EAA0C;AACtC,UAAMC,IAAI,GAAG,EAAb;AACA,UAAMC,KAAK,GAAG,EAAd;AAEAL,IAAAA,MAAM,CAACM,OAAP,CAAe,CAAC9B,UAAD,EAAa+B,KAAb,KAAuB;AAClCH,MAAAA,IAAI,CAAC5B,UAAU,CAACA,UAAZ,CAAJ,GAA8B+B,KAA9B;AACAF,MAAAA,KAAK,CAAC7B,UAAU,CAACG,IAAZ,CAAL,GAAyB4B,KAAzB;AACH,KAHD,EAJsC,CAStC;;AACA,UAAMC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYN,IAAZ,EAAkBO,GAAlB,CAAuBC,GAAD,IAAS;AAClD,aAAO;AAACC,QAAAA,KAAK,EAAED;AAAR,OAAP;AACH,KAFsB,CAAvB,CAVsC,CActC;;AACA,UAAME,eAAe,GAAGL,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBM,GAAnB,CAAwBhC,IAAD,IAAU;AACrD,aAAO;AAACkC,QAAAA,KAAK,EAAElC;AAAR,OAAP;AACH,KAFuB,CAAxB;AAIA,WAAO,CAAC6B,cAAD,EAAiBM,eAAjB,CAAP;AACH;;AAED,SAAO,EAAP;AACH,CA5BD;;AA8BA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACnC,QAAM;AAACC,IAAAA,YAAD;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA;AAAxB,MAAqC3D,OAAO,CAAC;AAC/C4D,IAAAA,IAAI,EAAE,UADyC;AAE/CC,IAAAA,QAAQ,EAAE5D,WAAW,CAACa,gBAAD;AAF0B,GAAD,CAAlD;;AAKA,QAAMgD,QAAQ,GAAIC,IAAD,IAAU;AACvB;AACA;AACA;AACA,QAAIxB,YAAY,CAACC,OAAb,CAAqB,WAArB,MAAsC,IAAtC,IAA8CD,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCI,MAAlC,GAA2C,CAA7F,EAAgG;AAC5FL,MAAAA,YAAY,CAACyB,OAAb,CAAqB,WAArB,EAAkCtB,IAAI,CAACuB,SAAL,CAAe,CAAC;AAC9CC,QAAAA,EAAE,EAAE,CAD0C;AAE9CjD,QAAAA,UAAU,EAAE8C,IAAI,CAAC9C,UAF6B;AAG9CG,QAAAA,IAAI,EAAE2C,IAAI,CAAC3C,IAHmC;AAI9C+C,QAAAA,IAAI,EAAE,EAJwC;AAK9CC,QAAAA,WAAW,EAAE,CALiC;AAM9CC,QAAAA,IAAI,EAAE,EANwC;AAO9CC,QAAAA,SAAS,EAAE;AAPmC,OAAD,CAAf,CAAlC;AASH,KAVD,MAUO;AACH,YAAMC,YAAY,GAAGhC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAArB;AACA,YAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAW4B,YAAX,CAAf;AACA,YAAMC,YAAY,GAAG/B,MAAM,CAACA,MAAM,CAACG,MAAP,GAAgB,CAAjB,CAA3B;;AAEA,UAAI4B,YAAY,CAACF,SAAb,KAA2B,IAA/B,EAAqC;AACjC,cAAMG,KAAK,GAAGD,YAAY,CAACN,EAAb,GAAkB,CAAhC;AAEAzB,QAAAA,MAAM,CAACiC,IAAP,CAAY;AACRR,UAAAA,EAAE,EAAEO,KADI;AAERxD,UAAAA,UAAU,EAAE8C,IAAI,CAAC9C,UAFT;AAGRG,UAAAA,IAAI,EAAE2C,IAAI,CAAC3C,IAHH;AAIR+C,UAAAA,IAAI,EAAE,EAJE;AAKRC,UAAAA,WAAW,EAAE,CALL;AAMRC,UAAAA,IAAI,EAAE,EANE;AAORC,UAAAA,SAAS,EAAE;AAPH,SAAZ;AAUA/B,QAAAA,YAAY,CAACyB,OAAb,CAAqB,WAArB,EAAkCtB,IAAI,CAACuB,SAAL,CAAexB,MAAf,CAAlC;AACH;AACJ;;AAEDkC,IAAAA,KAAK,CAAC,oBAAD,CAAL,CACKC,IADL,CACU,MAAM;AACRC,MAAAA,MAAM,CAACC,QAAP,GAAkB,oBAAlB;AACH,KAHL;AAIH,GAxCD,CANmC,CAgDnC;;;AACA,MAAIzC,cAAc,GAAGO,MAAjB,GAA0B,CAA9B,EAAiC;AAC7B,wBACI,QAAC,SAAD;AAAW,MAAA,EAAE,EAAEjB,WAAf;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAE,CAAhB;AAAmB,QAAA,EAAE,EAAEM,OAAvB;AAAA,+BACI,QAAC,WAAD;AACI,UAAA,SAAS,eAAE,QAAC,gBAAD;AAAkB,YAAA,QAAQ,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,kBADf;AAEI,wBAAW,YAFf;AAAA,oBAIKG;AAJL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAUI;AAAM,QAAA,QAAQ,EAAEqB,YAAY,CAACK,QAAD,CAA5B;AAAwC,QAAA,UAAU,MAAlD;AAAA,gCACI,QAAC,UAAD;AAAY,UAAA,EAAE,EAAE5B,YAAhB;AAA8B,UAAA,OAAO,EAAC,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI,QAAC,GAAD;AACI,UAAA,EAAE,EAAEb,KADR;AAAA,kCAGI,QAAC,eAAD;AAAiB,YAAA,OAAO,EAAEqC,OAA1B;AAAmC,YAAA,WAAW,EAAErB,cAAc,GAAG,CAAH,CAA9D;AAAqE,YAAA,OAAO,EAAE;AAA9E;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAKI,QAAC,SAAD;AAAW,YAAA,OAAO,EAAEqB,OAApB;AAA6B,YAAA,WAAW,EAAErB,cAAc,GAAG,CAAH,CAAxD;AAA+D,YAAA,OAAO,EAAE;AAAxE;AAAA;AAAA;AAAA;AAAA,kBALJ,eAOI,QAAC,GAAD;AAAA,mCACI,QAAC,MAAD;AAAQ,cAAA,QAAQ,EAAE,CAACsB,SAAS,CAACoB,OAA7B;AACQ,cAAA,IAAI,EAAC,QADb;AAAA,qCACsB,QAAC,gBAAD;AAAkB,gBAAA,EAAE,EAAEhD;AAAtB;AAAA;AAAA;AAAA;AAAA;AADtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA+BH,GAhCD,MAgCO;AACH,wBACI,QAAC,SAAD;AAAW,MAAA,EAAE,EAAEJ,WAAf;AAAA,6BACI,QAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;AACJ;;GAxFuB6B,Y;UACuBxD,O;;;KADvBwD,Y","sourcesContent":["import * as React from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n\r\n// Material UI Components\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Container from \"@mui/material/Container\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\n// Custom Components\r\nimport DoseInput from \"../Inputs/DoseInput.js\";\r\nimport MedicationInput from \"../Inputs/MedicationInput.js\";\r\nimport NoRegisteredMedications from \"../Registered Medications/NoRegisteredMedications\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    medication: Yup.string()\r\n        .required(\"Medication is required\"),\r\n    dose: Yup.string()\r\n        .required(\"Dose is required\")\r\n});\r\n\r\n// Styles\r\nconst boxSx = {\r\n    \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n};\r\n\r\nconst containerSx = {\r\n    mb: 5,\r\n    mt: 5,\r\n    pl: 5,\r\n    pr: 5,\r\n    width: \"100%\"\r\n};\r\n\r\nconst iconButtonSx = {\r\n    fontSize: 75\r\n};\r\n\r\nconst stackSx = {\r\n    mb: 5\r\n};\r\n\r\nconst typographySx = {\r\n    mb: 5,\r\n    textAlign: \"center\"\r\n};\r\n\r\n// Components -> this could be its own component\r\nconst breadcrumbs = [\r\n    <Typography key=\"1\" color=\"text.primary\">\r\n        Name & Dose\r\n    </Typography>\r\n];\r\n\r\nconst setSuggestions = () => {\r\n    // This is the array of medication objects that will be displayed on the cards\r\n    const medicationList = localStorage.getItem(\"medications\");\r\n    const parsed = JSON.parse(medicationList);\r\n\r\n    if (parsed !== null && parsed.length > 0) {\r\n        const meds = {};\r\n        const doses = {};\r\n\r\n        parsed.forEach((medication, index) => {\r\n            meds[medication.medication] = index;\r\n            doses[medication.dose] = index;\r\n        });\r\n\r\n        // {label: med}[]\r\n        const medSuggestions = Object.keys(meds).map((med) => {\r\n            return {label: med};\r\n        });\r\n\r\n        // {label: dose}[]\r\n        const doseSuggestions = Object.keys(doses).map((dose) => {\r\n            return {label: dose};\r\n        });\r\n\r\n        return [medSuggestions, doseSuggestions];\r\n    }\r\n\r\n    return [];\r\n};\r\n\r\nexport default function AddReminder1() {\r\n    const {handleSubmit, control, formState} = useForm({\r\n        mode: \"onChange\",\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n\r\n    const onSubmit = (data) => {\r\n        // This saves the reminder into a local session storage for the purposes of displaying the reminders on another page.\r\n        // If I were going to create a deployed version of the app, I would create a DB and save the data there.\r\n        // I also set this condition --> localStorage.getItem(\"reminders\").length < 2 --> because if the array is empty, the length === 2\r\n        if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\r\n            localStorage.setItem(\"reminders\", JSON.stringify([{\r\n                id: 0,\r\n                medication: data.medication,\r\n                dose: data.dose,\r\n                days: [],\r\n                timesPerDay: 0,\r\n                time: [],\r\n                submitted: false\r\n            }]));\r\n        } else {\r\n            const reminderList = localStorage.getItem(\"reminders\");\r\n            const parsed = JSON.parse(reminderList);\r\n            const lastReminder = parsed[parsed.length - 1];\r\n\r\n            if (lastReminder.submitted === true) {\r\n                const newId = lastReminder.id + 1;\r\n\r\n                parsed.push({\r\n                    id: newId,\r\n                    medication: data.medication,\r\n                    dose: data.dose,\r\n                    days: [],\r\n                    timesPerDay: 0,\r\n                    time: [],\r\n                    submitted: false\r\n                });\r\n\r\n                localStorage.setItem(\"reminders\", JSON.stringify(parsed));\r\n            }\r\n        }\r\n\r\n        fetch(\"/add-reminder/days\")\r\n            .then(() => {\r\n                window.location = \"/add-reminder/days\";\r\n            });\r\n    };\r\n\r\n    // If there are any registered medications\r\n    if (setSuggestions().length > 1) {\r\n        return (\r\n            <Container sx={containerSx}>\r\n                <Stack spacing={2} sx={stackSx}>\r\n                    <Breadcrumbs\r\n                        separator={<NavigateNextIcon fontSize=\"small\"/>}\r\n                        aria-label=\"breadcrumb\"\r\n                    >\r\n                        {breadcrumbs}\r\n                    </Breadcrumbs>\r\n                </Stack>\r\n\r\n                <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                    <Typography sx={typographySx} variant=\"h4\">\r\n                        What medication do you want to make a reminder for?\r\n                    </Typography>\r\n\r\n                    <Box\r\n                        sx={boxSx}\r\n                    >\r\n                        <MedicationInput control={control} suggestions={setSuggestions()[0]} variant={\"outlined\"}/>\r\n\r\n                        <DoseInput control={control} suggestions={setSuggestions()[1]} variant={\"outlined\"}/>\r\n\r\n                        <Box>\r\n                            <Button disabled={!formState.isValid}\r\n                                    type=\"submit\"><ArrowForwardIcon sx={iconButtonSx}/></Button>\r\n                        </Box>\r\n                    </Box>\r\n                </form>\r\n            </Container>\r\n        );\r\n    } else {\r\n        return (\r\n            <Container sx={containerSx}>\r\n                <NoRegisteredMedications/>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}