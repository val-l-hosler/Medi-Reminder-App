{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\Medi-Reminder-App\\\\src\\\\Components\\\\Registered Medications\\\\DisplayMedications.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\"; // Custom Components\n\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\nimport Medication from \"./Medication\"; // Styles\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerSx = {\n  pl: 5,\n  pr: 5,\n  width: \"100%\"\n};\nexport default function DisplayMedications() {\n  _s();\n\n  // This is the array of medication objects that will be displayed on the cards\n  const medicationList = localStorage.getItem(\"medications\");\n  const parsedList = JSON.parse(medicationList);\n  const [medicationComps, setMedicationComps] = useState( /*#__PURE__*/_jsxDEV(NoRegisteredMedications, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 60\n  }, this));\n  const [newComps, setNewComps] = useState( /*#__PURE__*/_jsxDEV(NoRegisteredMedications, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 46\n  }, this));\n  const [update, setUpdate] = useState(false);\n  console.log(\"in here\");\n  console.log(parsedList, \"before effect\");\n  useEffect(() => {\n    setNewComps(medicationComps);\n  }, [medicationComps]);\n  useEffect(() => {\n    console.log(\"in effect\");\n\n    if (parsedList && parsedList.length > 0) {\n      const stringified = [];\n      const comparedComponents = [];\n      const dupeIndexes = []; // This makes it so the objs can be more easily compared\n\n      console.log(parsedList, \"in if\");\n\n      for (const obj of parsedList) {\n        stringified.push(JSON.stringify([obj.medication, obj.dose]));\n      } // This checks for duplicates\n      // The arr is a stringified [med, dose]\n\n\n      stringified.forEach((arr, index) => {\n        if (!comparedComponents.includes(arr)) {\n          comparedComponents.push(arr);\n        } else {\n          dupeIndexes.push(index);\n        }\n      });\n      const updatedList = [...parsedList];\n\n      for (let i = 0; i < updatedList.length; i++) {\n        for (const element of dupeIndexes) {\n          if (i === element) {\n            updatedList[i] = \"dupe\";\n            break;\n          }\n        }\n      }\n\n      const finalComponents = updatedList.filter(index => index !== \"dupe\");\n      console.log(finalComponents, \"before setting local storage\");\n      localStorage.setItem(\"medications\", JSON.stringify(finalComponents));\n\n      if (finalComponents.length > 0) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        setMedicationComps(finalComponents.map(medication => {\n          return /*#__PURE__*/_jsxDEV(Medication, {\n            medication: medication,\n            parsedList: parsedList,\n            update: update,\n            setUpdate: setUpdate\n          }, \"Medication_\" + medication.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this);\n        }));\n      } else {\n        setMedicationComps( /*#__PURE__*/_jsxDEV(NoRegisteredMedications, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 36\n        }, this));\n      }\n    }\n  }, [update]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: containerSx,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: newComps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DisplayMedications, \"DA2rfeFFqdn+dEpEwl2Zt8Uv1oA=\");\n\n_c = DisplayMedications;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayMedications\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/Medi-Reminder-App/src/Components/Registered Medications/DisplayMedications.js"],"names":["useEffect","useState","Box","Container","NoRegisteredMedications","Medication","containerSx","pl","pr","width","DisplayMedications","medicationList","localStorage","getItem","parsedList","JSON","parse","medicationComps","setMedicationComps","newComps","setNewComps","update","setUpdate","console","log","length","stringified","comparedComponents","dupeIndexes","obj","push","stringify","medication","dose","forEach","arr","index","includes","updatedList","i","element","finalComponents","filter","setItem","map","id","flexDirection"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\r\n\r\n// Material UI Components\r\nimport Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\n\r\n// Custom Components\r\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\r\nimport Medication from \"./Medication\";\r\n\r\n// Styles\r\nconst containerSx = {\r\n    pl: 5,\r\n    pr: 5,\r\n    width: \"100%\"\r\n};\r\n\r\nexport default function DisplayMedications() {\r\n    // This is the array of medication objects that will be displayed on the cards\r\n    const medicationList = localStorage.getItem(\"medications\");\r\n    const parsedList = JSON.parse(medicationList);\r\n\r\n    const [medicationComps, setMedicationComps] = useState(<NoRegisteredMedications/>);\r\n    const [newComps, setNewComps] = useState(<NoRegisteredMedications/>);\r\n    const [update, setUpdate] = useState(false);\r\n\r\n    console.log(\"in here\")\r\n    console.log(parsedList, \"before effect\")\r\n\r\n    useEffect(() => {\r\n        setNewComps(medicationComps);\r\n    }, [medicationComps])\r\n\r\n    useEffect(() => {\r\n        console.log(\"in effect\")\r\n\r\n        if (parsedList && parsedList.length > 0) {\r\n            const stringified = [];\r\n            const comparedComponents = [];\r\n            const dupeIndexes = [];\r\n\r\n            // This makes it so the objs can be more easily compared\r\n            console.log(parsedList, \"in if\")\r\n\r\n            for (const obj of parsedList) {\r\n                stringified.push(JSON.stringify([obj.medication, obj.dose]));\r\n            }\r\n\r\n            // This checks for duplicates\r\n            // The arr is a stringified [med, dose]\r\n            stringified.forEach((arr, index) => {\r\n                if (!comparedComponents.includes(arr)) {\r\n                    comparedComponents.push(arr);\r\n                } else {\r\n                    dupeIndexes.push(index);\r\n                }\r\n            });\r\n\r\n            const updatedList = [...parsedList];\r\n\r\n            for (let i = 0; i < updatedList.length; i++) {\r\n                for (const element of dupeIndexes) {\r\n                    if (i === element) {\r\n                        updatedList[i] = \"dupe\";\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const finalComponents = updatedList.filter((index) => index !== \"dupe\");\r\n\r\n            console.log(finalComponents, \"before setting local storage\")\r\n            localStorage.setItem(\"medications\", JSON.stringify(finalComponents));\r\n\r\n            if (finalComponents.length > 0) {\r\n                // eslint-disable-next-line react-hooks/exhaustive-deps\r\n                setMedicationComps(finalComponents.map((medication) => {\r\n                    return (<Medication medication={medication} parsedList={parsedList}\r\n                                        update={update} setUpdate={setUpdate}\r\n                                        key={\"Medication_\" + medication.id}/>\r\n                    )\r\n                }));\r\n            } else {\r\n                setMedicationComps(<NoRegisteredMedications/>);\r\n            }\r\n        }\r\n    }, [update]);\r\n\r\n    return (\r\n        <Container sx={containerSx}>\r\n            <Box style={{flexDirection: \"column\"}}>\r\n                {newComps}\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}