{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\React-Medi-App\\\\src\\\\Components\\\\DisplayMedications.js\",\n    _s = $RefreshSig$();\n\nimport { useState, forwardRef } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport * as Yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CloseIcon from '@mui/icons-material/Close';\nimport Container from \"@mui/material/Container\";\nimport IconButton from '@mui/material/IconButton';\nimport Typography from \"@mui/material/Typography\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Slide from \"@mui/material/Slide\";\nimport TextField from \"@mui/material/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst doseSuggestions = [{\n  label: \"10\"\n}, {\n  label: \"20\"\n}, {\n  label: \"30\"\n}, {\n  label: \"40\"\n}, {\n  label: \"50\"\n}, {\n  label: \"60\"\n}, {\n  label: \"70\"\n}, {\n  label: \"80\"\n}];\nconst Transition = /*#__PURE__*/forwardRef(_c = function Transition(props, ref) {\n  return /*#__PURE__*/_jsxDEV(Slide, {\n    direction: \"up\",\n    ref: ref,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 12\n  }, this);\n}); // Form validation using Yup\n\n_c2 = Transition;\nconst validationSchema = Yup.object().shape({\n  dose: Yup.string().required(\"Dose is required\")\n});\nexport default function DisplayMedications() {\n  _s();\n\n  // This handles the delete medication confirmation dialog\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  }; // This handles the update medication dialog\n\n\n  const [openUpdate, setOpenUpdate] = useState(false);\n\n  const handleClickOpenUpdate = () => {\n    setOpenUpdate(true);\n  };\n\n  const handleCloseUpdate = () => {\n    setOpenUpdate(false);\n  };\n\n  const {\n    handleSubmit,\n    control,\n    formState\n  } = useForm({\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema)\n  }); // Function for the delete med button\n\n  function deleteMedication(medicationId, parsedMedications) {\n    if (parsedMedications.length > 1) {\n      parsedMedications.splice(medicationId, 1);\n    } else {\n      parsedMedications = [];\n    }\n\n    localStorage.setItem(\"medications\", JSON.stringify(parsedMedications)); // This forces the dialog to close\n\n    setOpen(false); // This forces the page to reload, preventing the following error... Warning: Can't perform a React state update on an unmounted component.\n    // window.location.reload();\n  } // Function for the update dose button\n\n\n  function updateDose(medicationId, parsedMedications, data) {\n    parsedMedications[medicationId].dose = data.dose;\n    localStorage.setItem(\"medications\", JSON.stringify(parsedMedications)); // This forces the dialog to close\n\n    setOpenUpdate(false); // This forces the page to reload, preventing the following error... Warning: Can't perform a React state update on an unmounted component.\n    // window.location.reload();\n  }\n\n  const boxSx = {\n    \"& .MuiTextField-root\": {\n      mb: 5,\n      width: \"100%\"\n    },\n    bgcolor: \"background.paper\",\n    ml: \"50px\",\n    mr: \"50px\"\n  };\n  const buttonSx = {\n    borderRadius: 0,\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"50%\"\n  };\n  const cardSx = {\n    bgcolor: \"#eaeef3\",\n    boxShadow: 3,\n    m: 5\n  };\n  const dialogTitleSx = {\n    m: 0,\n    p: 3\n  };\n  const formButtonSx = {\n    borderRadius: 0,\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    mb: 5,\n    width: \"100%\"\n  };\n  const iconButtonSx = {\n    position: 'absolute',\n    right: 8,\n    top: 8,\n    color: theme => theme.palette.grey[500]\n  };\n  const typographyMedicationSx = {\n    textAlign: \"left\"\n  };\n  const updateDoseTypography = {\n    mb: 5,\n    ml: 5,\n    mr: 5\n  };\n  let medications; // I also set this condition (localStorage.getItem(\"medications\").length < 2) because if the array is empty, the length === 2\n\n  if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\n    let medicationList = localStorage.getItem(\"medications\");\n    let parsed = JSON.parse(medicationList);\n    medications = parsed.map((medication, index) => {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          sx: cardSx,\n          children: [/*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              sx: typographyMedicationSx,\n              variant: \"h5\",\n              children: [\"Medication: \", medication.medication]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              sx: typographyMedicationSx,\n              variant: \"h5\",\n              children: [\"Dose: \", medication.dose, \" mg\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleClickOpenUpdate,\n              size: \"large\",\n              sx: buttonSx,\n              variant: \"contained\",\n              children: \"Edit Dose\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleClickOpen,\n              color: \"error\",\n              size: \"large\",\n              sx: buttonSx,\n              variant: \"contained\",\n              children: \"Delete Med \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          open: open,\n          onClose: handleClose,\n          TransitionComponent: Transition,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              m: 5\n            },\n            children: \" Are you sure you want to delete the medication? \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => deleteMedication(medication.id, parsed),\n              size: \"large\",\n              sx: buttonSx,\n              variant: \"contained\",\n              children: \"Yes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleClose,\n              color: \"error\",\n              size: \"large\",\n              sx: buttonSx,\n              variant: \"contained\",\n              children: \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          open: openUpdate,\n          onClose: handleCloseUpdate,\n          TransitionComponent: Transition,\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            sx: dialogTitleSx,\n            children: handleCloseUpdate ? /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"close\",\n              onClick: handleCloseUpdate,\n              sx: iconButtonSx,\n              children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 33\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this), \"let abortController = new AbortController();\", /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit(data => updateDose(medication.id, parsed, data)),\n            noValidate: true,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              sx: updateDoseTypography,\n              variant: \"h4\",\n              children: \"Update dose\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: boxSx,\n              children: [/*#__PURE__*/_jsxDEV(Controller, {\n                name: \"dose\",\n                control: control,\n                defaultValue: \"\",\n                render: _ref => {\n                  let {\n                    field: {\n                      ref,\n                      ...field\n                    },\n                    fieldState: {\n                      error\n                    }\n                  } = _ref;\n                  return /*#__PURE__*/_jsxDEV(Autocomplete, { ...field,\n                    autoHighlight: true,\n                    disableClearable: true,\n                    isOptionEqualToValue: (option, value) => option.id === value.id,\n                    id: \"dose-autocomplete\",\n                    onChange: (event, value) => field.onChange(value.label),\n                    options: doseSuggestions,\n                    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                      required: true,\n                      error: !!error,\n                      helperText: error === null || error === void 0 ? void 0 : error.message,\n                      id: \"dose\",\n                      label: \"Dose\",\n                      name: \"dose\",\n                      type: \"numeric\",\n                      inputRef: ref,\n                      ...params\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 237,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 228,\n                    columnNumber: 41\n                  }, this);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                disabled: !formState.isValid,\n                size: \"large\",\n                sx: formButtonSx,\n                type: \"submit\",\n                variant: \"contained\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this);\n    });\n  } else {\n    medications = /*#__PURE__*/_jsxDEV(Card, {\n      sx: cardSx,\n      children: [/*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          sx: typographyMedicationSx,\n          variant: \"h5\",\n          children: \"No medications are registered.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          href: \"/add-medication\",\n          size: \"large\",\n          sx: Object.assign(buttonSx, {\n            width: \"100%\"\n          }),\n          variant: \"contained\",\n          children: \"Register med\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 14\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: medications\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DisplayMedications, \"2hIrJvTCQtMinNYIWk7/OE3oYzQ=\", false, function () {\n  return [useForm];\n});\n\n_c3 = DisplayMedications;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Transition$forwardRef\");\n$RefreshReg$(_c2, \"Transition\");\n$RefreshReg$(_c3, \"DisplayMedications\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/React-Medi-App/src/Components/DisplayMedications.js"],"names":["useState","forwardRef","Controller","useForm","Yup","yupResolver","Box","Button","Card","CardContent","CloseIcon","Container","IconButton","Typography","Autocomplete","Dialog","DialogTitle","Slide","TextField","doseSuggestions","label","Transition","props","ref","validationSchema","object","shape","dose","string","required","DisplayMedications","open","setOpen","handleClickOpen","handleClose","openUpdate","setOpenUpdate","handleClickOpenUpdate","handleCloseUpdate","handleSubmit","control","formState","mode","resolver","deleteMedication","medicationId","parsedMedications","length","splice","localStorage","setItem","JSON","stringify","updateDose","data","boxSx","mb","width","bgcolor","ml","mr","buttonSx","borderRadius","fontSize","height","cardSx","boxShadow","m","dialogTitleSx","p","formButtonSx","iconButtonSx","position","right","top","color","theme","palette","grey","typographyMedicationSx","textAlign","updateDoseTypography","medications","getItem","medicationList","parsed","parse","map","medication","index","id","field","fieldState","error","option","value","event","onChange","params","message","isValid","Object","assign","flexDirection"],"mappings":"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","sourcesContent":["import {useState, forwardRef} from \"react\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport * as Yup from \"yup\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\n\r\n// Material UI Components\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport Container from \"@mui/material/Container\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Slide from \"@mui/material/Slide\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nconst doseSuggestions = [\r\n    {label: \"10\"},\r\n    {label: \"20\"},\r\n    {label: \"30\"},\r\n    {label: \"40\"},\r\n    {label: \"50\"},\r\n    {label: \"60\"},\r\n    {label: \"70\"},\r\n    {label: \"80\"}\r\n];\r\n\r\nconst Transition = forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n// Form validation using Yup\r\nconst validationSchema = Yup.object().shape({\r\n    dose: Yup.string()\r\n        .required(\"Dose is required\")\r\n});\r\n\r\nexport default function DisplayMedications() {\r\n    // This handles the delete medication confirmation dialog\r\n    const [open, setOpen] = useState(false);\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    // This handles the update medication dialog\r\n    const [openUpdate, setOpenUpdate] = useState(false);\r\n    const handleClickOpenUpdate = () => {\r\n        setOpenUpdate(true);\r\n    };\r\n    const handleCloseUpdate = () => {\r\n        setOpenUpdate(false);\r\n    };\r\n\r\n    const {handleSubmit, control, formState} = useForm({\r\n        mode: \"onChange\",\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n\r\n    // Function for the delete med button\r\n    function deleteMedication(medicationId, parsedMedications) {\r\n        if (parsedMedications.length > 1) {\r\n            parsedMedications.splice(medicationId, 1);\r\n        } else {\r\n            parsedMedications = [];\r\n        }\r\n\r\n        localStorage.setItem(\"medications\", JSON.stringify(parsedMedications));\r\n\r\n        // This forces the dialog to close\r\n        setOpen(false);\r\n\r\n        // This forces the page to reload, preventing the following error... Warning: Can't perform a React state update on an unmounted component.\r\n        // window.location.reload();\r\n    }\r\n\r\n    // Function for the update dose button\r\n    function updateDose(medicationId, parsedMedications, data) {\r\n        parsedMedications[medicationId].dose = data.dose;\r\n        localStorage.setItem(\"medications\", JSON.stringify(parsedMedications));\r\n\r\n        // This forces the dialog to close\r\n        setOpenUpdate(false);\r\n\r\n        // This forces the page to reload, preventing the following error... Warning: Can't perform a React state update on an unmounted component.\r\n        // window.location.reload();\r\n    }\r\n\r\n    const boxSx = {\r\n        \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\r\n        bgcolor: \"background.paper\",\r\n        ml: \"50px\",\r\n        mr: \"50px\"\r\n    };\r\n\r\n    const buttonSx = {\r\n        borderRadius: 0,\r\n        fontSize: \"17px\",\r\n        height: \"5.75ch\",\r\n        width: \"50%\"\r\n    };\r\n\r\n    const cardSx = {\r\n        bgcolor: \"#eaeef3\",\r\n        boxShadow: 3,\r\n        m: 5\r\n    };\r\n\r\n    const dialogTitleSx = {\r\n        m: 0,\r\n        p: 3\r\n    };\r\n\r\n    const formButtonSx = {\r\n        borderRadius: 0,\r\n        fontSize: \"17px\",\r\n        height: \"5.75ch\",\r\n        mb: 5,\r\n        width: \"100%\"\r\n    };\r\n\r\n    const iconButtonSx = {\r\n        position: 'absolute',\r\n        right: 8,\r\n        top: 8,\r\n        color: (theme) => theme.palette.grey[500],\r\n    };\r\n\r\n    const typographyMedicationSx = {\r\n        textAlign: \"left\"\r\n    };\r\n\r\n    const updateDoseTypography = {\r\n        mb: 5,\r\n        ml: 5,\r\n        mr: 5\r\n    };\r\n\r\n    let medications;\r\n\r\n    // I also set this condition (localStorage.getItem(\"medications\").length < 2) because if the array is empty, the length === 2\r\n    if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\r\n        let medicationList = localStorage.getItem(\"medications\");\r\n        let parsed = JSON.parse(medicationList);\r\n\r\n        medications = parsed.map((medication, index) => {\r\n            return (\r\n                <Box key={index}>\r\n                    <Card sx={cardSx}>\r\n                        <CardContent>\r\n                            <Typography sx={typographyMedicationSx} variant=\"h5\">\r\n                                Medication: {medication.medication}\r\n                            </Typography>\r\n                            <Typography sx={typographyMedicationSx} variant=\"h5\">\r\n                                Dose: {medication.dose} mg\r\n                            </Typography>\r\n                        </CardContent>\r\n                        <Box>\r\n                            <Button onClick={handleClickOpenUpdate} size=\"large\" sx={buttonSx} variant=\"contained\">Edit\r\n                                Dose</Button>\r\n                            <Button onClick={handleClickOpen} color=\"error\"\r\n                                    size=\"large\"\r\n                                    sx={buttonSx} variant=\"contained\">Delete\r\n                                Med </Button>\r\n                        </Box>\r\n                    </Card>\r\n\r\n                    {/* Delete medication dialog */}\r\n                    <Dialog\r\n                        open={open}\r\n                        onClose={handleClose}\r\n                        TransitionComponent={Transition}\r\n                    >\r\n                        <Typography variant=\"h5\" sx={{m: 5}}> Are you sure you want to delete the\r\n                            medication? </Typography>\r\n\r\n                        <Box>\r\n                            <Button onClick={() => deleteMedication(medication.id, parsed)} size=\"large\"\r\n                                    sx={buttonSx} variant=\"contained\">Yes</Button>\r\n                            <Button onClick={handleClose} color=\"error\"\r\n                                    size=\"large\"\r\n                                    sx={buttonSx} variant=\"contained\">No</Button>\r\n                        </Box>\r\n                    </Dialog>\r\n\r\n                    {/* Update medication dialog */}\r\n                    <Dialog\r\n                        open={openUpdate}\r\n                        onClose={handleCloseUpdate}\r\n                        TransitionComponent={Transition}\r\n                    >\r\n                        <DialogTitle sx={dialogTitleSx}>\r\n                            {handleCloseUpdate ? (\r\n                                <IconButton\r\n                                    aria-label=\"close\"\r\n                                    onClick={handleCloseUpdate}\r\n                                    sx={iconButtonSx}\r\n                                >\r\n                                    <CloseIcon/>\r\n                                </IconButton>\r\n                            ) : null}\r\n                        </DialogTitle>\r\n\r\n                        let abortController = new AbortController();\r\n                        \r\n                        <form\r\n                            onSubmit={handleSubmit((data) => updateDose(medication.id, parsed, data))}\r\n                            noValidate>\r\n                            <Typography sx={updateDoseTypography} variant=\"h4\">\r\n                                Update dose\r\n                            </Typography>\r\n\r\n                            <Box\r\n                                sx={boxSx}\r\n                            >\r\n                                <Controller\r\n                                    name=\"dose\"\r\n                                    control={control}\r\n                                    defaultValue={\"\"}\r\n                                    render={({field: {ref, ...field}, fieldState: {error}}) => (\r\n                                        <Autocomplete\r\n                                            {...field}\r\n                                            autoHighlight\r\n                                            disableClearable\r\n                                            isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                                            id=\"dose-autocomplete\"\r\n                                            onChange={(event, value) => field.onChange(value.label)}\r\n                                            options={doseSuggestions}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    required\r\n                                                    error={!!error}\r\n                                                    helperText={error?.message}\r\n                                                    id=\"dose\"\r\n                                                    label=\"Dose\"\r\n                                                    name=\"dose\"\r\n                                                    type=\"numeric\"\r\n                                                    inputRef={ref}\r\n                                                    {...params}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    )}\r\n                                />\r\n\r\n                                <Button disabled={!formState.isValid} size=\"large\" sx={formButtonSx} type=\"submit\"\r\n                                        variant=\"contained\">Submit</Button>\r\n                            </Box>\r\n                        </form>\r\n                    </Dialog>\r\n                </Box>\r\n            )\r\n        });\r\n    } else {\r\n        medications =\r\n            (<Card sx={cardSx}>\r\n                <CardContent>\r\n                    <Typography sx={typographyMedicationSx} variant=\"h5\">\r\n                        No medications are registered.\r\n                    </Typography>\r\n                </CardContent>\r\n                <Box>\r\n                    <Button href=\"/add-medication\" size=\"large\" sx={Object.assign(buttonSx, {width: \"100%\"})}\r\n                            variant=\"contained\">Register\r\n                        med</Button>\r\n                </Box>\r\n            </Card>)\r\n        ;\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Box style={{flexDirection: \"column\"}}>\r\n                {medications}\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}