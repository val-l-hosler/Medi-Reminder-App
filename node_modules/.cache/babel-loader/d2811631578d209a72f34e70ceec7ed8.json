{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\React-Medi-App\\\\src\\\\Components\\\\AddReminder2.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\"; // Material UI Components\n\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport Box from \"@mui/material/Box\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport Link from \"@mui/material/Link\";\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport TextField from \"@mui/material/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initOptions = [{\n  label: \"Every day\",\n  disabled: false\n}, {\n  label: \"Sunday\",\n  disabled: false\n}, {\n  label: \"Monday\",\n  disabled: false\n}, {\n  label: \"Tuesday\",\n  disabled: false\n}, {\n  label: \"Wednesday\",\n  disabled: false\n}, {\n  label: \"Thursday\",\n  disabled: false\n}, {\n  label: \"Friday\",\n  disabled: false\n}, {\n  label: \"Saturday\",\n  disabled: false\n}]; // An outline of this solution was provided to me here: https://stackoverflow.com/questions/69878586/how-can-i-validate-an-autocomplete-multiple-textfield-using-react-hook-form-and\n\nconst validationSchema = Yup.object().shape({\n  daysOfWeek: Yup.array().of(Yup.object().shape({\n    label: Yup.string(),\n    disabled: Yup.boolean()\n  })).min(1, \"Days of the week are required\")\n});\nexport default function AddReminder2() {\n  _s();\n\n  // Styles\n  const autoCompleteSx = {\n    width: \"100%\"\n  };\n  const boxSx = {\n    \"& .MuiTextField-root\": {\n      mb: 5,\n      width: \"100%\"\n    },\n    alignItems: \"center\",\n    bgcolor: \"background.paper\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    ml: \"50px\",\n    mr: \"50px\"\n  };\n  const iconButtonSx = {\n    fontSize: 75,\n    ml: 2,\n    mr: 2\n  };\n  const stackSx = {\n    mb: 10\n  };\n  const typographySx = {\n    mb: 5,\n    textAlign: \"center\"\n  };\n  const {\n    handleSubmit,\n    control,\n    formState\n  } = useForm({\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema)\n  }); // An outline of this solution was provided to me here: https://stackoverflow.com/questions/69876501/disable-options-based-on-currently-selected-option-with-material-ui-autocomplete\n\n  const [daysOfWeekSuggestions, setOptions] = useState(initOptions);\n  const [selected, setSelected] = useState([]);\n\n  const onChangeDisabled = (e, valueArr) => {\n    setSelected(valueArr);\n\n    if (valueArr.length === 0) {\n      const resetOptions = [...daysOfWeekSuggestions].map(opt => {\n        opt.disabled = false;\n        return opt;\n      });\n      setOptions(resetOptions);\n    } else {\n      const everyDaySelected = valueArr.find(item => item.label === \"Every day\");\n\n      if (everyDaySelected) {\n        const updatedOptions = [...daysOfWeekSuggestions].map(opt => {\n          opt.disabled = opt.label !== \"Every day\";\n          return opt;\n        });\n        setOptions(updatedOptions);\n      } else {\n        const updatedOptions = [...daysOfWeekSuggestions].map(opt => {\n          opt.disabled = opt.label === \"Every day\";\n          return opt;\n        });\n        setOptions(updatedOptions);\n      }\n    }\n  };\n\n  const onSubmit = data => {\n    // This saves the reminder into a local session storage for the purposes of displaying the reminders on another page.\n    // If I were going to create a deployed version of the app, I would create a DB and save the data there.\n    // I also set this condition --> localStorage.getItem(\"reminders\").length < 2 --> because if the array is empty, the length === 2\n    if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\n      localStorage.setItem(\"reminders\", JSON.stringify([{\n        id: 0,\n        medication: \"\",\n        dose: \"\",\n        days: [...data],\n        timesPerDay: 0,\n        times: []\n      }]));\n    }\n\n    let reminderList = localStorage.getItem(\"reminders\");\n    let parsed = JSON.parse(reminderList);\n    const mostRecent = parsed[parsed.length - 1];\n    const daysArr = []; // The data for the days is stored in an object that contains a key, daysOfWeek. This key's value is an array of objects in the same format as initOptions\n\n    for (let i = 0; i < data.daysOfWeek.length; i++) {\n      daysArr.push(data.daysOfWeek[i].label);\n    }\n\n    mostRecent.days = daysArr;\n    parsed[parsed.length - 1] = mostRecent;\n    localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n    fetch(\"http://localhost:3000/add-reminder/days/nums\").then(resp => {\n      window.location = \"http://localhost:3000/add-reminder/days/nums\";\n    });\n  };\n\n  const breadcrumbs = [/*#__PURE__*/_jsxDEV(Link, {\n    underline: \"hover\",\n    color: \"inherit\",\n    href: \"/add-reminder\",\n    sx: {\n      color: \"#2196f3\"\n    },\n    children: \"Name & Dose\"\n  }, \"1\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n    color: \"text.primary\",\n    children: \"Days of Week\"\n  }, \"2\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 9\n  }, this)];\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 2,\n      sx: stackSx,\n      children: /*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        separator: /*#__PURE__*/_jsxDEV(NavigateNextIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 32\n        }, this),\n        \"aria-label\": \"breadcrumb\",\n        children: breadcrumbs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      sx: typographySx,\n      variant: \"h4\",\n      children: \"Which days of the week do you take your medication?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      noValidate: true,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: boxSx,\n        children: [/*#__PURE__*/_jsxDEV(Controller, {\n          name: \"daysOfWeek\",\n          control: control,\n          defaultValue: [],\n          render: _ref => {\n            let {\n              field: {\n                ref,\n                ...field\n              },\n              fieldState: {\n                error\n              }\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(Autocomplete, { ...field,\n              autoHighlight: true,\n              disableClearable: true,\n              disablePortal: true,\n              filterSelectedOptions: true,\n              multiple: true,\n              getOptionDisabled: option => !!option.disabled,\n              id: \"days-autocomplete\",\n              onChange: (event, value) => {\n                field.onChange(value);\n                onChangeDisabled(event, value);\n              },\n              options: daysOfWeekSuggestions,\n              sx: autoCompleteSx,\n              value: selected,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                error: !!error,\n                helperText: error === null || error === void 0 ? void 0 : error.message,\n                id: \"daysOfWeek\",\n                label: \"Days of the week\",\n                name: \"daysOfWeek\",\n                type: \"search\",\n                inputRef: ref,\n                ...params\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            href: \"/add-reminder\",\n            children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {\n              sx: iconButtonSx\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 54\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: !formState.isValid,\n            type: \"submit\",\n            children: /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n              sx: iconButtonSx\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddReminder2, \"/wM2HzHRhwbZk2JtQd9kAhiBwms=\", false, function () {\n  return [useForm];\n});\n\n_c = AddReminder2;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddReminder2\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/React-Medi-App/src/Components/AddReminder2.js"],"names":["useState","useForm","Controller","yupResolver","Yup","ArrowBackIcon","ArrowForwardIcon","Box","Breadcrumbs","Button","Container","Link","NavigateNextIcon","Stack","Typography","Autocomplete","TextField","initOptions","label","disabled","validationSchema","object","shape","daysOfWeek","array","of","string","boolean","min","AddReminder2","autoCompleteSx","width","boxSx","mb","alignItems","bgcolor","display","flexDirection","ml","mr","iconButtonSx","fontSize","stackSx","typographySx","textAlign","handleSubmit","control","formState","mode","resolver","daysOfWeekSuggestions","setOptions","selected","setSelected","onChangeDisabled","e","valueArr","length","resetOptions","map","opt","everyDaySelected","find","item","updatedOptions","onSubmit","data","localStorage","getItem","setItem","JSON","stringify","id","medication","dose","days","timesPerDay","times","reminderList","parsed","parse","mostRecent","daysArr","i","push","fetch","then","resp","window","location","breadcrumbs","color","field","ref","fieldState","error","option","event","value","onChange","params","message","isValid"],"mappings":"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","sourcesContent":["import {useState} from \"react\";\r\nimport {useForm, Controller} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n\r\n// Material UI Components\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Link from \"@mui/material/Link\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nconst initOptions = [\r\n    {label: \"Every day\", disabled: false},\r\n    {label: \"Sunday\", disabled: false},\r\n    {label: \"Monday\", disabled: false},\r\n    {label: \"Tuesday\", disabled: false},\r\n    {label: \"Wednesday\", disabled: false},\r\n    {label: \"Thursday\", disabled: false},\r\n    {label: \"Friday\", disabled: false},\r\n    {label: \"Saturday\", disabled: false}\r\n];\r\n\r\n// An outline of this solution was provided to me here: https://stackoverflow.com/questions/69878586/how-can-i-validate-an-autocomplete-multiple-textfield-using-react-hook-form-and\r\nconst validationSchema = Yup.object().shape({\r\n    daysOfWeek: Yup.array()\r\n        .of(\r\n            Yup.object().shape({\r\n                label: Yup.string(),\r\n                disabled: Yup.boolean()\r\n            })\r\n        )\r\n        .min(1, \"Days of the week are required\")\r\n});\r\n\r\nexport default function AddReminder2() {\r\n    // Styles\r\n    const autoCompleteSx = {\r\n        width: \"100%\"\r\n    };\r\n\r\n    const boxSx = {\r\n        \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\r\n        alignItems: \"center\",\r\n        bgcolor: \"background.paper\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        ml: \"50px\",\r\n        mr: \"50px\",\r\n    };\r\n\r\n    const iconButtonSx = {\r\n        fontSize: 75,\r\n        ml: 2,\r\n        mr: 2\r\n    };\r\n\r\n    const stackSx = {\r\n        mb: 10\r\n    };\r\n\r\n    const typographySx = {\r\n        mb: 5,\r\n        textAlign: \"center\"\r\n    };\r\n\r\n    const {handleSubmit, control, formState} = useForm({\r\n        mode: \"onChange\",\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n\r\n    // An outline of this solution was provided to me here: https://stackoverflow.com/questions/69876501/disable-options-based-on-currently-selected-option-with-material-ui-autocomplete\r\n    const [daysOfWeekSuggestions, setOptions] = useState(initOptions);\r\n    const [selected, setSelected] = useState([]);\r\n\r\n    const onChangeDisabled = (e, valueArr) => {\r\n        setSelected(valueArr);\r\n\r\n        if (valueArr.length === 0) {\r\n            const resetOptions = [...daysOfWeekSuggestions].map((opt) => {\r\n                opt.disabled = false;\r\n                return opt;\r\n            });\r\n            setOptions(resetOptions);\r\n        } else {\r\n            const everyDaySelected = valueArr.find(\r\n                (item) => item.label === \"Every day\"\r\n            );\r\n\r\n            if (everyDaySelected) {\r\n                const updatedOptions = [...daysOfWeekSuggestions].map((opt) => {\r\n                    opt.disabled = opt.label !== \"Every day\";\r\n                    return opt;\r\n                });\r\n                setOptions(updatedOptions);\r\n            } else {\r\n                const updatedOptions = [...daysOfWeekSuggestions].map((opt) => {\r\n                    opt.disabled = opt.label === \"Every day\";\r\n                    return opt;\r\n                });\r\n                setOptions(updatedOptions);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onSubmit = (data) => {\r\n        // This saves the reminder into a local session storage for the purposes of displaying the reminders on another page.\r\n        // If I were going to create a deployed version of the app, I would create a DB and save the data there.\r\n        // I also set this condition --> localStorage.getItem(\"reminders\").length < 2 --> because if the array is empty, the length === 2\r\n        if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\r\n            localStorage.setItem(\"reminders\", JSON.stringify([{\r\n                id: 0,\r\n                medication: \"\",\r\n                dose: \"\",\r\n                days: [...data],\r\n                timesPerDay: 0,\r\n                times: []\r\n            }]));\r\n        }\r\n\r\n        let reminderList = localStorage.getItem(\"reminders\");\r\n        let parsed = JSON.parse(reminderList);\r\n\r\n        const mostRecent = parsed[parsed.length - 1];\r\n        const daysArr = [];\r\n\r\n        // The data for the days is stored in an object that contains a key, daysOfWeek. This key's value is an array of objects in the same format as initOptions\r\n        for (let i = 0; i < data.daysOfWeek.length; i++) {\r\n            daysArr.push(data.daysOfWeek[i].label);\r\n        }\r\n\r\n        mostRecent.days = daysArr;\r\n        parsed[parsed.length - 1] = mostRecent;\r\n\r\n        localStorage.setItem(\"reminders\", JSON.stringify(parsed));\r\n\r\n        fetch(\"http://localhost:3000/add-reminder/days/nums\")\r\n            .then((resp) => {\r\n                window.location = \"http://localhost:3000/add-reminder/days/nums\";\r\n            });\r\n    };\r\n\r\n    const breadcrumbs = [\r\n        <Link key=\"1\" underline=\"hover\" color=\"inherit\" href=\"/add-reminder\" sx={{color: \"#2196f3\"}}>\r\n            Name & Dose\r\n        </Link>,\r\n        <Typography key=\"2\" color=\"text.primary\">\r\n            Days of Week\r\n        </Typography>\r\n    ];\r\n\r\n    return (\r\n        <Container>\r\n            <Stack spacing={2} sx={stackSx}>\r\n                <Breadcrumbs\r\n                    separator={<NavigateNextIcon fontSize=\"small\"/>}\r\n                    aria-label=\"breadcrumb\"\r\n                >\r\n                    {breadcrumbs}\r\n                </Breadcrumbs>\r\n            </Stack>\r\n\r\n            <Typography sx={typographySx} variant=\"h4\">\r\n                Which days of the week do you take your medication?\r\n            </Typography>\r\n\r\n            <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                <Box sx={boxSx}>\r\n                    <Controller\r\n                        name=\"daysOfWeek\"\r\n                        control={control}\r\n                        defaultValue={[]}\r\n                        render={({field: {ref, ...field}, fieldState: {error}}) => (\r\n                            <Autocomplete\r\n                                {...field}\r\n                                autoHighlight\r\n                                disableClearable\r\n                                disablePortal\r\n                                filterSelectedOptions\r\n                                multiple\r\n                                getOptionDisabled={(option) => !!option.disabled}\r\n                                id=\"days-autocomplete\"\r\n                                onChange={(event, value) => {\r\n                                    field.onChange(value);\r\n                                    onChangeDisabled(event, value);\r\n                                }}\r\n                                options={daysOfWeekSuggestions}\r\n                                sx={autoCompleteSx}\r\n                                value={selected}\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                        required\r\n                                        error={!!error}\r\n                                        helperText={error?.message}\r\n                                        id=\"daysOfWeek\"\r\n                                        label=\"Days of the week\"\r\n                                        name=\"daysOfWeek\"\r\n                                        type=\"search\"\r\n                                        inputRef={ref}\r\n                                        {...params}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        )}\r\n                    />\r\n\r\n                    <Box>\r\n                        <Button href=\"/add-reminder\"><ArrowBackIcon sx={iconButtonSx}/></Button>\r\n\r\n                        <Button disabled={!formState.isValid}\r\n                                type=\"submit\"><ArrowForwardIcon sx={iconButtonSx}/></Button>\r\n                    </Box>\r\n                </Box>\r\n            </form>\r\n        </Container>\r\n    );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}