{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\Medi-Reminder-App\\\\src\\\\Components\\\\Add Medication\\\\AddMedication.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\nimport { v4 as uuidv4 } from \"uuid\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport Typography from \"@mui/material/Typography\"; // Custom Components\n\nimport DoseInput from \"../Inputs/DoseInput.js\";\nimport MedicationInput from \"../Inputs/MedicationInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst doseSuggestions = [{\n  label: \"10 mg\"\n}, {\n  label: \"20 mg\"\n}, {\n  label: \"30 mg\"\n}, {\n  label: \"40 mg\"\n}, {\n  label: \"50 mg\"\n}, {\n  label: \"60 mg\"\n}, {\n  label: \"70 mg\"\n}, {\n  label: \"80 mg\"\n}];\nconst medicationSuggestions = [{\n  label: \"Lisinopril\"\n}, {\n  label: \"Valsartan\"\n}];\nconst validationSchema = Yup.object().shape({\n  medication: Yup.string().required(\"Medication is required\"),\n  dose: Yup.string().required(\"Dose is required\")\n}); // Styles\n\nconst boxSx = {\n  \"& .MuiTextField-root\": {\n    mb: 5,\n    width: \"100%\"\n  }\n};\nconst buttonSx = {\n  fontSize: \"17px\",\n  height: \"5.75ch\",\n  width: \"100%\"\n};\nconst containerSx = {\n  mb: 5,\n  mt: 5,\n  pl: 5,\n  pr: 5,\n  width: \"100%\"\n};\nconst typographyMedicationSx = {\n  mb: 4,\n  textAlign: \"center\"\n}; // Functions\n\nconst onSubmit = data => {\n  const {\n    medication,\n    dose\n  } = data; // This saves the medications into a local session storage for the purposes of displaying the medications on another page.\n  // If I were going to create a deployed version of the app, I would create a DB and save the data there.\n  // I also set this condition --> localStorage.getItem(\"medications\").length < 2 --> because if the array is empty, the length === 2\n\n  if (localStorage.getItem(\"medications\") === null || localStorage.getItem(\"medications\").length < 3) {\n    localStorage.setItem(\"medications\", JSON.stringify([{\n      id: uuidv4(),\n      medication,\n      dose\n    }]));\n  } else {\n    const medicationList = localStorage.getItem(\"medications\");\n    const parsed = JSON.parse(medicationList);\n    parsed.push({\n      id: uuidv4(),\n      medication,\n      dose\n    });\n    localStorage.setItem(\"medications\", JSON.stringify(parsed));\n  }\n\n  fetch(\"/medication-confirmation\").then(() => {\n    window.location = \"/medication-confirmation\";\n  });\n};\n\nexport default function AddMedication() {\n  _s();\n\n  const {\n    handleSubmit,\n    control,\n    formState\n  } = useForm({\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema)\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: containerSx,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      noValidate: true,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        sx: typographyMedicationSx,\n        variant: \"h4\",\n        children: \"Add a new medication\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: boxSx,\n        children: [/*#__PURE__*/_jsxDEV(MedicationInput, {\n          control: control,\n          suggestions: medicationSuggestions,\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DoseInput, {\n          control: control,\n          suggestions: doseSuggestions,\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: !formState.isValid,\n          size: \"large\",\n          sx: buttonSx,\n          type: \"submit\",\n          variant: \"contained\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddMedication, \"qw4uJ56/71qY3KYVVBgBKHcMt38=\", false, function () {\n  return [useForm];\n});\n\n_c = AddMedication;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddMedication\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/Medi-Reminder-App/src/Components/Add Medication/AddMedication.js"],"names":["React","useForm","yupResolver","Yup","v4","uuidv4","Box","Button","Container","Typography","DoseInput","MedicationInput","doseSuggestions","label","medicationSuggestions","validationSchema","object","shape","medication","string","required","dose","boxSx","mb","width","buttonSx","fontSize","height","containerSx","mt","pl","pr","typographyMedicationSx","textAlign","onSubmit","data","localStorage","getItem","length","setItem","JSON","stringify","id","medicationList","parsed","parse","push","fetch","then","window","location","AddMedication","handleSubmit","control","formState","mode","resolver","isValid"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\n// Material UI Components\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\n// Custom Components\r\nimport DoseInput from \"../Inputs/DoseInput.js\";\r\nimport MedicationInput from \"../Inputs/MedicationInput\";\r\n\r\nconst doseSuggestions = [\r\n    {label: \"10 mg\"},\r\n    {label: \"20 mg\"},\r\n    {label: \"30 mg\"},\r\n    {label: \"40 mg\"},\r\n    {label: \"50 mg\"},\r\n    {label: \"60 mg\"},\r\n    {label: \"70 mg\"},\r\n    {label: \"80 mg\"}\r\n];\r\n\r\nconst medicationSuggestions = [\r\n    {label: \"Lisinopril\"},\r\n    {label: \"Valsartan\"}\r\n];\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    medication: Yup.string()\r\n        .required(\"Medication is required\"),\r\n    dose: Yup.string()\r\n        .required(\"Dose is required\")\r\n});\r\n\r\n// Styles\r\nconst boxSx = {\r\n    \"& .MuiTextField-root\": {mb: 5, width: \"100%\"}\r\n};\r\n\r\nconst buttonSx = {\r\n    fontSize: \"17px\",\r\n    height: \"5.75ch\",\r\n    width: \"100%\"\r\n};\r\n\r\nconst containerSx = {\r\n    mb: 5,\r\n    mt: 5,\r\n    pl: 5,\r\n    pr: 5,\r\n    width: \"100%\"\r\n};\r\n\r\nconst typographyMedicationSx = {\r\n    mb: 4,\r\n    textAlign: \"center\"\r\n};\r\n\r\n// Functions\r\nconst onSubmit = (data) => {\r\n    const {medication, dose} = data;\r\n\r\n    // This saves the medications into a local session storage for the purposes of displaying the medications on another page.\r\n    // If I were going to create a deployed version of the app, I would create a DB and save the data there.\r\n    // I also set this condition --> localStorage.getItem(\"medications\").length < 2 --> because if the array is empty, the length === 2\r\n    if (localStorage.getItem(\"medications\") === null || localStorage.getItem(\"medications\").length < 3) {\r\n        localStorage.setItem(\"medications\", JSON.stringify([{\r\n            id: uuidv4(),\r\n            medication,\r\n            dose\r\n        }]));\r\n    } else {\r\n        const medicationList = localStorage.getItem(\"medications\");\r\n        const parsed = JSON.parse(medicationList);\r\n        parsed.push({id: uuidv4(), medication, dose});\r\n        localStorage.setItem(\"medications\", JSON.stringify(parsed));\r\n    }\r\n\r\n    fetch(\"/medication-confirmation\")\r\n        .then(() => {\r\n            window.location = \"/medication-confirmation\"\r\n        });\r\n};\r\n\r\nexport default function AddMedication() {\r\n    const {handleSubmit, control, formState} = useForm({\r\n        mode: \"onChange\",\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n\r\n    return (\r\n        <Container sx={containerSx}>\r\n            <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                <Typography sx={typographyMedicationSx} variant=\"h4\">\r\n                    Add a new medication\r\n                </Typography>\r\n\r\n                <Box\r\n                    sx={boxSx}\r\n                >\r\n\r\n                    <MedicationInput control={control} suggestions={medicationSuggestions} variant={\"outlined\"}/>\r\n\r\n                    <DoseInput control={control} suggestions={doseSuggestions} variant={\"outlined\"}/>\r\n\r\n                    <Button disabled={!formState.isValid} size=\"large\" sx={buttonSx} type=\"submit\"\r\n                            variant=\"contained\">Submit</Button>\r\n                </Box>\r\n            </form>\r\n        </Container>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}