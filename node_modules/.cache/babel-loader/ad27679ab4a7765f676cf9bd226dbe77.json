{"ast":null,"code":"var _jsxFileName = \"/Users/valeriehosler/Desktop/Github/React-Medi-App/src/Components/AddReminder3.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\"; // Material UI Components\n\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport Box from \"@mui/material/Box\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport Link from \"@mui/material/Link\";\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport TextField from \"@mui/material/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst timesSuggestions = [{\n  label: \"1\"\n}, {\n  label: \"2\"\n}, {\n  label: \"3\"\n}, {\n  label: \"4\"\n}, {\n  label: \"5\"\n}, {\n  label: \"6\"\n}, {\n  label: \"7\"\n}, {\n  label: \"8\"\n}, {\n  label: \"9\"\n}, {\n  label: \"10\"\n}, {\n  label: \"More than 10\"\n}];\nconst validationSchema = Yup.object().shape({\n  times: Yup.string().required(\"Times are required\")\n});\nexport default function AddReminder3() {\n  _s();\n\n  // Styles\n  const autoCompleteSx = {\n    width: \"100%\"\n  };\n  const boxSx = {\n    \"& .MuiTextField-root\": {\n      mb: 5,\n      width: \"100%\"\n    },\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    ml: \"50px\",\n    mr: \"50px\"\n  };\n  const iconButtonSx = {\n    fontSize: 75,\n    ml: 2.5,\n    mr: 2.5\n  };\n  const linkSx = {\n    color: \"#1976d2\"\n  };\n  const stackSx = {\n    mb: 5\n  };\n  const typographySx = {\n    mb: 5,\n    textAlign: \"center\"\n  };\n  const breadcrumbs = [/*#__PURE__*/_jsxDEV(Link, {\n    underline: \"hover\",\n    color: \"inherit\",\n    href: \"/add-reminder\",\n    sx: linkSx,\n    children: \"Name & Dose\"\n  }, \"1\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Link, {\n    underline: \"hover\",\n    color: \"inherit\",\n    href: \"/add-reminder/days\",\n    sx: linkSx,\n    children: \"Days of Week\"\n  }, \"2\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n    color: \"text.primary\",\n    children: \"# of Times\"\n  }, \"3\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this)];\n  const {\n    handleSubmit,\n    control,\n    formState\n  } = useForm({\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema)\n  });\n\n  const onSubmit = data => {\n    // This saves the reminder into a local session storage for the purposes of displaying the reminders on another page.\n    // If I were going to create a deployed version of the app, I would create a DB and save the data there.\n    // I also set this condition --> localStorage.getItem(\"reminders\").length < 2 --> because if the array is empty, the length === 2\n    if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\n      localStorage.setItem(\"reminders\", JSON.stringify([{\n        id: 0,\n        medication: \"\",\n        dose: \"\",\n        days: [],\n        timesPerDay: 0,\n        times: [],\n        submitted: false\n      }]));\n    }\n\n    const reminderList = localStorage.getItem(\"reminders\");\n    const parsed = JSON.parse(reminderList);\n    const mostRecent = parsed[parsed.length - 1];\n    mostRecent.timesPerDay = parseInt(data.times);\n    parsed[parsed.length - 1] = mostRecent;\n    localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n    fetch(\"http://localhost:3000/add-reminder/days/nums/times\").then(resp => {\n      window.location = \"http://localhost:3000/add-reminder/days/nums/times\";\n    });\n  }; // I added these because without it, all the autofill elements were showing up as selected\n\n\n  const [timesValue, setTimesValue] = useState(null);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 2,\n      sx: stackSx,\n      children: /*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        separator: /*#__PURE__*/_jsxDEV(NavigateNextIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 32\n        }, this),\n        \"aria-label\": \"breadcrumb\",\n        children: breadcrumbs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      noValidate: true,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: boxSx,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: typographySx,\n          variant: \"h4\",\n          children: \"How many times a day do you take your medicine?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"times\",\n          control: control,\n          render: _ref => {\n            let {\n              field: {\n                ref,\n                ...field\n              },\n              fieldState: {\n                error\n              }\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(Autocomplete, { ...field,\n              autoHighlight: true,\n              disableClearable: true,\n              disablePortal: true,\n              isOptionEqualToValue: (option, value) => value.label === option.label,\n              id: \"times-autocomplete\",\n              onChange: (event, value) => {\n                field.onChange(value.label);\n                setTimesValue(value);\n              },\n              options: timesSuggestions,\n              value: timesValue,\n              sx: autoCompleteSx,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                error: !!error,\n                helperText: error === null || error === void 0 ? void 0 : error.message,\n                id: \"times\",\n                label: \"Number of Times\",\n                name: \"times\",\n                type: \"search\",\n                inputRef: ref,\n                ...params\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            href: \"/add-reminder/days\",\n            children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {\n              sx: iconButtonSx\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 59\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: !formState.isValid,\n            type: \"submit\",\n            children: /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n              sx: iconButtonSx\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddReminder3, \"C9T+xqvXHFN/xaCJvqeLMD8OHE0=\", false, function () {\n  return [useForm];\n});\n\n_c = AddReminder3;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddReminder3\");","map":{"version":3,"sources":["/Users/valeriehosler/Desktop/Github/React-Medi-App/src/Components/AddReminder3.js"],"names":["useState","useForm","Controller","yupResolver","Yup","ArrowBackIcon","ArrowForwardIcon","Box","Breadcrumbs","Button","Container","Link","NavigateNextIcon","Stack","Typography","Autocomplete","TextField","timesSuggestions","label","validationSchema","object","shape","times","string","required","AddReminder3","autoCompleteSx","width","boxSx","mb","alignItems","display","flexDirection","ml","mr","iconButtonSx","fontSize","linkSx","color","stackSx","typographySx","textAlign","breadcrumbs","handleSubmit","control","formState","mode","resolver","onSubmit","data","localStorage","getItem","length","setItem","JSON","stringify","id","medication","dose","days","timesPerDay","submitted","reminderList","parsed","parse","mostRecent","parseInt","fetch","then","resp","window","location","timesValue","setTimesValue","field","ref","fieldState","error","option","value","event","onChange","params","message","isValid"],"mappings":"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","sourcesContent":["import {useState} from \"react\";\nimport {useForm, Controller} from \"react-hook-form\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\n\n// Material UI Components\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport Box from \"@mui/material/Box\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport Link from \"@mui/material/Link\";\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport TextField from \"@mui/material/TextField\";\n\nconst timesSuggestions = [\n    {label: \"1\"},\n    {label: \"2\"},\n    {label: \"3\"},\n    {label: \"4\"},\n    {label: \"5\"},\n    {label: \"6\"},\n    {label: \"7\"},\n    {label: \"8\"},\n    {label: \"9\"},\n    {label: \"10\"},\n    {label: \"More than 10\"}\n];\n\nconst validationSchema = Yup.object().shape({\n    times: Yup.string()\n        .required(\"Times are required\")\n});\n\nexport default function AddReminder3() {\n    // Styles\n    const autoCompleteSx = {\n        width: \"100%\"\n    };\n\n    const boxSx = {\n        \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        ml: \"50px\",\n        mr: \"50px\",\n    };\n\n    const iconButtonSx = {\n        fontSize: 75,\n        ml: 2.5,\n        mr: 2.5\n    };\n\n    const linkSx = {\n        color: \"#1976d2\"\n    };\n\n    const stackSx = {\n        mb: 5\n    };\n\n    const typographySx = {\n        mb: 5,\n        textAlign: \"center\"\n    };\n\n    const breadcrumbs = [\n        <Link key=\"1\" underline=\"hover\" color=\"inherit\" href=\"/add-reminder\" sx={linkSx}>\n            Name & Dose\n        </Link>,\n        <Link key=\"2\" underline=\"hover\" color=\"inherit\" href=\"/add-reminder/days\" sx={linkSx}>\n            Days of Week\n        </Link>,\n        <Typography key=\"3\" color=\"text.primary\">\n            # of Times\n        </Typography>\n    ];\n\n    const {handleSubmit, control, formState} = useForm({\n        mode: \"onChange\",\n        resolver: yupResolver(validationSchema)\n    });\n\n    const onSubmit = (data) => {\n        // This saves the reminder into a local session storage for the purposes of displaying the reminders on another page.\n        // If I were going to create a deployed version of the app, I would create a DB and save the data there.\n        // I also set this condition --> localStorage.getItem(\"reminders\").length < 2 --> because if the array is empty, the length === 2\n        if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\n            localStorage.setItem(\"reminders\", JSON.stringify([{\n                id: 0,\n                medication: \"\",\n                dose: \"\",\n                days: [],\n                timesPerDay: 0,\n                times: [],\n                submitted: false\n            }]));\n        }\n\n        const reminderList = localStorage.getItem(\"reminders\");\n        const parsed = JSON.parse(reminderList);\n        const mostRecent = parsed[parsed.length - 1];\n        mostRecent.timesPerDay = parseInt(data.times);\n        parsed[parsed.length - 1] = mostRecent;\n        localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n\n        fetch(\"http://localhost:3000/add-reminder/days/nums/times\")\n            .then((resp) => {\n                window.location = \"http://localhost:3000/add-reminder/days/nums/times\";\n            });\n\n    };\n\n    // I added these because without it, all the autofill elements were showing up as selected\n    const [timesValue, setTimesValue] = useState(null);\n\n    return (\n        <Container>\n            <Stack spacing={2} sx={stackSx}>\n                <Breadcrumbs\n                    separator={<NavigateNextIcon fontSize=\"small\"/>}\n                    aria-label=\"breadcrumb\"\n                >\n                    {breadcrumbs}\n                </Breadcrumbs>\n            </Stack>\n\n            <form onSubmit={handleSubmit(onSubmit)} noValidate>\n                <Box sx={boxSx}>\n                    <Typography sx={typographySx} variant=\"h4\">\n                        How many times a day do you take your medicine?\n                    </Typography>\n\n                    <Controller\n                        name=\"times\"\n                        control={control}\n                        render={({field: {ref, ...field}, fieldState: {error}}) => (\n                            <Autocomplete\n                                {...field}\n                                autoHighlight\n                                disableClearable\n                                disablePortal\n                                isOptionEqualToValue={(option, value) => value.label === option.label}\n                                id=\"times-autocomplete\"\n                                onChange={(event, value) => {\n                                    field.onChange(value.label);\n                                    setTimesValue(value);\n                                }}\n                                options={timesSuggestions}\n                                value={timesValue}\n                                sx={autoCompleteSx}\n                                renderInput={(params) => (\n                                    <TextField\n                                        required\n                                        error={!!error}\n                                        helperText={error?.message}\n                                        id=\"times\"\n                                        label=\"Number of Times\"\n                                        name=\"times\"\n                                        type=\"search\"\n                                        inputRef={ref}\n                                        {...params}\n                                    />\n                                )}\n                            />\n                        )}\n                    />\n\n                    <Box>\n                        <Button href=\"/add-reminder/days\"><ArrowBackIcon sx={iconButtonSx}/></Button>\n\n                        <Button disabled={!formState.isValid}\n                                type=\"submit\"><ArrowForwardIcon sx={iconButtonSx}/></Button>\n                    </Box>\n                </Box>\n            </form>\n        </Container>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}