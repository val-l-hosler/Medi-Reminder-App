{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\React-Medi-App\\\\src\\\\Components\\\\DisplayMedications.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useCallback, forwardRef } from \"react\"; // Material UI Components\n\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Container from \"@mui/material/Container\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Dialog from \"@mui/material/Dialog\";\nimport Slide from \"@mui/material/Slide\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transition = /*#__PURE__*/forwardRef(_c = function Transition(props, ref) {\n  return /*#__PURE__*/_jsxDEV(Slide, {\n    direction: \"up\",\n    ref: ref,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 12\n  }, this);\n});\n_c2 = Transition;\nexport default function DisplayMedications() {\n  _s();\n\n  const [, updateState] = useState();\n  const forceUpdate = useCallback(() => updateState({}), []);\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  function deleteMedication(medicationId, parsedMedications) {\n    if (parsedMedications.length > 1) {\n      parsedMedications.splice(medicationId, 1);\n    } else {\n      parsedMedications = [];\n    }\n\n    localStorage.setItem(\"medications\", JSON.stringify(parsedMedications));\n    forceUpdate();\n  }\n\n  const buttonSx = {\n    borderRadius: 0,\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"50%\"\n  };\n  const cardSx = {\n    bgcolor: \"#eaeef3\",\n    boxShadow: 3,\n    m: 5\n  };\n  const typographyMedicationSx = {\n    textAlign: \"left\"\n  };\n  let medications; // I also set this condition --> localStorage.getItem(\"medications\").length < 2 --> because if the array is empty, the length === 2\n\n  if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\n    let medicationList = localStorage.getItem(\"medications\");\n    let parsed = JSON.parse(medicationList);\n    medications = parsed.map(medication => {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          sx: cardSx,\n          children: [/*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              sx: typographyMedicationSx,\n              variant: \"h5\",\n              children: [\"Medication: \", medication.medication]\n            }, medication.medication.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              sx: typographyMedicationSx,\n              variant: \"h5\",\n              children: [\"Dose: \", medication.dose, \" mg\"]\n            }, medication.dose.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              size: \"large\",\n              sx: buttonSx,\n              variant: \"contained\",\n              children: \"Edit Dose\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleClickOpen,\n              color: \"error\",\n              size: \"large\",\n              sx: buttonSx,\n              variant: \"contained\",\n              children: \"Delete Med\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Dialog, {\n            fullScreen: true,\n            open: open,\n            onClose: handleClose,\n            TransitionComponent: Transition,\n            children: [/*#__PURE__*/_jsxDEV(AppBar, {\n              sx: {\n                position: \"relative\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Toolbar, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  sx: {\n                    ml: 2,\n                    flex: 1\n                  },\n                  variant: \"h6\",\n                  component: \"div\",\n                  children: \"Confirm Deletion\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"start\",\n                  color: \"inherit\",\n                  onClick: handleClose,\n                  \"aria-label\": \"close\",\n                  children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 110,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              sx: {\n                m: 5\n              },\n              children: \" Are you sure you want to delete the medication? \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => deleteMedication(medication.id, parsed),\n                size: \"large\",\n                sx: buttonSX,\n                variant: \"contained\",\n                children: \"Delete med\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, medication.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this);\n    });\n  } else {\n    medications = /*#__PURE__*/_jsxDEV(Card, {\n      sx: cardSx,\n      variant: \"outlined\",\n      children: [/*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          sx: typographyMedicationSx,\n          variant: \"h5\",\n          children: \"No medications are registered.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          href: \"/add-medication\",\n          size: \"large\",\n          sx: Object.assign(buttonSx, {\n            width: \"100%\"\n          }),\n          variant: \"contained\",\n          children: \"Register med\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: medications\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DisplayMedications, \"2F+vEYjEmVknPigQ8ySwvV8EPC4=\");\n\n_c3 = DisplayMedications;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Transition$forwardRef\");\n$RefreshReg$(_c2, \"Transition\");\n$RefreshReg$(_c3, \"DisplayMedications\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/React-Medi-App/src/Components/DisplayMedications.js"],"names":["useState","useCallback","forwardRef","AppBar","Box","Button","Card","CardContent","CloseIcon","Container","IconButton","Toolbar","Typography","Dialog","Slide","Transition","props","ref","DisplayMedications","updateState","forceUpdate","open","setOpen","handleClickOpen","handleClose","deleteMedication","medicationId","parsedMedications","length","splice","localStorage","setItem","JSON","stringify","buttonSx","borderRadius","fontSize","height","width","cardSx","bgcolor","boxShadow","m","typographyMedicationSx","textAlign","medications","getItem","medicationList","parsed","parse","map","medication","id","dose","position","ml","flex","buttonSX","Object","assign","flexDirection"],"mappings":"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","sourcesContent":["import {useState, useCallback, forwardRef} from \"react\";\r\n\r\n// Material UI Components\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Container from \"@mui/material/Container\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport Slide from \"@mui/material/Slide\";\r\n\r\nconst Transition = forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function DisplayMedications() {\r\n    const [, updateState] = useState();\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    function deleteMedication(medicationId, parsedMedications) {\r\n        if (parsedMedications.length > 1) {\r\n            parsedMedications.splice(medicationId, 1);\r\n        } else {\r\n            parsedMedications = [];\r\n        }\r\n\r\n        localStorage.setItem(\"medications\", JSON.stringify(parsedMedications));\r\n        forceUpdate();\r\n    }\r\n\r\n    const buttonSx = {\r\n        borderRadius: 0,\r\n        fontSize: \"17px\",\r\n        height: \"5.75ch\",\r\n        width: \"50%\"\r\n    };\r\n\r\n    const cardSx = {\r\n        bgcolor: \"#eaeef3\",\r\n        boxShadow: 3,\r\n        m: 5\r\n    };\r\n\r\n    const typographyMedicationSx = {\r\n        textAlign: \"left\"\r\n    };\r\n\r\n    let medications;\r\n\r\n    // I also set this condition --> localStorage.getItem(\"medications\").length < 2 --> because if the array is empty, the length === 2\r\n    if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\r\n        let medicationList = localStorage.getItem(\"medications\");\r\n        let parsed = JSON.parse(medicationList);\r\n\r\n        medications = parsed.map((medication) => {\r\n            return (\r\n                <Box key={medication.id}>\r\n                    <Card sx={cardSx}>\r\n                        <CardContent>\r\n                            <Typography key={medication.medication.id} sx={typographyMedicationSx} variant=\"h5\">\r\n                                Medication: {medication.medication}\r\n                            </Typography>\r\n                            <Typography key={medication.dose.id} sx={typographyMedicationSx} variant=\"h5\">\r\n                                Dose: {medication.dose} mg\r\n                            </Typography>\r\n                        </CardContent>\r\n                        <Box>\r\n                            <Button size=\"large\" sx={buttonSx} variant=\"contained\">Edit Dose</Button>\r\n                            <Button onClick={handleClickOpen} color=\"error\"\r\n                                    size=\"large\"\r\n                                    sx={buttonSx} variant=\"contained\">Delete\r\n                                Med</Button>\r\n                        </Box>\r\n                    </Card>\r\n\r\n                    <Box>\r\n                        <Dialog\r\n                            fullScreen\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            TransitionComponent={Transition}\r\n                        >\r\n                            <AppBar sx={{position: \"relative\"}}>\r\n                                <Toolbar>\r\n                                    <Typography sx={{ml: 2, flex: 1}} variant=\"h6\" component=\"div\">\r\n                                        Confirm Deletion\r\n                                    </Typography>\r\n                                    <IconButton\r\n                                        edge=\"start\"\r\n                                        color=\"inherit\"\r\n                                        onClick={handleClose}\r\n                                        aria-label=\"close\"\r\n                                    >\r\n                                        <CloseIcon/>\r\n                                    </IconButton>\r\n                                </Toolbar>\r\n                            </AppBar>\r\n\r\n                            <Typography variant=\"h5\" sx={{m: 5}}> Are you sure you want to delete the\r\n                                medication? </Typography>\r\n\r\n                            <Box>\r\n                                <Button onClick={() => deleteMedication(medication.id, parsed)} size=\"large\"\r\n                                        sx={buttonSX}\r\n                                        variant=\"contained\">Delete med</Button>\r\n                            </Box>\r\n                        </Dialog>\r\n                    </Box>\r\n                </Box>\r\n            )\r\n        });\r\n    } else {\r\n        medications =\r\n            <Card sx={cardSx} variant=\"outlined\">\r\n                <CardContent>\r\n                    <Typography sx={typographyMedicationSx} variant=\"h5\">\r\n                        No medications are registered.\r\n                    </Typography>\r\n                </CardContent>\r\n                <Box>\r\n                    <Button href=\"/add-medication\" size=\"large\" sx={Object.assign(buttonSx, {width: \"100%\"})}\r\n                            variant=\"contained\">Register\r\n                        med</Button>\r\n                </Box>\r\n            </Card>\r\n        ;\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Box style={{flexDirection: \"column\"}}>\r\n                {medications}\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}