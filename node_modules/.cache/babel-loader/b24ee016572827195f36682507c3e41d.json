{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\Medi-Reminder-App\\\\src\\\\Components\\\\Registered Reminders\\\\DisplayReminders.js\",\n    _s2 = $RefreshSig$();\n\n/*\r\nTHIS SHOULD BE SPLIT UP!!!\r\nOVER TIME, I WILL REFACTOR THIS SO IT IS SPLIT INTO MULTIPLE COMPONENTS\r\n */\nimport { useCallback, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\nimport { v4 as uuidv4 } from \"uuid\"; // Material UI Components\n\nimport AddIcon from \"@mui/icons-material/AddCircle\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Container from \"@mui/material/Container\";\nimport IconButton from \"@mui/material/IconButton\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport Typography from \"@mui/material/Typography\";\nimport Chip from \"@mui/material/Chip\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\"; // Custom Components\n\nimport NoRegisteredReminders from \"./NoRegisteredReminders.js\";\nimport SingleDayInput from \"../Inputs/SingleDayInput.js\";\nimport TimeInput from \"../Inputs/TimeInput.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object().shape({\n  days: Yup.string().required(\"Days of the week are required\")\n}); // Styles\n\nconst boxSx = {\n  \"& .MuiTextField-root\": {\n    mb: 5,\n    width: \"100%\"\n  },\n  alignItems: \"center\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  ml: 5,\n  mr: 5\n};\nconst buttonSx = {\n  borderRadius: 0,\n  fontSize: \"17px\",\n  height: \"5.75ch\",\n  width: \"100%\"\n};\nconst cardSx = {\n  bgcolor: \"#eeeeee\",\n  boxShadow: 3,\n  mb: 5,\n  mt: 5\n};\nconst containerSx = {\n  pl: 5,\n  pr: 5,\n  width: \"100%\"\n};\nconst confirmationButtonSx = {\n  borderRadius: 0,\n  fontSize: \"17px\",\n  height: \"5.75ch\",\n  width: \"50%\"\n};\nconst chipSx = {\n  fontSize: 17,\n  mb: 0.75,\n  mr: 1.5,\n  mt: 0.75\n};\nconst dialogBoxSx = {\n  width: \"75vw\"\n};\nconst dialogTitleSx = {\n  p: 3\n};\nconst dialogTypographySx = {\n  mb: 5,\n  ml: 5,\n  mr: 5\n};\nconst iconButtonSx = {\n  position: \"absolute\",\n  right: 8,\n  top: 8,\n  color: theme => theme.palette.grey[500]\n};\nconst typographyChipSx = {\n  m: 1.5\n};\nconst typographySx = {\n  m: 1.5\n};\nexport default function DisplayReminders() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // This is the array of reminder objects that will be displayed on the cards\n  const reminderList = localStorage.getItem(\"reminders\");\n  let parsed = JSON.parse(reminderList);\n\n  if (parsed !== null) {\n    parsed = parsed.filter(index => index.submitted === true);\n  } // This forces the component to re-render\n\n\n  const [, updateState] = useState();\n  const forceUpdate = useCallback(() => updateState({}), []);\n\n  const ChipList = params => {\n    if (params.objKey === \"times\") {\n      params.arr.sort((a, b) => {\n        return new Date('1970/01/01 ' + a) - new Date('1970/01/01 ' + b);\n      });\n    } else {\n      params.arr.sort();\n    }\n\n    let everyDayFlag = false;\n    let everyDayObj;\n\n    for (const index of params.arr) {\n      if (index === \"Every day\") {\n        everyDayFlag = true;\n        everyDayObj = index;\n        break;\n      }\n    }\n\n    let unique;\n\n    if (!everyDayFlag) {\n      unique = [...new Set(params.arr)];\n    } else {\n      unique = [everyDayObj];\n\n      if (params.arr.length > 1) {\n        // This adds \"Every day\" to the beginning of the arr\n        params.arr.unshift(\"Every day\"); // This removes all the other days\n\n        params.arr.splice(1);\n        parsed.forEach((index, i) => {\n          if (index.id === params.id) {\n            // This resets the appropriate object's key/value pair with the updated list\n            parsed[i][params.objKey] = params.arr;\n          }\n        });\n        localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n      }\n    }\n\n    return unique.map((chip, uIndex) => {\n      const chipKey = \"Chip_\" + uuidv4();\n\n      const handleDelete = (key, i) => {\n        console.log(params.arr, key, i, parsed); // This removes the appropriate index from the array that is passed into the params\n\n        params.arr.splice(i, 1); // parsed.forEach((parsedIndex, j) => {\n        //     if (parsedIndex.id === key) {\n        //         // This resets the appropriate object's key/value pair with the updated list\n        //         parsed[j][params.objKey] = params.arr;\n        //     }\n        // });\n        //\n        // localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n        // This forces the reminder list to re-render\n\n        forceUpdate();\n      };\n\n      return /*#__PURE__*/_jsxDEV(Chip, {\n        onDelete: () => handleDelete(chipKey, uIndex),\n        sx: chipSx,\n        label: chip\n      }, chipKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this);\n    });\n  }; // This is the Reminder component that is displayed including a card, reminder info, and a delete reminder button\n\n\n  const Reminder = _ref => {\n    _s();\n\n    let {\n      reminder\n    } = _ref;\n\n    const getThisReminder = (reminderId, parsedReminders) => {\n      let index;\n      parsedReminders.forEach((pReminder, i) => {\n        if (pReminder.id === reminderId) {\n          index = i;\n        }\n      });\n      return [parsedReminders[index], index];\n    }; // This handles the add day dialog\n\n\n    const [openAddDay, setOpenAddDay] = useState(false);\n\n    const handleClickAddDay = () => {\n      setOpenAddDay(true);\n    };\n\n    const handleCloseAddDay = () => {\n      setOpenAddDay(false);\n    }; // This needs to be inside the component or else an unmounted component error displays in the console\n    // This controls the add day form\n\n\n    const {\n      control: controlAddDay,\n      handleSubmit: handleSubmitAddDay,\n      formState: formStateAddDay\n    } = useForm({\n      mode: \"onChange\",\n      resolver: yupResolver(validationSchema)\n    }); // Function that is triggered when the add day(s) form is submitted\n\n    const addDay = (reminderId, parsedReminders, data) => {\n      const thisReminder = getThisReminder(reminderId, parsedReminders)[0];\n      const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\n      thisReminder.days = [...thisReminder.days, data.days];\n      parsed[thisReminderIndex] = thisReminder;\n      localStorage.setItem(\"reminders\", JSON.stringify(parsed)); // This forces the dialog to close\n\n      setOpenAddDay(false); // This forces the reminder list to re-render\n\n      forceUpdate();\n    }; // This handles the add time dialog\n\n\n    const [openAddTime, setOpenAddTime] = useState(false);\n\n    const handleClickAddTime = () => {\n      setOpenAddTime(true);\n    };\n\n    const handleCloseAddTime = () => {\n      setOpenAddTime(false);\n    }; // This needs to be inside the component or else an unmounted component error displays in the console\n    // This controls the add time form\n\n\n    const {\n      control: controlAddTime,\n      handleSubmit: handleSubmitAddTime,\n      setValue: setValueAddTime,\n      register: registerAddTime,\n      getValues: getValuesAddTime\n    } = useForm(); // Function that is triggered when the add time form is submitted\n\n    const addTime = (reminderId, parsedReminders, data) => {\n      const thisReminder = getThisReminder(reminderId, parsedReminders)[0];\n      const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\n      let time;\n      Object.values(data).forEach(value => {\n        const val = value.toString();\n        const sliced = val.slice(16, 21);\n        let finalTime;\n\n        if (sliced.charAt(0) === \"0\" && sliced.charAt(1) === \"0\") {\n          // this catches 12:00 - 12:59 am\n          finalTime = \"12\" + sliced.slice(2) + \" am\";\n        } else if (sliced.charAt(0) === \"0\" && sliced.charAt(1) !== \"0\") {\n          // this catches 1:00 - 9:59 am\n          finalTime = sliced.slice(1) + \" am\";\n        } else if (sliced.charAt(0) === \"1\" && (sliced.charAt(1) === \"0\" || sliced.charAt(1) === \"1\")) {\n          // this catches 10:00 - 11:59 am\n          finalTime = sliced + \" am\";\n        } else if (sliced.charAt(0) === \"1\" && sliced.charAt(1) === \"2\") {\n          // this catches 12:00 - 12:59 pm\n          finalTime = sliced + \" pm\";\n        } else {\n          // this catches 1:00 pm and later\n          const newSliced = sliced.slice(0, 2);\n          finalTime = parseInt(newSliced) - 12 + sliced.slice(2) + \" pm\";\n        }\n\n        time = finalTime;\n      });\n      thisReminder.time = [...thisReminder.time, time];\n      parsed[thisReminderIndex] = thisReminder;\n      localStorage.setItem(\"reminders\", JSON.stringify(parsed)); // This forces the dialog to close\n\n      setOpenAddTime(false); // This forces the reminder list to re-render\n\n      forceUpdate();\n    }; // This handles the delete medication confirmation dialog\n\n\n    const [openDelete, setOpenDelete] = useState(false);\n\n    const handleClickOpenDelete = () => {\n      setOpenDelete(true);\n    };\n\n    const handleCloseDelete = () => {\n      setOpenDelete(false);\n    }; // Function for the delete reminder button\n\n\n    const deleteReminder = (reminderId, parsedReminders) => {\n      const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\n\n      if (parsedReminders.length > 1) {\n        // This removes the appropriate index of the array of reminder objects\n        parsedReminders.splice(thisReminderIndex, 1);\n      } else {\n        parsedReminders = [];\n      }\n\n      localStorage.setItem(\"reminders\", JSON.stringify(parsedReminders)); // This forces the dialog to close\n\n      setOpenDelete(false); // This forces the reminder list to re-render\n\n      forceUpdate();\n    }; // This is what is rendered for the Reminder component\n\n\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        sx: cardSx,\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographySx,\n            variant: \"h5\",\n            children: [\"Medication: \", reminder.medication]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographySx,\n            variant: \"h5\",\n            children: [\"Dose: \", reminder.dose]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyChipSx,\n            variant: \"h5\",\n            children: [\"Days: \", /*#__PURE__*/_jsxDEV(ChipList, {\n              id: reminder.id,\n              arr: reminder.days,\n              objKey: \"days\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              color: \"primary\",\n              onDelete: handleClickAddDay,\n              deleteIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 94\n              }, this),\n              sx: chipSx,\n              label: \"Add day(s)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyChipSx,\n            variant: \"h5\",\n            children: [\"Times: \", /*#__PURE__*/_jsxDEV(ChipList, {\n              id: reminder.id,\n              arr: reminder.time,\n              objKey: \"times\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 36\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              color: \"primary\",\n              onDelete: handleClickAddTime,\n              deleteIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 95\n              }, this),\n              sx: chipSx,\n              label: \"Add time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClickOpenDelete,\n          color: \"error\",\n          size: \"large\",\n          sx: buttonSx,\n          variant: \"contained\",\n          children: \"Delete Reminder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openAddDay,\n        onClose: handleCloseAddDay,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          sx: dialogTitleSx,\n          children: handleCloseAddDay ? /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"close\",\n            onClick: handleCloseAddDay,\n            sx: iconButtonSx,\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: dialogBoxSx,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmitAddDay(data => addDay(reminder.id, parsed, data)),\n            noValidate: true,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: boxSx,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                sx: dialogTypographySx,\n                variant: \"h5\",\n                children: \"Add day(s)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(SingleDayInput, {\n                control: controlAddDay,\n                variant: \"outlined\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                disabled: !formStateAddDay.isValid,\n                size: \"large\",\n                sx: { ...buttonSx,\n                  mb: 5\n                },\n                type: \"submit\",\n                variant: \"contained\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openAddTime,\n        onClose: handleCloseAddTime,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          sx: dialogTitleSx,\n          children: handleCloseAddTime ? /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"close\",\n            onClick: handleCloseAddTime,\n            sx: iconButtonSx,\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: dialogBoxSx,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmitAddTime(data => addTime(reminder.id, parsed, data)),\n            noValidate: true,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: boxSx,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                sx: dialogTypographySx,\n                variant: \"h5\",\n                children: \"Add time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n                dateAdapter: AdapterDateFns,\n                children: /*#__PURE__*/_jsxDEV(TimeInput, {\n                  setValue: setValueAddTime,\n                  getValues: getValuesAddTime,\n                  register: registerAddTime,\n                  control: controlAddTime,\n                  counter: \"\",\n                  variant: \"outlined\"\n                }, \"AddTime_\" + reminder.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 422,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"large\",\n                sx: { ...buttonSx,\n                  mb: 5\n                },\n                type: \"submit\",\n                variant: \"contained\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openDelete,\n        onClose: handleCloseDelete,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: dialogBoxSx,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              m: 5\n            },\n            children: [\" Do you want to delete the reminder for \", reminder.dose, \" of \", reminder.medication, \"? \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => deleteReminder(reminder.id, parsed),\n              size: \"large\",\n              sx: confirmationButtonSx,\n              variant: \"contained\",\n              children: \"Yes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleCloseDelete,\n              color: \"error\",\n              size: \"large\",\n              sx: confirmationButtonSx,\n              variant: \"contained\",\n              children: \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this);\n  }; // End Reminder component\n\n\n  _s(Reminder, \"JkJOFGXKC6MPRpnfR36riFWM1rc=\", false, function () {\n    return [useForm, useForm];\n  });\n\n  let reminders;\n\n  if (parsed !== null && parsed.length > 0) {\n    reminders = parsed.map(reminder => {\n      return /*#__PURE__*/_jsxDEV(Reminder, {\n        reminder: reminder\n      }, \"Reminder_\" + reminder.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 21\n      }, this);\n    });\n  } else {\n    reminders = /*#__PURE__*/_jsxDEV(NoRegisteredReminders, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 21\n    }, this);\n  } // This is the actual final block of code that is rendered for this component\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: containerSx,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: reminders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 469,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(DisplayReminders, \"X5rEjsBNP/fh1FQA6Gy+z8f0U8w=\");\n\n_c = DisplayReminders;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayReminders\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/Medi-Reminder-App/src/Components/Registered Reminders/DisplayReminders.js"],"names":["useCallback","useState","useForm","yupResolver","Yup","v4","uuidv4","AddIcon","Box","Card","CardContent","CloseIcon","Container","IconButton","LocalizationProvider","Typography","Chip","Button","Dialog","DialogTitle","AdapterDateFns","NoRegisteredReminders","SingleDayInput","TimeInput","validationSchema","object","shape","days","string","required","boxSx","mb","width","alignItems","display","flexDirection","ml","mr","buttonSx","borderRadius","fontSize","height","cardSx","bgcolor","boxShadow","mt","containerSx","pl","pr","confirmationButtonSx","chipSx","dialogBoxSx","dialogTitleSx","p","dialogTypographySx","iconButtonSx","position","right","top","color","theme","palette","grey","typographyChipSx","m","typographySx","DisplayReminders","reminderList","localStorage","getItem","parsed","JSON","parse","filter","index","submitted","updateState","forceUpdate","ChipList","params","objKey","arr","sort","a","b","Date","everyDayFlag","everyDayObj","unique","Set","length","unshift","splice","forEach","i","id","setItem","stringify","map","chip","uIndex","chipKey","handleDelete","key","console","log","Reminder","reminder","getThisReminder","reminderId","parsedReminders","pReminder","openAddDay","setOpenAddDay","handleClickAddDay","handleCloseAddDay","control","controlAddDay","handleSubmit","handleSubmitAddDay","formState","formStateAddDay","mode","resolver","addDay","data","thisReminder","thisReminderIndex","openAddTime","setOpenAddTime","handleClickAddTime","handleCloseAddTime","controlAddTime","handleSubmitAddTime","setValue","setValueAddTime","register","registerAddTime","getValues","getValuesAddTime","addTime","time","Object","values","value","val","toString","sliced","slice","finalTime","charAt","newSliced","parseInt","openDelete","setOpenDelete","handleClickOpenDelete","handleCloseDelete","deleteReminder","medication","dose","isValid","reminders"],"mappings":"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","sourcesContent":["/*\r\nTHIS SHOULD BE SPLIT UP!!!\r\nOVER TIME, I WILL REFACTOR THIS SO IT IS SPLIT INTO MULTIPLE COMPONENTS\r\n */\r\n\r\nimport {useCallback, useState} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\n// Material UI Components\r\nimport AddIcon from \"@mui/icons-material/AddCircle\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Container from \"@mui/material/Container\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\n\r\n// Custom Components\r\nimport NoRegisteredReminders from \"./NoRegisteredReminders.js\";\r\nimport SingleDayInput from \"../Inputs/SingleDayInput.js\";\r\nimport TimeInput from \"../Inputs/TimeInput.js\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    days: Yup.string()\r\n        .required(\"Days of the week are required\")\r\n});\r\n\r\n// Styles\r\nconst boxSx = {\r\n    \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    ml: 5,\r\n    mr: 5\r\n};\r\n\r\nconst buttonSx = {\r\n    borderRadius: 0,\r\n    fontSize: \"17px\",\r\n    height: \"5.75ch\",\r\n    width: \"100%\"\r\n};\r\n\r\nconst cardSx = {\r\n    bgcolor: \"#eeeeee\",\r\n    boxShadow: 3,\r\n    mb: 5,\r\n    mt: 5\r\n};\r\n\r\nconst containerSx = {\r\n    pl: 5,\r\n    pr: 5,\r\n    width: \"100%\"\r\n};\r\n\r\nconst confirmationButtonSx = {\r\n    borderRadius: 0,\r\n    fontSize: \"17px\",\r\n    height: \"5.75ch\",\r\n    width: \"50%\"\r\n};\r\n\r\nconst chipSx = {\r\n    fontSize: 17,\r\n    mb: 0.75,\r\n    mr: 1.5,\r\n    mt: 0.75\r\n};\r\n\r\nconst dialogBoxSx = {\r\n    width: \"75vw\"\r\n};\r\n\r\nconst dialogTitleSx = {\r\n    p: 3\r\n};\r\n\r\nconst dialogTypographySx = {\r\n    mb: 5,\r\n    ml: 5,\r\n    mr: 5\r\n};\r\n\r\nconst iconButtonSx = {\r\n    position: \"absolute\",\r\n    right: 8,\r\n    top: 8,\r\n    color: (theme) => theme.palette.grey[500]\r\n};\r\n\r\nconst typographyChipSx = {\r\n    m: 1.5\r\n};\r\n\r\nconst typographySx = {\r\n    m: 1.5\r\n};\r\n\r\nexport default function DisplayReminders() {\r\n    // This is the array of reminder objects that will be displayed on the cards\r\n    const reminderList = localStorage.getItem(\"reminders\");\r\n    let parsed = JSON.parse(reminderList);\r\n\r\n    if (parsed !== null) {\r\n        parsed = parsed.filter((index) => index.submitted === true);\r\n    }\r\n\r\n    // This forces the component to re-render\r\n    const [, updateState] = useState();\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n\r\n    const ChipList = (params) => {\r\n        if (params.objKey === \"times\") {\r\n            params.arr.sort((a, b) => {\r\n                return new Date('1970/01/01 ' + a) - new Date('1970/01/01 ' + b);\r\n            });\r\n        } else {\r\n            params.arr.sort();\r\n        }\r\n\r\n        let everyDayFlag = false;\r\n        let everyDayObj;\r\n\r\n        for (const index of params.arr) {\r\n            if (index === \"Every day\") {\r\n                everyDayFlag = true;\r\n                everyDayObj = index;\r\n                break;\r\n            }\r\n        }\r\n\r\n        let unique;\r\n\r\n        if (!everyDayFlag) {\r\n            unique = [...new Set(params.arr)];\r\n        } else {\r\n            unique = [everyDayObj];\r\n\r\n            if (params.arr.length > 1) {\r\n                // This adds \"Every day\" to the beginning of the arr\r\n                params.arr.unshift(\"Every day\");\r\n                // This removes all the other days\r\n                params.arr.splice(1);\r\n\r\n                parsed.forEach((index, i) => {\r\n                    if (index.id === params.id) {\r\n                        // This resets the appropriate object's key/value pair with the updated list\r\n                        parsed[i][params.objKey] = params.arr;\r\n                    }\r\n                });\r\n\r\n                localStorage.setItem(\"reminders\", JSON.stringify(parsed));\r\n            }\r\n        }\r\n\r\n        return (unique.map((chip, uIndex) => {\r\n            const chipKey = \"Chip_\" + uuidv4();\r\n\r\n            const handleDelete = (key, i) => {\r\n\r\n                console.log(params.arr, key, i, parsed);\r\n\r\n\r\n                // This removes the appropriate index from the array that is passed into the params\r\n                params.arr.splice(i, 1);\r\n\r\n                // parsed.forEach((parsedIndex, j) => {\r\n                //     if (parsedIndex.id === key) {\r\n                //         // This resets the appropriate object's key/value pair with the updated list\r\n                //         parsed[j][params.objKey] = params.arr;\r\n                //     }\r\n                // });\r\n                //\r\n                // localStorage.setItem(\"reminders\", JSON.stringify(parsed));\r\n\r\n                // This forces the reminder list to re-render\r\n                forceUpdate();\r\n            };\r\n\r\n            return (<Chip onDelete={() => handleDelete(chipKey, uIndex)} sx={chipSx} key={chipKey}\r\n                          label={chip}/>);\r\n        }));\r\n    };\r\n\r\n    // This is the Reminder component that is displayed including a card, reminder info, and a delete reminder button\r\n    const Reminder = ({reminder}) => {\r\n        const getThisReminder = (reminderId, parsedReminders) => {\r\n            let index;\r\n\r\n            parsedReminders.forEach((pReminder, i) => {\r\n                if (pReminder.id === reminderId) {\r\n                    index = i;\r\n                }\r\n            });\r\n\r\n            return [parsedReminders[index], index];\r\n        };\r\n\r\n        // This handles the add day dialog\r\n        const [openAddDay, setOpenAddDay] = useState(false);\r\n        const handleClickAddDay = () => {\r\n            setOpenAddDay(true);\r\n        };\r\n        const handleCloseAddDay = () => {\r\n            setOpenAddDay(false);\r\n        };\r\n\r\n        // This needs to be inside the component or else an unmounted component error displays in the console\r\n        // This controls the add day form\r\n        const {\r\n            control: controlAddDay,\r\n            handleSubmit: handleSubmitAddDay,\r\n            formState: formStateAddDay\r\n        } = useForm({\r\n            mode: \"onChange\",\r\n            resolver: yupResolver(validationSchema)\r\n        });\r\n\r\n        // Function that is triggered when the add day(s) form is submitted\r\n        const addDay = (reminderId, parsedReminders, data) => {\r\n            const thisReminder = getThisReminder(reminderId, parsedReminders)[0];\r\n            const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\r\n            thisReminder.days = [...thisReminder.days, data.days];\r\n            parsed[thisReminderIndex] = thisReminder;\r\n            localStorage.setItem(\"reminders\", JSON.stringify(parsed));\r\n\r\n            // This forces the dialog to close\r\n            setOpenAddDay(false);\r\n\r\n            // This forces the reminder list to re-render\r\n            forceUpdate();\r\n        };\r\n\r\n        // This handles the add time dialog\r\n        const [openAddTime, setOpenAddTime] = useState(false);\r\n        const handleClickAddTime = () => {\r\n            setOpenAddTime(true);\r\n        };\r\n        const handleCloseAddTime = () => {\r\n            setOpenAddTime(false);\r\n        };\r\n\r\n        // This needs to be inside the component or else an unmounted component error displays in the console\r\n        // This controls the add time form\r\n        const {\r\n            control: controlAddTime,\r\n            handleSubmit: handleSubmitAddTime,\r\n            setValue: setValueAddTime,\r\n            register: registerAddTime,\r\n            getValues: getValuesAddTime\r\n        } = useForm();\r\n\r\n        // Function that is triggered when the add time form is submitted\r\n        const addTime = (reminderId, parsedReminders, data) => {\r\n            const thisReminder = getThisReminder(reminderId, parsedReminders)[0];\r\n            const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\r\n            let time;\r\n\r\n            Object.values(data).forEach((value) => {\r\n                const val = value.toString();\r\n                const sliced = val.slice(16, 21);\r\n                let finalTime;\r\n\r\n                if (sliced.charAt(0) === \"0\" && sliced.charAt(1) === \"0\") { // this catches 12:00 - 12:59 am\r\n                    finalTime = \"12\" + sliced.slice(2) + \" am\";\r\n                } else if (sliced.charAt(0) === \"0\" && sliced.charAt(1) !== \"0\") { // this catches 1:00 - 9:59 am\r\n                    finalTime = sliced.slice(1) + \" am\";\r\n                } else if (sliced.charAt(0) === \"1\" && (sliced.charAt(1) === \"0\" || sliced.charAt(1) === \"1\")) { // this catches 10:00 - 11:59 am\r\n                    finalTime = sliced + \" am\";\r\n                } else if (sliced.charAt(0) === \"1\" && sliced.charAt(1) === \"2\") { // this catches 12:00 - 12:59 pm\r\n                    finalTime = sliced + \" pm\";\r\n                } else { // this catches 1:00 pm and later\r\n                    const newSliced = sliced.slice(0, 2);\r\n                    finalTime = (parseInt(newSliced) - 12) + sliced.slice(2) + \" pm\";\r\n                }\r\n\r\n                time = finalTime;\r\n            });\r\n\r\n            thisReminder.time = [...thisReminder.time, time];\r\n            parsed[thisReminderIndex] = thisReminder;\r\n            localStorage.setItem(\"reminders\", JSON.stringify(parsed));\r\n\r\n            // This forces the dialog to close\r\n            setOpenAddTime(false);\r\n\r\n            // This forces the reminder list to re-render\r\n            forceUpdate();\r\n        };\r\n\r\n        // This handles the delete medication confirmation dialog\r\n        const [openDelete, setOpenDelete] = useState(false);\r\n        const handleClickOpenDelete = () => {\r\n            setOpenDelete(true);\r\n        };\r\n        const handleCloseDelete = () => {\r\n            setOpenDelete(false);\r\n        };\r\n\r\n        // Function for the delete reminder button\r\n        const deleteReminder = (reminderId, parsedReminders) => {\r\n            const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\r\n\r\n            if (parsedReminders.length > 1) {\r\n                // This removes the appropriate index of the array of reminder objects\r\n                parsedReminders.splice(thisReminderIndex, 1);\r\n            } else {\r\n                parsedReminders = [];\r\n            }\r\n\r\n            localStorage.setItem(\"reminders\", JSON.stringify(parsedReminders));\r\n\r\n            // This forces the dialog to close\r\n            setOpenDelete(false);\r\n\r\n            // This forces the reminder list to re-render\r\n            forceUpdate();\r\n        };\r\n\r\n        // This is what is rendered for the Reminder component\r\n        return (\r\n            <Box>\r\n                <Card sx={cardSx}>\r\n                    <CardContent>\r\n                        <Typography sx={typographySx} variant=\"h5\">\r\n                            Medication: {reminder.medication}\r\n                        </Typography>\r\n                        <Typography sx={typographySx} variant=\"h5\">\r\n                            Dose: {reminder.dose}\r\n                        </Typography>\r\n                        <Typography sx={typographyChipSx} variant=\"h5\">\r\n                            Days: <ChipList id={reminder.id} arr={reminder.days} objKey={\"days\"}/>\r\n                            {/* Note: the onDelete creates the icon in the appropriate spot and there isn't an onAdd option */}\r\n                            <Chip color={\"primary\"} onDelete={handleClickAddDay} deleteIcon={<AddIcon/>} sx={chipSx}\r\n                                  label={\"Add day(s)\"}/>\r\n                        </Typography>\r\n                        <Typography sx={typographyChipSx} variant=\"h5\">\r\n                            Times: <ChipList id={reminder.id} arr={reminder.time} objKey={\"times\"}/>\r\n                            {/* Note: the onDelete creates the icon in the appropriate spot and there isn't an onAdd option */}\r\n                            <Chip color={\"primary\"} onDelete={handleClickAddTime} deleteIcon={<AddIcon/>} sx={chipSx}\r\n                                  label={\"Add time\"}/>\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <Button onClick={handleClickOpenDelete} color=\"error\"\r\n                            size=\"large\"\r\n                            sx={buttonSx} variant=\"contained\">Delete Reminder</Button>\r\n                </Card>\r\n\r\n                {/* Add day dialog */}\r\n                <Dialog\r\n                    keepMounted={true}\r\n                    open={openAddDay}\r\n                    onClose={handleCloseAddDay}\r\n                >\r\n                    <DialogTitle sx={dialogTitleSx}>\r\n                        {handleCloseAddDay ? (\r\n                            <IconButton\r\n                                aria-label=\"close\"\r\n                                onClick={handleCloseAddDay}\r\n                                sx={iconButtonSx}\r\n                            >\r\n                                <CloseIcon/>\r\n                            </IconButton>\r\n                        ) : null}\r\n                    </DialogTitle>\r\n\r\n                    <Box sx={dialogBoxSx}>\r\n                        <form onSubmit={handleSubmitAddDay((data) => addDay(reminder.id, parsed, data))} noValidate>\r\n                            <Box sx={boxSx}>\r\n                                <Typography sx={dialogTypographySx} variant=\"h5\">\r\n                                    Add day(s)\r\n                                </Typography>\r\n\r\n                                <SingleDayInput control={controlAddDay} variant={\"outlined\"}/>\r\n\r\n                                <Button disabled={!formStateAddDay.isValid} size=\"large\" sx={{...buttonSx, mb: 5}}\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\">Submit</Button>\r\n                            </Box>\r\n                        </form>\r\n                    </Box>\r\n                </Dialog>\r\n\r\n                {/* Add time dialog */}\r\n                <Dialog\r\n                    keepMounted={true}\r\n                    open={openAddTime}\r\n                    onClose={handleCloseAddTime}\r\n                >\r\n                    <DialogTitle sx={dialogTitleSx}>\r\n                        {handleCloseAddTime ? (\r\n                            <IconButton\r\n                                aria-label=\"close\"\r\n                                onClick={handleCloseAddTime}\r\n                                sx={iconButtonSx}\r\n                            >\r\n                                <CloseIcon/>\r\n                            </IconButton>\r\n                        ) : null}\r\n                    </DialogTitle>\r\n\r\n                    <Box sx={dialogBoxSx}>\r\n                        <form onSubmit={handleSubmitAddTime((data) => addTime(reminder.id, parsed, data))} noValidate>\r\n                            <Box sx={boxSx}>\r\n                                <Typography sx={dialogTypographySx} variant=\"h5\">\r\n                                    Add time\r\n                                </Typography>\r\n\r\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                    <TimeInput setValue={setValueAddTime} getValues={getValuesAddTime}\r\n                                               register={registerAddTime} control={controlAddTime}\r\n                                               counter={\"\"} key={\"AddTime_\" + reminder.id} variant={\"outlined\"}/>\r\n                                </LocalizationProvider>\r\n                                <Button size=\"large\" sx={{...buttonSx, mb: 5}} type=\"submit\"\r\n                                        variant=\"contained\">Submit</Button>\r\n                            </Box>\r\n                        </form>\r\n                    </Box>\r\n                </Dialog>\r\n\r\n                {/* Delete reminder confirmation dialog */}\r\n                <Dialog\r\n                    keepMounted={true}\r\n                    open={openDelete}\r\n                    onClose={handleCloseDelete}\r\n                >\r\n                    <Box sx={dialogBoxSx}>\r\n                        <Typography variant=\"h5\" sx={{m: 5}}> Do you want to delete the reminder\r\n                            for {reminder.dose} of {reminder.medication}? </Typography>\r\n\r\n                        <Box>\r\n                            <Button onClick={() => deleteReminder(reminder.id, parsed)}\r\n                                    size=\"large\"\r\n                                    sx={confirmationButtonSx} variant=\"contained\">Yes</Button>\r\n                            <Button onClick={handleCloseDelete} color=\"error\"\r\n                                    size=\"large\"\r\n                                    sx={confirmationButtonSx} variant=\"contained\">No</Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Dialog>\r\n            </Box>\r\n        )\r\n    }; // End Reminder component\r\n\r\n    let reminders;\r\n\r\n    if (parsed !== null && parsed.length > 0) {\r\n        reminders = parsed.map((reminder) => {\r\n            return (<Reminder reminder={reminder} key={\"Reminder_\" + reminder.id}/>)\r\n        });\r\n    } else {\r\n        reminders = <NoRegisteredReminders/>;\r\n    }\r\n\r\n    // This is the actual final block of code that is rendered for this component\r\n    return (\r\n        <Container sx={containerSx}>\r\n            <Box style={{flexDirection: \"column\"}}>\r\n                {reminders}\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}