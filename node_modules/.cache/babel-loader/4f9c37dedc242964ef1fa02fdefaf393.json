{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\Medi-Reminder-App\\\\src\\\\Components\\\\Inputs\\\\DaysInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Controller } from \"react-hook-form\"; // Material UI Components\n\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initOptions = [{\n  label: \"Every day\",\n  disabled: false\n}, {\n  label: \"Monday\",\n  disabled: false\n}, {\n  label: \"Tuesday\",\n  disabled: false\n}, {\n  label: \"Wednesday\",\n  disabled: false\n}, {\n  label: \"Thursday\",\n  disabled: false\n}, {\n  label: \"Friday\",\n  disabled: false\n}, {\n  label: \"Saturday\",\n  disabled: false\n}, {\n  label: \"Sunday\",\n  disabled: false\n}]; // Styles\n\nconst autoCompleteSx = {\n  width: \"100%\"\n};\nexport default function DaysInput(_ref) {\n  _s();\n\n  let {\n    control,\n    variant,\n    setDays\n  } = _ref;\n  const [daysOfWeekSuggestions, setOptions] = useState(initOptions);\n  const [selected, setSelected] = useState([]);\n  setSelected([]);\n\n  if (setDays) {\n    console.log('in here');\n  }\n\n  const onChangeDisabled = (_event, valueArr) => {\n    setSelected(valueArr); // The hook is in conditional statements because no matter what it will be set\n\n    if (valueArr.length === 0) {\n      const resetOptions = [...daysOfWeekSuggestions].map(opt => {\n        opt.disabled = false;\n        return opt;\n      });\n      setOptions(resetOptions);\n    } else {\n      const everyDaySelected = valueArr.find(item => item.label === \"Every day\");\n\n      if (everyDaySelected) {\n        const updatedOptions = [...daysOfWeekSuggestions].map(opt => {\n          opt.disabled = opt.label !== \"Every day\";\n          return opt;\n        });\n        setOptions(updatedOptions);\n      } else {\n        const updatedOptions = [...daysOfWeekSuggestions].map(opt => {\n          opt.disabled = opt.label === \"Every day\";\n          return opt;\n        });\n        setOptions(updatedOptions);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Controller, {\n    name: \"daysOfWeek\",\n    control: control,\n    defaultValue: [],\n    render: _ref2 => {\n      let {\n        field: {\n          ref,\n          ...field\n        },\n        fieldState: {\n          error\n        }\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(Autocomplete, { ...field,\n        autoHighlight: true,\n        disableClearable: true,\n        filterSelectedOptions: true,\n        multiple: true,\n        getOptionDisabled: option => option.disabled,\n        id: \"days-autocomplete\",\n        onChange: (event, value) => {\n          field.onChange(value);\n          onChangeDisabled(event, value);\n        },\n        options: daysOfWeekSuggestions,\n        value: selected,\n        sx: autoCompleteSx,\n        renderInput: tfParams => /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          error: !!error,\n          helperText: error === null || error === void 0 ? void 0 : error.message,\n          id: \"daysOfWeek\",\n          label: \"Day(s)\",\n          name: \"daysOfWeek\",\n          type: \"search\",\n          variant: variant,\n          inputRef: ref,\n          ...tfParams\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DaysInput, \"SxfOuEj5JSqOX4xCstSkc+YLslA=\");\n\n_c = DaysInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"DaysInput\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/Medi-Reminder-App/src/Components/Inputs/DaysInput.js"],"names":["useState","Controller","TextField","Autocomplete","initOptions","label","disabled","autoCompleteSx","width","DaysInput","control","variant","setDays","daysOfWeekSuggestions","setOptions","selected","setSelected","console","log","onChangeDisabled","_event","valueArr","length","resetOptions","map","opt","everyDaySelected","find","item","updatedOptions","field","ref","fieldState","error","option","event","value","onChange","tfParams","message"],"mappings":"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","sourcesContent":["import {useState} from \"react\";\r\nimport {Controller} from \"react-hook-form\";\r\n\r\n// Material UI Components\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\n\r\nconst initOptions = [\r\n    {label: \"Every day\", disabled: false},\r\n    {label: \"Monday\", disabled: false},\r\n    {label: \"Tuesday\", disabled: false},\r\n    {label: \"Wednesday\", disabled: false},\r\n    {label: \"Thursday\", disabled: false},\r\n    {label: \"Friday\", disabled: false},\r\n    {label: \"Saturday\", disabled: false},\r\n    {label: \"Sunday\", disabled: false}\r\n];\r\n\r\n// Styles\r\nconst autoCompleteSx = {\r\n    width: \"100%\"\r\n};\r\n\r\nexport default function DaysInput({control, variant, setDays}) {\r\n    const [daysOfWeekSuggestions, setOptions] = useState(initOptions);\r\n    const [selected, setSelected] = useState([]);\r\n    setSelected([]);\r\n\r\n    if (setDays) {\r\n        console.log('in here')\r\n    }\r\n    const onChangeDisabled = (_event, valueArr) => {\r\n        setSelected(valueArr);\r\n\r\n        // The hook is in conditional statements because no matter what it will be set\r\n        if (valueArr.length === 0) {\r\n            const resetOptions = [...daysOfWeekSuggestions].map((opt) => {\r\n                opt.disabled = false;\r\n                return opt;\r\n            });\r\n\r\n            setOptions(resetOptions);\r\n        } else {\r\n            const everyDaySelected = valueArr.find(\r\n                (item) => item.label === \"Every day\"\r\n            );\r\n\r\n            if (everyDaySelected) {\r\n                const updatedOptions = [...daysOfWeekSuggestions].map((opt) => {\r\n                    opt.disabled = opt.label !== \"Every day\";\r\n                    return opt;\r\n                });\r\n\r\n                setOptions(updatedOptions);\r\n            } else {\r\n                const updatedOptions = [...daysOfWeekSuggestions].map((opt) => {\r\n                    opt.disabled = opt.label === \"Every day\";\r\n                    return opt;\r\n                });\r\n\r\n                setOptions(updatedOptions);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Controller\r\n            name=\"daysOfWeek\"\r\n            control={control}\r\n            defaultValue={[]}\r\n            render={({field: {ref, ...field}, fieldState: {error}}) => (\r\n                <Autocomplete\r\n                    {...field}\r\n                    autoHighlight\r\n                    disableClearable\r\n                    filterSelectedOptions\r\n                    multiple\r\n                    getOptionDisabled={(option) => option.disabled}\r\n                    id=\"days-autocomplete\"\r\n                    onChange={(event, value) => {\r\n                        field.onChange(value);\r\n                        onChangeDisabled(event, value);\r\n                    }}\r\n                    options={daysOfWeekSuggestions}\r\n                    value={selected}\r\n                    sx={autoCompleteSx}\r\n                    renderInput={(tfParams) => (\r\n                        <TextField\r\n                            required\r\n                            error={!!error}\r\n                            helperText={error?.message}\r\n                            id=\"daysOfWeek\"\r\n                            label=\"Day(s)\"\r\n                            name=\"daysOfWeek\"\r\n                            type=\"search\"\r\n                            variant={variant}\r\n                            inputRef={ref}\r\n                            {...tfParams}\r\n                        />\r\n                    )}\r\n                />\r\n            )}\r\n        />\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}