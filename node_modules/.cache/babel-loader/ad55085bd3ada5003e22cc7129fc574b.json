{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\React-Medi-App\\\\src\\\\Components\\\\DisplayMedications.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useCallback, forwardRef } from \"react\"; // Material UI Components\n\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Container from \"@mui/material/Container\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Dialog from \"@mui/material/Dialog\";\nimport Slide from \"@mui/material/Slide\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transition = /*#__PURE__*/forwardRef(_c = function Transition(props, ref) {\n  return /*#__PURE__*/_jsxDEV(Slide, {\n    direction: \"up\",\n    ref: ref,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 12\n  }, this);\n});\n_c2 = Transition;\nexport default function DisplayMedications() {\n  _s();\n\n  const [, updateState] = useState();\n  const forceUpdate = useCallback(() => updateState({}), []);\n  const [open, setOpen] = useState(true);\n\n  function confirmDelete(medicationId, parsedMedications) {\n    console.log(\"clicked\");\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(Dialog, {\n        fullScreen: true,\n        open: open,\n        onClose: () => setOpen(false),\n        TransitionComponent: Transition,\n        children: [/*#__PURE__*/_jsxDEV(AppBar, {\n          sx: {\n            position: \"relative\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Toolbar, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                ml: 2,\n                flex: 1\n              },\n              variant: \"h6\",\n              component: \"div\",\n              children: \"Confirm Deletion\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              edge: \"start\",\n              color: \"inherit\",\n              onClick: () => setOpen(false),\n              \"aria-label\": \"close\",\n              children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            m: 5\n          },\n          children: \" Are you sure you want to delete the medication? \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => deleteMedication(medicationId, parsedMedications),\n            size: \"large\",\n            sx: Object.assign(buttonSx, {\n              width: \"100%\"\n            }),\n            variant: \"contained\",\n            children: \"Delete med\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  }\n\n  function deleteMedication(medicationId, parsedMedications) {\n    if (parsedMedications.length > 1) {\n      parsedMedications.splice(medicationId, 1);\n    } else {\n      parsedMedications = [];\n    }\n\n    localStorage.setItem(\"medications\", JSON.stringify(parsedMedications));\n    forceUpdate();\n  }\n\n  const buttonSx = {\n    borderRadius: 0,\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"50%\"\n  };\n  const cardSx = {\n    bgcolor: \"#eaeef3\",\n    boxShadow: 3,\n    m: 5\n  };\n  const typographyMedicationSx = {\n    textAlign: \"left\"\n  };\n  let medications; // I also set this condition --> localStorage.getItem(\"medications\").length < 2 --> because if the array is empty, the length === 2\n\n  if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\n    let medicationList = localStorage.getItem(\"medications\");\n    let parsed = JSON.parse(medicationList);\n    medications = parsed.map(medication => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        sx: cardSx,\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyMedicationSx,\n            variant: \"h5\",\n            children: [\"Medication: \", medication.medication]\n          }, medication.medication.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyMedicationSx,\n            variant: \"h5\",\n            children: [\"Dose: \", medication.dose, \" mg\"]\n          }, medication.dose.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"Edit Dose\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => confirmDelete(medication.id, parsed),\n            color: \"error\",\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"Delete Med\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, medication.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this);\n    });\n  } else {\n    medications = /*#__PURE__*/_jsxDEV(Card, {\n      sx: cardSx,\n      variant: \"outlined\",\n      children: [/*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          sx: typographyMedicationSx,\n          variant: \"h5\",\n          children: \"No medications are registered.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          href: \"/add-medication\",\n          size: \"large\",\n          sx: Object.assign(buttonSx, {\n            width: \"100%\"\n          }),\n          variant: \"contained\",\n          children: \"Register med\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: medications\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DisplayMedications, \"r6C0HUd2J+n46iJYHuMfKaQb0xQ=\");\n\n_c3 = DisplayMedications;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Transition$forwardRef\");\n$RefreshReg$(_c2, \"Transition\");\n$RefreshReg$(_c3, \"DisplayMedications\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/React-Medi-App/src/Components/DisplayMedications.js"],"names":["useState","useCallback","forwardRef","AppBar","Box","Button","Card","CardContent","CloseIcon","Container","IconButton","Toolbar","Typography","Dialog","Slide","Transition","props","ref","DisplayMedications","updateState","forceUpdate","open","setOpen","confirmDelete","medicationId","parsedMedications","console","log","position","ml","flex","m","deleteMedication","Object","assign","buttonSx","width","length","splice","localStorage","setItem","JSON","stringify","borderRadius","fontSize","height","cardSx","bgcolor","boxShadow","typographyMedicationSx","textAlign","medications","getItem","medicationList","parsed","parse","map","medication","id","dose","flexDirection"],"mappings":"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","sourcesContent":["import {useState, useCallback, forwardRef} from \"react\";\r\n\r\n// Material UI Components\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Container from \"@mui/material/Container\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport Slide from \"@mui/material/Slide\";\r\n\r\nconst Transition = forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function DisplayMedications() {\r\n    const [, updateState] = useState();\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n    const [open, setOpen] = useState(true);\r\n\r\n    function confirmDelete(medicationId, parsedMedications) {\r\n        console.log(\"clicked\");\r\n\r\n        return (\r\n            <Box>\r\n                <Dialog\r\n                    fullScreen\r\n                    open={open}\r\n                    onClose={() => setOpen(false)}\r\n                    TransitionComponent={Transition}\r\n                >\r\n                    <AppBar sx={{position: \"relative\"}}>\r\n                        <Toolbar>\r\n                            <Typography sx={{ml: 2, flex: 1}} variant=\"h6\" component=\"div\">\r\n                                Confirm Deletion\r\n                            </Typography>\r\n                            <IconButton\r\n                                edge=\"start\"\r\n                                color=\"inherit\"\r\n                                onClick={() => setOpen(false)}\r\n                                aria-label=\"close\"\r\n                            >\r\n                                <CloseIcon/>\r\n                            </IconButton>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n                    <Typography variant=\"h5\" sx={{m: 5}}> Are you sure you want to delete the medication? </Typography>\r\n\r\n                    <Box>\r\n                        <Button onClick={() => deleteMedication(medicationId, parsedMedications)} size=\"large\"\r\n                                sx={Object.assign(buttonSx, {width: \"100%\"})}\r\n                                variant=\"contained\">Delete med</Button>\r\n                    </Box>\r\n                </Dialog>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    function deleteMedication(medicationId, parsedMedications) {\r\n        if (parsedMedications.length > 1) {\r\n            parsedMedications.splice(medicationId, 1);\r\n        } else {\r\n            parsedMedications = [];\r\n        }\r\n\r\n        localStorage.setItem(\"medications\", JSON.stringify(parsedMedications));\r\n        forceUpdate();\r\n    }\r\n\r\n    const buttonSx = {\r\n        borderRadius: 0,\r\n        fontSize: \"17px\",\r\n        height: \"5.75ch\",\r\n        width: \"50%\"\r\n    };\r\n\r\n    const cardSx = {\r\n        bgcolor: \"#eaeef3\",\r\n        boxShadow: 3,\r\n        m: 5\r\n    };\r\n\r\n    const typographyMedicationSx = {\r\n        textAlign: \"left\"\r\n    };\r\n\r\n    let medications;\r\n\r\n    // I also set this condition --> localStorage.getItem(\"medications\").length < 2 --> because if the array is empty, the length === 2\r\n    if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\r\n        let medicationList = localStorage.getItem(\"medications\");\r\n        let parsed = JSON.parse(medicationList);\r\n\r\n        medications = parsed.map((medication) => {\r\n            return (\r\n                <Card key={medication.id} sx={cardSx}>\r\n                    <CardContent>\r\n                        <Typography key={medication.medication.id} sx={typographyMedicationSx} variant=\"h5\">\r\n                            Medication: {medication.medication}\r\n                        </Typography>\r\n                        <Typography key={medication.dose.id} sx={typographyMedicationSx} variant=\"h5\">\r\n                            Dose: {medication.dose} mg\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <Box>\r\n                        <Button size=\"large\" sx={buttonSx} variant=\"contained\">Edit Dose</Button>\r\n                        <Button onClick={() => confirmDelete(medication.id, parsed)} color=\"error\"\r\n                                size=\"large\"\r\n                                sx={buttonSx} variant=\"contained\">Delete\r\n                            Med</Button>\r\n                    </Box>\r\n                </Card>\r\n            )\r\n        });\r\n    } else {\r\n        medications =\r\n            <Card sx={cardSx} variant=\"outlined\">\r\n                <CardContent>\r\n                    <Typography sx={typographyMedicationSx} variant=\"h5\">\r\n                        No medications are registered.\r\n                    </Typography>\r\n                </CardContent>\r\n                <Box>\r\n                    <Button href=\"/add-medication\" size=\"large\" sx={Object.assign(buttonSx, {width: \"100%\"})}\r\n                            variant=\"contained\">Register\r\n                        med</Button>\r\n                </Box>\r\n            </Card>\r\n        ;\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Box style={{flexDirection: \"column\"}}>\r\n                {medications}\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}