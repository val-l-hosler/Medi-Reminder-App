{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\React-Medi-App\\\\src\\\\Components\\\\AddReminder4.js\",\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\"; // Material UI Components\n\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport Box from \"@mui/material/Box\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport Button from \"@mui/material/Button\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Container from \"@mui/material/Container\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Link from \"@mui/material/Link\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\nimport Stack from \"@mui/material/Stack\";\nimport TimePicker from \"@mui/lab/TimePicker\";\nimport Typography from \"@mui/material/Typography\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Dialog from \"@mui/material/Dialog\";\nimport TextField from \"@mui/material/TextField\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\"; // This identifies if any of the keys in the reminder DS still have a default value\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getDefaultValues(mostRecent) {\n  const flagsObj = {\n    medicationFlag: true,\n    doseFlag: true,\n    daysFlag: true,\n    timesPerDayFlag: true,\n    timesFlag: true\n  };\n\n  if (mostRecent.medication === \"\") {\n    flagsObj.medicationFlag = false;\n  }\n\n  if (mostRecent.dose === \"\") {\n    flagsObj.doseFlag = false;\n  }\n\n  if (mostRecent.days.length === 0) {\n    flagsObj.daysFlag = false;\n  }\n\n  if (mostRecent.timesPerDay === \"\") {\n    flagsObj.timesPerDayFlag = false;\n  }\n\n  if (mostRecent.times.length === 0) {\n    flagsObj.timesFlag = false;\n  }\n\n  const filtered = Object.entries(flagsObj).filter(_ref => {\n    let [key, value] = _ref;\n    let keyReturn = \"\";\n\n    if (value === false) {\n      keyReturn = key.toString();\n    }\n\n    return keyReturn; // returns an array in the form [\"key\", \"value\"}\n  });\n  return filtered.map(arr => arr[0]);\n} // This gets the number of timePicker inputs that need to be created\n\n\nfunction getNumber() {\n  let reminderList = localStorage.getItem(\"reminders\");\n  let parsed = JSON.parse(reminderList);\n  const mostRecent = parsed[parsed.length - 1];\n  return mostRecent.timesPerDay;\n}\n\nfunction getTimes(timeString) {\n  const times = [];\n  Object.values(timeString).forEach(value => {\n    let val = value.toString();\n    times.push(val.slice(16, 24));\n  });\n  return times;\n}\n\nexport default function AddReminder4() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // Styles\n  const boxSx = {\n    \"& .MuiTextField-root\": {\n      mb: 5,\n      width: \"100%\"\n    },\n    alignItems: \"center\",\n    bgcolor: \"background.paper\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    ml: \"50px\",\n    mr: \"50px\"\n  };\n  const dialogTitleSx = {\n    m: 0,\n    p: 3\n  };\n  const iconButtonSx = {\n    fontSize: 75,\n    ml: 2.5,\n    mr: 2.5\n  };\n  const linkSx = {\n    color: \"#1976d2\"\n  };\n  const stackSx = {\n    mb: 5\n  };\n  const breadcrumbs = [/*#__PURE__*/_jsxDEV(Link, {\n    underline: \"hover\",\n    color: \"inherit\",\n    href: \"/add-reminder\",\n    sx: linkSx,\n    children: \"Name & Dose\"\n  }, \"1\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Link, {\n    underline: \"hover\",\n    color: \"inherit\",\n    href: \"/add-reminder/days\",\n    sx: linkSx,\n    children: \"Days of Week\"\n  }, \"2\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Link, {\n    underline: \"hover\",\n    color: \"inherit\",\n    href: \"/add-reminder/days/nums\",\n    sx: linkSx,\n    children: \"# of Times\"\n  }, \"3\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n    color: \"text.primary\",\n    children: \"Times\"\n  }, \"4\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this)];\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const Error = () => {\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      keepMounted: true,\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        sx: dialogTitleSx,\n        children: handleClose ? /*#__PURE__*/_jsxDEV(IconButton, {\n          \"aria-label\": \"close\",\n          onClick: handleClose,\n          sx: iconButtonSx,\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), \"TEST\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this);\n  }; // This solution was inspired by this tutorial: https://rexebin.medium.com/use-material-ui-pickers-with-react-hook-form-3ed5d24d6afc\n\n\n  const TimeInputs = params => {\n    _s();\n\n    let name = \"Time \" + params.counter;\n    const [time, setTime] = useState(new Date(\"2000-01-01T00:00:00\"));\n    const value = getValues(name);\n    useEffect(() => {\n      register(name);\n    }, [name]);\n    useEffect(() => {\n      setTime(value || null);\n    }, [setTime, value]);\n    return /*#__PURE__*/_jsxDEV(Controller, {\n      control: control,\n      name: name,\n      defaultValue: time,\n      render: _ref2 => {\n        let {\n          field: {\n            ref,\n            ...field\n          }\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(TimePicker, { ...field,\n          label: name,\n          value: time,\n          onChange: time => {\n            setValue(name, time, {\n              shouldValidate: true,\n              shouldDirty: true\n            });\n            setTime(time);\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n            id: name,\n            name: name,\n            inputRef: ref,\n            ...params\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this);\n  };\n\n  _s(TimeInputs, \"vYRAdv+PJwxaVk6npiKsn2UdbfY=\");\n\n  const allTimes = [];\n\n  for (let i = 0; i < getNumber(); i++) {\n    allTimes.push( /*#__PURE__*/_jsxDEV(TimeInputs, {\n      counter: i + 1\n    }, \"TimeInputs\" + i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 23\n    }, this));\n  }\n\n  const onSubmit = data => {\n    if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\n      localStorage.setItem(\"reminders\", JSON.stringify([{\n        id: 0,\n        medication: \"\",\n        dose: \"\",\n        days: [],\n        timesPerDay: 0,\n        times: []\n      }]));\n    }\n\n    let reminderList = localStorage.getItem(\"reminders\");\n    let parsed = JSON.parse(reminderList);\n    const mostRecent = parsed[parsed.length - 1];\n    mostRecent.times = getTimes(data);\n    parsed[parsed.length - 1] = mostRecent;\n    localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n\n    if (getDefaultValues(mostRecent).length > 0) {\n      handleOpen();\n    }\n  };\n\n  const {\n    control,\n    handleSubmit,\n    setValue,\n    register,\n    getValues\n  } = useForm();\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 2,\n      sx: stackSx,\n      children: /*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        separator: /*#__PURE__*/_jsxDEV(NavigateNextIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 32\n        }, this),\n        \"aria-label\": \"breadcrumb\",\n        children: breadcrumbs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: boxSx,\n        children: [/*#__PURE__*/_jsxDEV(LocalizationProvider, {\n          dateAdapter: AdapterDateFns,\n          children: allTimes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            href: \"/add-reminder/days/nums\",\n            children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {\n              sx: iconButtonSx\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 64\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n              sx: iconButtonSx\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(AddReminder4, \"fU0TWzHYSXDkRTqkjICRgal2f+A=\", false, function () {\n  return [useForm];\n});\n\n_c = AddReminder4;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddReminder4\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/React-Medi-App/src/Components/AddReminder4.js"],"names":["useState","useEffect","useForm","Controller","ArrowBackIcon","ArrowForwardIcon","Box","Breadcrumbs","Button","CloseIcon","Container","IconButton","Link","LocalizationProvider","NavigateNextIcon","Stack","TimePicker","Typography","DialogTitle","Dialog","TextField","AdapterDateFns","getDefaultValues","mostRecent","flagsObj","medicationFlag","doseFlag","daysFlag","timesPerDayFlag","timesFlag","medication","dose","days","length","timesPerDay","times","filtered","Object","entries","filter","key","value","keyReturn","toString","map","arr","getNumber","reminderList","localStorage","getItem","parsed","JSON","parse","getTimes","timeString","values","forEach","val","push","slice","AddReminder4","boxSx","mb","width","alignItems","bgcolor","display","flexDirection","ml","mr","dialogTitleSx","m","p","iconButtonSx","fontSize","linkSx","color","stackSx","breadcrumbs","open","setOpen","handleOpen","handleClose","Error","TimeInputs","params","name","counter","time","setTime","Date","getValues","register","control","field","ref","setValue","shouldValidate","shouldDirty","allTimes","i","onSubmit","data","setItem","stringify","id","handleSubmit"],"mappings":"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","sourcesContent":["import {useState, useEffect} from \"react\";\r\nimport {useForm, Controller} from \"react-hook-form\";\r\n\r\n// Material UI Components\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Button from \"@mui/material/Button\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Container from \"@mui/material/Container\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Link from \"@mui/material/Link\";\r\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport TimePicker from \"@mui/lab/TimePicker\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\n\r\n// This identifies if any of the keys in the reminder DS still have a default value\r\nfunction getDefaultValues(mostRecent) {\r\n    const flagsObj = {\r\n        medicationFlag: true,\r\n        doseFlag: true,\r\n        daysFlag: true,\r\n        timesPerDayFlag: true,\r\n        timesFlag: true\r\n    }\r\n\r\n    if (mostRecent.medication === \"\") {\r\n        flagsObj.medicationFlag = false;\r\n    }\r\n\r\n    if (mostRecent.dose === \"\") {\r\n        flagsObj.doseFlag = false;\r\n    }\r\n\r\n    if (mostRecent.days.length === 0) {\r\n        flagsObj.daysFlag = false;\r\n    }\r\n\r\n    if (mostRecent.timesPerDay === \"\") {\r\n        flagsObj.timesPerDayFlag = false;\r\n    }\r\n\r\n    if (mostRecent.times.length === 0) {\r\n        flagsObj.timesFlag = false;\r\n    }\r\n\r\n\r\n    const filtered = Object.entries(flagsObj).filter(([key, value]) => {\r\n        let keyReturn = \"\";\r\n\r\n        if (value === false) {\r\n            keyReturn = key.toString();\r\n        }\r\n\r\n        return keyReturn; // returns an array in the form [\"key\", \"value\"}\r\n    });\r\n\r\n    return filtered.map((arr) => arr[0]);\r\n}\r\n\r\n// This gets the number of timePicker inputs that need to be created\r\nfunction getNumber() {\r\n    let reminderList = localStorage.getItem(\"reminders\");\r\n    let parsed = JSON.parse(reminderList);\r\n    const mostRecent = parsed[parsed.length - 1];\r\n    return (mostRecent.timesPerDay);\r\n}\r\n\r\nfunction getTimes(timeString) {\r\n    const times = [];\r\n\r\n    Object.values(timeString).forEach((value) => {\r\n        let val = value.toString();\r\n        times.push(val.slice(16, 24));\r\n    });\r\n\r\n    return (times);\r\n}\r\n\r\nexport default function AddReminder4() {\r\n    // Styles\r\n    const boxSx = {\r\n        \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\r\n        alignItems: \"center\",\r\n        bgcolor: \"background.paper\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        ml: \"50px\",\r\n        mr: \"50px\",\r\n    };\r\n\r\n    const dialogTitleSx = {\r\n        m: 0,\r\n        p: 3\r\n    };\r\n\r\n    const iconButtonSx = {\r\n        fontSize: 75,\r\n        ml: 2.5,\r\n        mr: 2.5\r\n    };\r\n\r\n    const linkSx = {\r\n        color: \"#1976d2\"\r\n    };\r\n\r\n    const stackSx = {\r\n        mb: 5\r\n    };\r\n\r\n    const breadcrumbs = [\r\n        <Link key=\"1\" underline=\"hover\" color=\"inherit\" href=\"/add-reminder\" sx={linkSx}>\r\n            Name & Dose\r\n        </Link>,\r\n        <Link key=\"2\" underline=\"hover\" color=\"inherit\" href=\"/add-reminder/days\" sx={linkSx}>\r\n            Days of Week\r\n        </Link>,\r\n        <Link key=\"3\" underline=\"hover\" color=\"inherit\" href=\"/add-reminder/days/nums\" sx={linkSx}>\r\n            # of Times\r\n        </Link>,\r\n        <Typography key=\"4\" color=\"text.primary\">\r\n            Times\r\n        </Typography>\r\n    ];\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const Error = () => {\r\n        return (\r\n            <Dialog\r\n                keepMounted={true}\r\n                open={open}\r\n                onClose={handleClose}\r\n            >\r\n                <DialogTitle sx={dialogTitleSx}>\r\n                    {handleClose ? (\r\n                        <IconButton\r\n                            aria-label=\"close\"\r\n                            onClick={handleClose}\r\n                            sx={iconButtonSx}\r\n                        >\r\n                            <CloseIcon/>\r\n                        </IconButton>\r\n                    ) : null}\r\n                </DialogTitle>\r\n\r\n                TEST\r\n\r\n            </Dialog>\r\n        );\r\n    };\r\n\r\n    // This solution was inspired by this tutorial: https://rexebin.medium.com/use-material-ui-pickers-with-react-hook-form-3ed5d24d6afc\r\n    const TimeInputs = (params) => {\r\n        let name = \"Time \" + params.counter;\r\n\r\n        const [time, setTime] = useState(new Date(\"2000-01-01T00:00:00\"));\r\n        const value = getValues(name);\r\n\r\n        useEffect(() => {\r\n            register(name);\r\n        }, [name]);\r\n        useEffect(() => {\r\n            setTime(value || null);\r\n        }, [setTime, value]);\r\n\r\n        return (\r\n            <Controller\r\n                control={control}\r\n                name={name}\r\n                defaultValue={time}\r\n                render={({field: {ref, ...field}}) => (\r\n                    <TimePicker\r\n                        {...field}\r\n                        label={name}\r\n                        value={time}\r\n                        onChange={(time) => {\r\n                            setValue(name, time, {shouldValidate: true, shouldDirty: true});\r\n                            setTime(time);\r\n                        }}\r\n                        renderInput={(params) =>\r\n                            <TextField\r\n                                id={name}\r\n                                name={name}\r\n                                inputRef={ref}\r\n                                {...params}\r\n                            />\r\n                        }\r\n                    />\r\n                )}\r\n            />\r\n        );\r\n    };\r\n\r\n    const allTimes = [];\r\n\r\n    for (let i = 0; i < getNumber(); i++) {\r\n        allTimes.push(<TimeInputs counter={i + 1} key={\"TimeInputs\" + i}/>);\r\n    }\r\n\r\n    const onSubmit = (data) => {\r\n        if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\r\n            localStorage.setItem(\"reminders\", JSON.stringify([{\r\n                id: 0,\r\n                medication: \"\",\r\n                dose: \"\",\r\n                days: [],\r\n                timesPerDay: 0,\r\n                times: []\r\n            }]));\r\n        }\r\n\r\n        let reminderList = localStorage.getItem(\"reminders\");\r\n        let parsed = JSON.parse(reminderList);\r\n\r\n        const mostRecent = parsed[parsed.length - 1];\r\n\r\n        mostRecent.times = getTimes(data);\r\n        parsed[parsed.length - 1] = mostRecent;\r\n\r\n        localStorage.setItem(\"reminders\", JSON.stringify(parsed));\r\n\r\n        if (getDefaultValues(mostRecent).length > 0) {\r\n            handleOpen();\r\n        }\r\n    };\r\n\r\n    const {control, handleSubmit, setValue, register, getValues} = useForm();\r\n\r\n    return (\r\n        <Container>\r\n            <Stack spacing={2} sx={stackSx}>\r\n                <Breadcrumbs\r\n                    separator={<NavigateNextIcon fontSize=\"small\"/>}\r\n                    aria-label=\"breadcrumb\"\r\n                >\r\n                    {breadcrumbs}\r\n                </Breadcrumbs>\r\n            </Stack>\r\n\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Box sx={boxSx}>\r\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                        {allTimes}\r\n                    </LocalizationProvider>\r\n\r\n                    <Error/>\r\n\r\n                    <Box>\r\n                        <Button href=\"/add-reminder/days/nums\"><ArrowBackIcon sx={iconButtonSx}/></Button>\r\n\r\n                        <Button type=\"submit\"><ArrowForwardIcon sx={iconButtonSx}/></Button>\r\n                    </Box>\r\n                </Box>\r\n            </form>\r\n        </Container>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}