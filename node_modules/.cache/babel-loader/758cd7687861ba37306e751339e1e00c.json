{"ast":null,"code":"var _jsxFileName = \"/Users/valeriehosler/Desktop/Github/React-Medi-App/src/Components/DisplayReminders.js\";\nimport { useState, useCallback } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport * as Yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Container from \"@mui/material/Container\";\nimport Typography from \"@mui/material/Typography\";\nimport Divider from \"@mui/material/Divider\";\nimport * as React from \"react\";\nimport Chip from \"@mui/material/Chip\"; // Form validation using Yup\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object().shape({\n  dose: Yup.string().required(\"Dose is required\")\n});\nexport default function DisplayReminders() {\n  // Styles\n  const boxSx = {\n    \"& .MuiTextField-root\": {\n      mb: 5,\n      width: \"100%\"\n    },\n    bgcolor: \"background.paper\",\n    ml: \"50px\",\n    mr: \"50px\"\n  };\n  const buttonSx = {\n    borderRadius: 0,\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"50%\"\n  };\n  const cardSx = {\n    bgcolor: \"#eeeeee\",\n    boxShadow: 3,\n    m: 5\n  };\n  const chipSx = {\n    fontSize: 17,\n    mb: 0.75,\n    mr: 1.5,\n    mt: 0.75\n  };\n  const headingTypographySx = {\n    mb: 3.75,\n    textAlign: \"center\"\n  };\n  const typographySx = {\n    mb: 1.5,\n    mt: 1.5\n  }; // This is the array of reminder objects that will be displayed on the cards\n\n  let reminderList = localStorage.getItem(\"reminders\");\n  let parsed = JSON.parse(reminderList);\n\n  const ChipList = params => {\n    return params.arr.map((index, i) => {\n      return /*#__PURE__*/_jsxDEV(Chip, {\n        label: index\n      }, \"Chip\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this);\n    });\n  }; // This is the Medication component that is displayed including a card, medication info, buttons, and dialogs\n\n\n  const Reminder = _ref => {\n    let {\n      reminder\n    } = _ref;\n    // This is what is rendered for the Reminder component\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: cardSx,\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              mb: typographySx.mb\n            },\n            variant: \"h5\",\n            children: [\"Medication: \", reminder.medication]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographySx,\n            variant: \"h5\",\n            children: [\"Dose: \", reminder.dose, \" mg\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            children: [\"Days: \", /*#__PURE__*/_jsxDEV(ChipList, {\n              arr: reminder.days\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 35\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            children: [\"Times: \", /*#__PURE__*/_jsxDEV(ChipList, {\n              sx: chipSx,\n              arr: reminder.times\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  }; // End Reminder component\n\n\n  let reminders; // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\n\n  if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"reminders\").length > 2) {\n    reminders = parsed.map((reminder, index) => {\n      return /*#__PURE__*/_jsxDEV(Reminder, {\n        reminder: reminder\n      }, \"reminder\" + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this);\n    });\n  } else {\n    reminders = /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"No Reminders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }, this);\n  } // This is the actual final block of code that is rendered for this component\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: reminders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n_c = DisplayReminders;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayReminders\");","map":{"version":3,"sources":["/Users/valeriehosler/Desktop/Github/React-Medi-App/src/Components/DisplayReminders.js"],"names":["useState","useCallback","Controller","useForm","Yup","yupResolver","Box","Card","CardContent","Container","Typography","Divider","React","Chip","validationSchema","object","shape","dose","string","required","DisplayReminders","boxSx","mb","width","bgcolor","ml","mr","buttonSx","borderRadius","fontSize","height","cardSx","boxShadow","m","chipSx","mt","headingTypographySx","textAlign","typographySx","reminderList","localStorage","getItem","parsed","JSON","parse","ChipList","params","arr","map","index","i","Reminder","reminder","medication","days","times","reminders","length","flexDirection"],"mappings":"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","sourcesContent":["import {useState, useCallback} from \"react\";\nimport {Controller, useForm} from \"react-hook-form\";\nimport * as Yup from \"yup\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\n\n// Material UI Components\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Container from \"@mui/material/Container\";\nimport Typography from \"@mui/material/Typography\";\nimport Divider from \"@mui/material/Divider\";\nimport * as React from \"react\";\nimport Chip from \"@mui/material/Chip\";\n\n// Form validation using Yup\nconst validationSchema = Yup.object().shape({\n    dose: Yup.string()\n        .required(\"Dose is required\")\n});\n\nexport default function DisplayReminders() {\n    // Styles\n    const boxSx = {\n        \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\n        bgcolor: \"background.paper\",\n        ml: \"50px\",\n        mr: \"50px\"\n    };\n\n    const buttonSx = {\n        borderRadius: 0,\n        fontSize: \"17px\",\n        height: \"5.75ch\",\n        width: \"50%\"\n    };\n\n    const cardSx = {\n        bgcolor: \"#eeeeee\",\n        boxShadow: 3,\n        m: 5\n    };\n\n    const chipSx = {\n        fontSize: 17,\n        mb: 0.75,\n        mr: 1.5,\n        mt: 0.75\n    };\n\n    const headingTypographySx = {\n        mb: 3.75,\n        textAlign: \"center\"\n    };\n\n    const typographySx = {\n        mb: 1.5,\n        mt: 1.5\n    };\n\n    // This is the array of reminder objects that will be displayed on the cards\n    let reminderList = localStorage.getItem(\"reminders\");\n    let parsed = JSON.parse(reminderList);\n\n    const ChipList = (params) => {\n        return (params.arr.map((index, i) => {\n            return (<Chip key={\"Chip\" + i} label={index}/>);\n        }));\n    };\n\n    // This is the Medication component that is displayed including a card, medication info, buttons, and dialogs\n    const Reminder = ({reminder}) => {\n        // This is what is rendered for the Reminder component\n        return (\n            <Box>\n                <Card sx={cardSx}>\n                    <CardContent>\n                        <Typography sx={{mb: typographySx.mb}} variant=\"h5\">\n                            Medication: {reminder.medication}\n                        </Typography>\n                        <Typography sx={typographySx} variant=\"h5\">\n                            Dose: {reminder.dose} mg\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            Days: <ChipList arr={reminder.days}/>\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            Times: <ChipList sx={chipSx} arr={reminder.times}/>\n                        </Typography>\n                    </CardContent>\n                </Card>\n            </Box>\n        )\n    }; // End Reminder component\n\n    let reminders;\n\n    // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\n    if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"reminders\").length > 2) {\n        reminders = parsed.map((reminder, index) => {\n            return (<Reminder reminder={reminder} key={\"reminder\" + index}/>)\n        });\n    } else {\n        reminders = <h1>No Reminders</h1>;\n    }\n\n    // This is the actual final block of code that is rendered for this component\n    return (\n        <Container>\n            <Box style={{flexDirection: \"column\"}}>\n                {reminders}\n            </Box>\n        </Container>\n    );\n}"]},"metadata":{},"sourceType":"module"}