{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\Medi-Reminder-App\\\\src\\\\Components\\\\Registered Reminders\\\\DisplayReminders.js\",\n    _s2 = $RefreshSig$();\n\n/*\r\nTHIS SHOULD BE SPLIT UP!!!\r\nOVER TIME, I WILL REFACTOR THIS SO IT IS SPLIT INTO MULTIPLE COMPONENTS\r\n */\nimport { useCallback, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\"; // Material UI Components\n\nimport AddIcon from \"@mui/icons-material/AddCircle\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Container from \"@mui/material/Container\";\nimport IconButton from \"@mui/material/IconButton\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport Typography from \"@mui/material/Typography\";\nimport Chip from \"@mui/material/Chip\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\"; // Custom Components\n\nimport NoRegisteredReminders from \"./NoRegisteredReminders.js\";\nimport SingleDayInput from \"../Inputs/SingleDayInput.js\";\nimport TimeInput from \"../Inputs/TimeInput.js\";\nimport ChipList from \"./ChipList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object().shape({\n  days: Yup.string().required(\"Days of the week are required\")\n}); // Styles\n\nconst boxSx = {\n  \"& .MuiTextField-root\": {\n    mb: 5,\n    width: \"100%\"\n  },\n  alignItems: \"center\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  ml: 5,\n  mr: 5\n};\nconst buttonSx = {\n  borderRadius: 0,\n  fontSize: \"17px\",\n  height: \"5.75ch\",\n  width: \"100%\"\n};\nconst cardSx = {\n  bgcolor: \"#eeeeee\",\n  boxShadow: 3,\n  mb: 5,\n  mt: 5\n};\nconst containerSx = {\n  pl: 5,\n  pr: 5,\n  width: \"100%\"\n};\nconst confirmationButtonSx = {\n  borderRadius: 0,\n  fontSize: \"17px\",\n  height: \"5.75ch\",\n  width: \"50%\"\n};\nconst chipSx = {\n  fontSize: 17,\n  mb: 0.75,\n  mr: 1.5,\n  mt: 0.75\n};\nconst dialogBoxSx = {\n  width: \"75vw\"\n};\nconst dialogTitleSx = {\n  p: 3\n};\nconst dialogTypographySx = {\n  mb: 5,\n  ml: 5,\n  mr: 5\n};\nconst iconButtonSx = {\n  position: \"absolute\",\n  right: 8,\n  top: 8,\n  color: theme => theme.palette.grey[500]\n};\nconst typographyChipSx = {\n  m: 1.5\n};\nconst typographySx = {\n  m: 1.5\n};\nexport default function DisplayReminders() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // This is the array of reminder objects that will be displayed on the cards\n  const reminderList = localStorage.getItem(\"reminders\");\n  let parsedList = JSON.parse(reminderList); // This checks to make sure that all the displayed reminders are fully complete\n\n  if (parsedList !== null) {\n    parsedList = parsedList.filter(index => index.submitted === true);\n  } // This forces the component to re-render\n\n\n  const [, updateState] = useState();\n  const forceUpdate = useCallback(() => updateState({}), []); // This is the Reminder component that is displayed including a card, reminder info, and a delete reminder button\n\n  const Reminder = _ref => {\n    _s();\n\n    let {\n      reminder\n    } = _ref;\n\n    const getThisReminder = (reminderId, parsedReminders) => {\n      let index;\n\n      for (let i = 0; i < parsedReminders.length; i++) {\n        if (parsedReminders[i].id === reminderId) {\n          index = i;\n          break;\n        }\n      }\n\n      return [parsedReminders[index], index];\n    }; // This handles the add day dialog\n\n\n    const [openAddDay, setOpenAddDay] = useState(false);\n\n    const handleClickAddDay = () => {\n      setOpenAddDay(true);\n    };\n\n    const handleCloseAddDay = () => {\n      setOpenAddDay(false);\n    }; // This needs to be inside the component or else an unmounted component error displays in the console\n    // This controls the add day form\n\n\n    const {\n      control: controlAddDay,\n      handleSubmit: handleSubmitAddDay,\n      formState: formStateAddDay\n    } = useForm({\n      mode: \"onChange\",\n      resolver: yupResolver(validationSchema)\n    }); // Function that is triggered when the add day(s) form is submitted\n\n    const addDay = (reminderId, parsedReminders, data) => {\n      const [thisReminder, thisReminderIndex] = getThisReminder(reminderId, parsedReminders);\n      thisReminder.days = [...thisReminder.days, data.days];\n      parsedList[thisReminderIndex] = thisReminder;\n      localStorage.setItem(\"reminders\", JSON.stringify(parsedList)); // This forces the dialog to close\n\n      setOpenAddDay(false); // This forces the reminder list to re-render\n      // forceUpdate();\n    }; // This handles the add time dialog\n\n\n    const [openAddTime, setOpenAddTime] = useState(false);\n\n    const handleClickAddTime = () => {\n      setOpenAddTime(true);\n    };\n\n    const handleCloseAddTime = () => {\n      setOpenAddTime(false);\n    }; // This needs to be inside the component or else an unmounted component error displays in the console\n    // This controls the add time form\n\n\n    const {\n      control: controlAddTime,\n      handleSubmit: handleSubmitAddTime,\n      setValue: setValueAddTime,\n      register: registerAddTime,\n      getValues: getValuesAddTime\n    } = useForm(); // Function that is triggered when the add time form is submitted\n\n    const addTime = (reminderId, parsedReminders, data) => {\n      const [thisReminder, thisReminderIndex] = getThisReminder(reminderId, parsedReminders);\n      let time;\n      Object.values(data).forEach(value => {\n        const val = value.toString();\n        const sliced = val.slice(16, 21);\n        let finalTime;\n\n        if (sliced.charAt(0) === \"0\" && sliced.charAt(1) === \"0\") {\n          // this catches 12:00 - 12:59 am\n          finalTime = \"12\" + sliced.slice(2) + \" am\";\n        } else if (sliced.charAt(0) === \"0\" && sliced.charAt(1) !== \"0\") {\n          // this catches 1:00 - 9:59 am\n          finalTime = sliced.slice(1) + \" am\";\n        } else if (sliced.charAt(0) === \"1\" && (sliced.charAt(1) === \"0\" || sliced.charAt(1) === \"1\")) {\n          // this catches 10:00 - 11:59 am\n          finalTime = sliced + \" am\";\n        } else if (sliced.charAt(0) === \"1\" && sliced.charAt(1) === \"2\") {\n          // this catches 12:00 - 12:59 pm\n          finalTime = sliced + \" pm\";\n        } else {\n          // this catches 1:00 pm and later\n          const newSliced = sliced.slice(0, 2);\n          finalTime = parseInt(newSliced) - 12 + sliced.slice(2) + \" pm\";\n        }\n\n        time = finalTime;\n      });\n      thisReminder.times = [...thisReminder.times, time];\n      parsedList[thisReminderIndex] = thisReminder;\n      localStorage.setItem(\"reminders\", JSON.stringify(parsedList)); // This forces the dialog to close\n\n      setOpenAddTime(false); // This forces the reminder list to re-render\n\n      forceUpdate();\n    }; // This handles the delete medication confirmation dialog\n\n\n    const [openDelete, setOpenDelete] = useState(false);\n\n    const handleClickOpenDelete = () => {\n      setOpenDelete(true);\n    };\n\n    const handleCloseDelete = () => {\n      setOpenDelete(false);\n    }; // Function for the delete reminder button\n\n\n    const deleteReminder = (reminderId, parsedReminders) => {\n      const [, thisReminderIndex] = getThisReminder(reminderId, parsedReminders);\n\n      if (parsedReminders.length > 0) {\n        // This removes the appropriate index of the array of reminder objects\n        parsedReminders.splice(thisReminderIndex, 1);\n      } else {\n        parsedReminders = [];\n      }\n\n      localStorage.setItem(\"reminders\", JSON.stringify(parsedReminders)); // This forces the dialog to close\n\n      setOpenDelete(false); // This forces the reminder list to re-render\n\n      forceUpdate();\n    }; // This is what is rendered for the Reminder component\n\n\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        sx: cardSx,\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographySx,\n            variant: \"h5\",\n            children: [\"Medication: \", reminder.medication]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographySx,\n            variant: \"h5\",\n            children: [\"Dose: \", reminder.dose]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyChipSx,\n            variant: \"h5\",\n            children: [\"Days: \", /*#__PURE__*/_jsxDEV(ChipList, {\n              parentId: reminder.id,\n              parsedList: parsedList,\n              arr: reminder.days,\n              type: \"days\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              color: \"primary\",\n              onDelete: handleClickAddDay,\n              deleteIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 94\n              }, this),\n              sx: chipSx,\n              label: \"Add day(s)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyChipSx,\n            variant: \"h5\",\n            children: [\"Times: \", /*#__PURE__*/_jsxDEV(ChipList, {\n              parentId: reminder.id,\n              parsedList: parsedList,\n              arr: reminder.times,\n              type: \"times\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 36\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              color: \"primary\",\n              onDelete: handleClickAddTime,\n              deleteIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 95\n              }, this),\n              sx: chipSx,\n              label: \"Add time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClickOpenDelete,\n          color: \"error\",\n          size: \"large\",\n          sx: buttonSx,\n          variant: \"contained\",\n          children: \"Delete Reminder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openAddDay,\n        onClose: handleCloseAddDay,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          sx: dialogTitleSx,\n          children: handleCloseAddDay ? /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"close\",\n            onClick: handleCloseAddDay,\n            sx: iconButtonSx,\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: dialogBoxSx,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmitAddDay(data => addDay(reminder.id, parsedList, data)),\n            noValidate: true,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: boxSx,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                sx: dialogTypographySx,\n                variant: \"h5\",\n                children: \"Add day(s)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(SingleDayInput, {\n                control: controlAddDay,\n                variant: \"outlined\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                disabled: !formStateAddDay.isValid,\n                size: \"large\",\n                sx: { ...buttonSx,\n                  mb: 5\n                },\n                type: \"submit\",\n                variant: \"contained\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openAddTime,\n        onClose: handleCloseAddTime,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          sx: dialogTitleSx,\n          children: handleCloseAddTime ? /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"close\",\n            onClick: handleCloseAddTime,\n            sx: iconButtonSx,\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: dialogBoxSx,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmitAddTime(data => addTime(reminder.id, parsedList, data)),\n            noValidate: true,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: boxSx,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                sx: dialogTypographySx,\n                variant: \"h5\",\n                children: \"Add time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n                dateAdapter: AdapterDateFns,\n                children: /*#__PURE__*/_jsxDEV(TimeInput, {\n                  setValue: setValueAddTime,\n                  getValues: getValuesAddTime,\n                  register: registerAddTime,\n                  control: controlAddTime,\n                  counter: \"\",\n                  variant: \"outlined\"\n                }, \"AddTime_\" + reminder.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 352,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"large\",\n                sx: { ...buttonSx,\n                  mb: 5\n                },\n                type: \"submit\",\n                variant: \"contained\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openDelete,\n        onClose: handleCloseDelete,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: dialogBoxSx,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              m: 5\n            },\n            children: [\" Do you want to delete the reminder for \", reminder.dose, \" of \", reminder.medication, \"? \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => deleteReminder(reminder.id, parsedList),\n              size: \"large\",\n              sx: confirmationButtonSx,\n              variant: \"contained\",\n              children: \"Yes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleCloseDelete,\n              color: \"error\",\n              size: \"large\",\n              sx: confirmationButtonSx,\n              variant: \"contained\",\n              children: \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this);\n  }; // End Reminder component\n\n\n  _s(Reminder, \"JkJOFGXKC6MPRpnfR36riFWM1rc=\", false, function () {\n    return [useForm, useForm];\n  });\n\n  let reminderComps;\n\n  if (parsedList !== null && parsedList.length > 0) {\n    reminderComps = parsedList.map(reminder => {\n      return /*#__PURE__*/_jsxDEV(Reminder, {\n        reminder: reminder\n      }, \"Reminder_\" + reminder.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 21\n      }, this);\n    });\n  } else {\n    reminderComps = /*#__PURE__*/_jsxDEV(NoRegisteredReminders, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 25\n    }, this);\n  } // This is the actual final block of code that is rendered for this component\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: containerSx,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: reminderComps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 399,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(DisplayReminders, \"X5rEjsBNP/fh1FQA6Gy+z8f0U8w=\");\n\n_c = DisplayReminders;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayReminders\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/Medi-Reminder-App/src/Components/Registered Reminders/DisplayReminders.js"],"names":["useCallback","useState","useForm","yupResolver","Yup","AddIcon","Box","Card","CardContent","CloseIcon","Container","IconButton","LocalizationProvider","Typography","Chip","Button","Dialog","DialogTitle","AdapterDateFns","NoRegisteredReminders","SingleDayInput","TimeInput","ChipList","validationSchema","object","shape","days","string","required","boxSx","mb","width","alignItems","display","flexDirection","ml","mr","buttonSx","borderRadius","fontSize","height","cardSx","bgcolor","boxShadow","mt","containerSx","pl","pr","confirmationButtonSx","chipSx","dialogBoxSx","dialogTitleSx","p","dialogTypographySx","iconButtonSx","position","right","top","color","theme","palette","grey","typographyChipSx","m","typographySx","DisplayReminders","reminderList","localStorage","getItem","parsedList","JSON","parse","filter","index","submitted","updateState","forceUpdate","Reminder","reminder","getThisReminder","reminderId","parsedReminders","i","length","id","openAddDay","setOpenAddDay","handleClickAddDay","handleCloseAddDay","control","controlAddDay","handleSubmit","handleSubmitAddDay","formState","formStateAddDay","mode","resolver","addDay","data","thisReminder","thisReminderIndex","setItem","stringify","openAddTime","setOpenAddTime","handleClickAddTime","handleCloseAddTime","controlAddTime","handleSubmitAddTime","setValue","setValueAddTime","register","registerAddTime","getValues","getValuesAddTime","addTime","time","Object","values","forEach","value","val","toString","sliced","slice","finalTime","charAt","newSliced","parseInt","times","openDelete","setOpenDelete","handleClickOpenDelete","handleCloseDelete","deleteReminder","splice","medication","dose","isValid","reminderComps","map"],"mappings":"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","sourcesContent":["/*\r\nTHIS SHOULD BE SPLIT UP!!!\r\nOVER TIME, I WILL REFACTOR THIS SO IT IS SPLIT INTO MULTIPLE COMPONENTS\r\n */\r\n\r\nimport {useCallback, useState} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n\r\n// Material UI Components\r\nimport AddIcon from \"@mui/icons-material/AddCircle\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Container from \"@mui/material/Container\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\n\r\n// Custom Components\r\nimport NoRegisteredReminders from \"./NoRegisteredReminders.js\";\r\nimport SingleDayInput from \"../Inputs/SingleDayInput.js\";\r\nimport TimeInput from \"../Inputs/TimeInput.js\";\r\nimport ChipList from \"./ChipList\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    days: Yup.string()\r\n        .required(\"Days of the week are required\")\r\n});\r\n\r\n// Styles\r\nconst boxSx = {\r\n    \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    ml: 5,\r\n    mr: 5\r\n};\r\n\r\nconst buttonSx = {\r\n    borderRadius: 0,\r\n    fontSize: \"17px\",\r\n    height: \"5.75ch\",\r\n    width: \"100%\"\r\n};\r\n\r\nconst cardSx = {\r\n    bgcolor: \"#eeeeee\",\r\n    boxShadow: 3,\r\n    mb: 5,\r\n    mt: 5\r\n};\r\n\r\nconst containerSx = {\r\n    pl: 5,\r\n    pr: 5,\r\n    width: \"100%\"\r\n};\r\n\r\nconst confirmationButtonSx = {\r\n    borderRadius: 0,\r\n    fontSize: \"17px\",\r\n    height: \"5.75ch\",\r\n    width: \"50%\"\r\n};\r\n\r\nconst chipSx = {\r\n    fontSize: 17,\r\n    mb: 0.75,\r\n    mr: 1.5,\r\n    mt: 0.75\r\n};\r\n\r\nconst dialogBoxSx = {\r\n    width: \"75vw\"\r\n};\r\n\r\nconst dialogTitleSx = {\r\n    p: 3\r\n};\r\n\r\nconst dialogTypographySx = {\r\n    mb: 5,\r\n    ml: 5,\r\n    mr: 5\r\n};\r\n\r\nconst iconButtonSx = {\r\n    position: \"absolute\",\r\n    right: 8,\r\n    top: 8,\r\n    color: (theme) => theme.palette.grey[500]\r\n};\r\n\r\nconst typographyChipSx = {\r\n    m: 1.5\r\n};\r\n\r\nconst typographySx = {\r\n    m: 1.5\r\n};\r\n\r\nexport default function DisplayReminders() {\r\n    // This is the array of reminder objects that will be displayed on the cards\r\n    const reminderList = localStorage.getItem(\"reminders\");\r\n    let parsedList = JSON.parse(reminderList);\r\n\r\n    // This checks to make sure that all the displayed reminders are fully complete\r\n    if (parsedList !== null) {\r\n        parsedList = parsedList.filter((index) => index.submitted === true);\r\n    }\r\n\r\n    // This forces the component to re-render\r\n    const [, updateState] = useState();\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n\r\n    // This is the Reminder component that is displayed including a card, reminder info, and a delete reminder button\r\n    const Reminder = ({reminder}) => {\r\n        const getThisReminder = (reminderId, parsedReminders) => {\r\n            let index;\r\n\r\n            for (let i = 0; i < parsedReminders.length; i++) {\r\n                if (parsedReminders[i].id === reminderId) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return [parsedReminders[index], index];\r\n        };\r\n\r\n        // This handles the add day dialog\r\n        const [openAddDay, setOpenAddDay] = useState(false);\r\n        const handleClickAddDay = () => {\r\n            setOpenAddDay(true);\r\n        };\r\n        const handleCloseAddDay = () => {\r\n            setOpenAddDay(false);\r\n        };\r\n\r\n        // This needs to be inside the component or else an unmounted component error displays in the console\r\n        // This controls the add day form\r\n        const {\r\n            control: controlAddDay,\r\n            handleSubmit: handleSubmitAddDay,\r\n            formState: formStateAddDay\r\n        } = useForm({\r\n            mode: \"onChange\",\r\n            resolver: yupResolver(validationSchema)\r\n        });\r\n\r\n        // Function that is triggered when the add day(s) form is submitted\r\n        const addDay = (reminderId, parsedReminders, data) => {\r\n            const [thisReminder, thisReminderIndex] = getThisReminder(reminderId, parsedReminders);\r\n            thisReminder.days = [...thisReminder.days, data.days];\r\n            parsedList[thisReminderIndex] = thisReminder;\r\n            localStorage.setItem(\"reminders\", JSON.stringify(parsedList));\r\n\r\n            // This forces the dialog to close\r\n            setOpenAddDay(false);\r\n\r\n            // This forces the reminder list to re-render\r\n            // forceUpdate();\r\n        };\r\n\r\n        // This handles the add time dialog\r\n        const [openAddTime, setOpenAddTime] = useState(false);\r\n        const handleClickAddTime = () => {\r\n            setOpenAddTime(true);\r\n        };\r\n        const handleCloseAddTime = () => {\r\n            setOpenAddTime(false);\r\n        };\r\n\r\n        // This needs to be inside the component or else an unmounted component error displays in the console\r\n        // This controls the add time form\r\n        const {\r\n            control: controlAddTime,\r\n            handleSubmit: handleSubmitAddTime,\r\n            setValue: setValueAddTime,\r\n            register: registerAddTime,\r\n            getValues: getValuesAddTime\r\n        } = useForm();\r\n\r\n        // Function that is triggered when the add time form is submitted\r\n        const addTime = (reminderId, parsedReminders, data) => {\r\n            const [thisReminder, thisReminderIndex] = getThisReminder(reminderId, parsedReminders);\r\n            let time;\r\n\r\n            Object.values(data).forEach((value) => {\r\n                const val = value.toString();\r\n                const sliced = val.slice(16, 21);\r\n                let finalTime;\r\n\r\n                if (sliced.charAt(0) === \"0\" && sliced.charAt(1) === \"0\") { // this catches 12:00 - 12:59 am\r\n                    finalTime = \"12\" + sliced.slice(2) + \" am\";\r\n                } else if (sliced.charAt(0) === \"0\" && sliced.charAt(1) !== \"0\") { // this catches 1:00 - 9:59 am\r\n                    finalTime = sliced.slice(1) + \" am\";\r\n                } else if (sliced.charAt(0) === \"1\" && (sliced.charAt(1) === \"0\" || sliced.charAt(1) === \"1\")) { // this catches 10:00 - 11:59 am\r\n                    finalTime = sliced + \" am\";\r\n                } else if (sliced.charAt(0) === \"1\" && sliced.charAt(1) === \"2\") { // this catches 12:00 - 12:59 pm\r\n                    finalTime = sliced + \" pm\";\r\n                } else { // this catches 1:00 pm and later\r\n                    const newSliced = sliced.slice(0, 2);\r\n                    finalTime = (parseInt(newSliced) - 12) + sliced.slice(2) + \" pm\";\r\n                }\r\n\r\n                time = finalTime;\r\n            });\r\n\r\n            thisReminder.times = [...thisReminder.times, time];\r\n            parsedList[thisReminderIndex] = thisReminder;\r\n            localStorage.setItem(\"reminders\", JSON.stringify(parsedList));\r\n\r\n            // This forces the dialog to close\r\n            setOpenAddTime(false);\r\n\r\n            // This forces the reminder list to re-render\r\n            forceUpdate();\r\n        };\r\n\r\n        // This handles the delete medication confirmation dialog\r\n        const [openDelete, setOpenDelete] = useState(false);\r\n        const handleClickOpenDelete = () => {\r\n            setOpenDelete(true);\r\n        };\r\n        const handleCloseDelete = () => {\r\n            setOpenDelete(false);\r\n        };\r\n\r\n        // Function for the delete reminder button\r\n        const deleteReminder = (reminderId, parsedReminders) => {\r\n            const [, thisReminderIndex] = getThisReminder(reminderId, parsedReminders);\r\n\r\n            if (parsedReminders.length > 0) {\r\n                // This removes the appropriate index of the array of reminder objects\r\n                parsedReminders.splice(thisReminderIndex, 1);\r\n            } else {\r\n                parsedReminders = [];\r\n            }\r\n\r\n            localStorage.setItem(\"reminders\", JSON.stringify(parsedReminders));\r\n\r\n            // This forces the dialog to close\r\n            setOpenDelete(false);\r\n\r\n            // This forces the reminder list to re-render\r\n            forceUpdate();\r\n        };\r\n\r\n        // This is what is rendered for the Reminder component\r\n        return (\r\n            <Box>\r\n                <Card sx={cardSx}>\r\n                    <CardContent>\r\n                        <Typography sx={typographySx} variant=\"h5\">\r\n                            Medication: {reminder.medication}\r\n                        </Typography>\r\n                        <Typography sx={typographySx} variant=\"h5\">\r\n                            Dose: {reminder.dose}\r\n                        </Typography>\r\n                        <Typography sx={typographyChipSx} variant=\"h5\">\r\n                            Days: <ChipList parentId={reminder.id} parsedList={parsedList} arr={reminder.days}\r\n                                            type={\"days\"}/>\r\n                            {/* Note: the onDelete creates the icon in the appropriate spot and there isn't an onAdd option */}\r\n                            <Chip color={\"primary\"} onDelete={handleClickAddDay} deleteIcon={<AddIcon/>} sx={chipSx}\r\n                                  label={\"Add day(s)\"}/>\r\n                        </Typography>\r\n                        <Typography sx={typographyChipSx} variant=\"h5\">\r\n                            Times: <ChipList parentId={reminder.id} parsedList={parsedList} arr={reminder.times}\r\n                                             type={\"times\"}/>\r\n                            {/* Note: the onDelete creates the icon in the appropriate spot and there isn't an onAdd option */}\r\n                            <Chip color={\"primary\"} onDelete={handleClickAddTime} deleteIcon={<AddIcon/>} sx={chipSx}\r\n                                  label={\"Add time\"}/>\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <Button onClick={handleClickOpenDelete} color=\"error\"\r\n                            size=\"large\"\r\n                            sx={buttonSx} variant=\"contained\">Delete Reminder</Button>\r\n                </Card>\r\n\r\n                {/* Add day dialog */}\r\n                <Dialog\r\n                    keepMounted={true}\r\n                    open={openAddDay}\r\n                    onClose={handleCloseAddDay}\r\n                >\r\n                    <DialogTitle sx={dialogTitleSx}>\r\n                        {handleCloseAddDay ? (\r\n                            <IconButton\r\n                                aria-label=\"close\"\r\n                                onClick={handleCloseAddDay}\r\n                                sx={iconButtonSx}\r\n                            >\r\n                                <CloseIcon/>\r\n                            </IconButton>\r\n                        ) : null}\r\n                    </DialogTitle>\r\n\r\n                    <Box sx={dialogBoxSx}>\r\n                        <form onSubmit={handleSubmitAddDay((data) => addDay(reminder.id, parsedList, data))} noValidate>\r\n                            <Box sx={boxSx}>\r\n                                <Typography sx={dialogTypographySx} variant=\"h5\">\r\n                                    Add day(s)\r\n                                </Typography>\r\n\r\n                                <SingleDayInput control={controlAddDay} variant={\"outlined\"}/>\r\n\r\n                                <Button disabled={!formStateAddDay.isValid} size=\"large\" sx={{...buttonSx, mb: 5}}\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\">Submit</Button>\r\n                            </Box>\r\n                        </form>\r\n                    </Box>\r\n                </Dialog>\r\n\r\n                {/* Add time dialog */}\r\n                <Dialog\r\n                    keepMounted={true}\r\n                    open={openAddTime}\r\n                    onClose={handleCloseAddTime}\r\n                >\r\n                    <DialogTitle sx={dialogTitleSx}>\r\n                        {handleCloseAddTime ? (\r\n                            <IconButton\r\n                                aria-label=\"close\"\r\n                                onClick={handleCloseAddTime}\r\n                                sx={iconButtonSx}\r\n                            >\r\n                                <CloseIcon/>\r\n                            </IconButton>\r\n                        ) : null}\r\n                    </DialogTitle>\r\n\r\n                    <Box sx={dialogBoxSx}>\r\n                        <form onSubmit={handleSubmitAddTime((data) => addTime(reminder.id, parsedList, data))}\r\n                              noValidate>\r\n                            <Box sx={boxSx}>\r\n                                <Typography sx={dialogTypographySx} variant=\"h5\">\r\n                                    Add time\r\n                                </Typography>\r\n\r\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                    <TimeInput setValue={setValueAddTime} getValues={getValuesAddTime}\r\n                                               register={registerAddTime} control={controlAddTime}\r\n                                               counter={\"\"} key={\"AddTime_\" + reminder.id} variant={\"outlined\"}/>\r\n                                </LocalizationProvider>\r\n                                <Button size=\"large\" sx={{...buttonSx, mb: 5}} type=\"submit\"\r\n                                        variant=\"contained\">Submit</Button>\r\n                            </Box>\r\n                        </form>\r\n                    </Box>\r\n                </Dialog>\r\n\r\n                {/* Delete reminder confirmation dialog */}\r\n                <Dialog\r\n                    keepMounted={true}\r\n                    open={openDelete}\r\n                    onClose={handleCloseDelete}\r\n                >\r\n                    <Box sx={dialogBoxSx}>\r\n                        <Typography variant=\"h5\" sx={{m: 5}}> Do you want to delete the reminder\r\n                            for {reminder.dose} of {reminder.medication}? </Typography>\r\n\r\n                        <Box>\r\n                            <Button onClick={() => deleteReminder(reminder.id, parsedList)}\r\n                                    size=\"large\"\r\n                                    sx={confirmationButtonSx} variant=\"contained\">Yes</Button>\r\n                            <Button onClick={handleCloseDelete} color=\"error\"\r\n                                    size=\"large\"\r\n                                    sx={confirmationButtonSx} variant=\"contained\">No</Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Dialog>\r\n            </Box>\r\n        )\r\n    }; // End Reminder component\r\n\r\n    let reminderComps;\r\n\r\n    if (parsedList !== null && parsedList.length > 0) {\r\n        reminderComps = parsedList.map((reminder) => {\r\n            return (<Reminder reminder={reminder} key={\"Reminder_\" + reminder.id}/>)\r\n        });\r\n    } else {\r\n        reminderComps = <NoRegisteredReminders/>;\r\n    }\r\n\r\n    // This is the actual final block of code that is rendered for this component\r\n    return (\r\n        <Container sx={containerSx}>\r\n            <Box style={{flexDirection: \"column\"}}>\r\n                {reminderComps}\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}