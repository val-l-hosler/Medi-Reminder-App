{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\React-Medi-App\\\\src\\\\Components\\\\MedicationInput.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport TextField from \"@mui/material/TextField\";\nimport Typography from \"@mui/material/Typography\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst doseSuggestions = [{\n  label: \"10\"\n}, {\n  label: \"20\"\n}, {\n  label: \"30\"\n}, {\n  label: \"40\"\n}, {\n  label: \"50\"\n}, {\n  label: \"60\"\n}, {\n  label: \"70\"\n}, {\n  label: \"80\"\n}];\nconst medicationSuggestions = [{\n  label: \"Lisinopril\"\n}, {\n  label: \"Valsartan\"\n}]; // Form validation using Yup\n\nconst validationSchema = Yup.object().shape({\n  medication: Yup.string().required(\"Medication is required\"),\n  dose: Yup.string().required(\"Dose is required\")\n});\nexport default function MedicationInput() {\n  _s();\n\n  const onSubmit = data => {\n    // This saves the medications into a local session storage for the purposes of displaying the medications on another page.\n    // If I were going to create a deployed version of the app, I would create a DB and save the data there.\n    if (localStorage.getItem(\"medications\") === null) {\n      localStorage.setItem(\"medications\", JSON.stringify([{\n        medication: data.medication,\n        dose: data.dose\n      }]));\n    } else {\n      let medicationList = localStorage.getItem(\"medications\");\n      let parsed = JSON.parse(medicationList);\n      parsed.push({\n        medication: data.medication,\n        dose: data.dose\n      });\n      localStorage.setItem(\"medications\", JSON.stringify(parsed));\n    }\n\n    fetch(\"http://localhost:3000/confirmation?medication=\" + data.medication + \"&dose=\" + data.dose).then(resp => {\n      window.location = \"http://localhost:3000/confirmation?medication=\" + data.medication + \"&dose=\" + data.dose;\n    });\n  };\n\n  const {\n    handleSubmit,\n    control,\n    formState\n  } = useForm({\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema)\n  }); //Styles and SX\n\n  const boxSx = {\n    \"& .MuiTextField-root\": {\n      mb: 5,\n      width: \"100%\"\n    },\n    bgcolor: \"background.paper\",\n    ml: \"50px\",\n    mr: \"50px\"\n  };\n  const buttonSx = {\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"100%\"\n  };\n  const typographyMedicationSx = {\n    mb: 4,\n    textAlign: \"center\"\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      noValidate: true,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        sx: typographyMedicationSx,\n        variant: \"h4\",\n        children: \"Add a new medication\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: boxSx,\n        children: [/*#__PURE__*/_jsxDEV(Controller, {\n          name: \"medication\",\n          control: control,\n          defaultValue: \"\",\n          render: _ref => {\n            let {\n              field: {\n                ref,\n                ...field\n              },\n              fieldState: {\n                error\n              }\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(Autocomplete, { ...field,\n              autoHighlight: true,\n              disableClearable: true,\n              isOptionEqualToValue: (option, value) => option.id === value.id,\n              id: \"medication-autocomplete\",\n              onChange: (event, value) => field.onChange(value.label),\n              options: medicationSuggestions,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                error: !!error,\n                helperText: error === null || error === void 0 ? void 0 : error.message,\n                id: \"medication\",\n                label: \"Medication\",\n                name: \"medication\",\n                type: \"search\",\n                inputRef: ref,\n                ...params\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"dose\",\n          control: control,\n          defaultValue: \"\",\n          render: _ref2 => {\n            let {\n              field: {\n                ref,\n                ...field\n              },\n              fieldState: {\n                error\n              }\n            } = _ref2;\n            return /*#__PURE__*/_jsxDEV(Autocomplete, { ...field,\n              autoHighlight: true,\n              disableClearable: true,\n              isOptionEqualToValue: (option, value) => option.id === value.id,\n              id: \"dose-autocomplete\",\n              onChange: (event, value) => field.onChange(value.label),\n              options: doseSuggestions,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                error: !!error,\n                helperText: error === null || error === void 0 ? void 0 : error.message,\n                id: \"dose\",\n                label: \"Dose\",\n                name: \"dose\",\n                type: \"numeric\",\n                inputRef: ref,\n                ...params\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: !formState.isValid,\n          size: \"large\",\n          sx: buttonSx,\n          type: \"submit\",\n          variant: \"contained\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MedicationInput, \"qw4uJ56/71qY3KYVVBgBKHcMt38=\", false, function () {\n  return [useForm];\n});\n\n_c = MedicationInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"MedicationInput\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/React-Medi-App/src/Components/MedicationInput.js"],"names":["React","useForm","Controller","yupResolver","Yup","Box","Button","Container","Autocomplete","TextField","Typography","doseSuggestions","label","medicationSuggestions","validationSchema","object","shape","medication","string","required","dose","MedicationInput","onSubmit","data","localStorage","getItem","setItem","JSON","stringify","medicationList","parsed","parse","push","fetch","then","resp","window","location","handleSubmit","control","formState","mode","resolver","boxSx","mb","width","bgcolor","ml","mr","buttonSx","fontSize","height","typographyMedicationSx","textAlign","field","ref","fieldState","error","option","value","id","event","onChange","params","message","isValid"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,OAAR,EAAiBC,UAAjB,QAAkC,iBAAlC;AACA,SAAQC,WAAR,QAA0B,yBAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AAEA,MAAMC,eAAe,GAAG,CACpB;AAACC,EAAAA,KAAK,EAAE;AAAR,CADoB,EAEpB;AAACA,EAAAA,KAAK,EAAE;AAAR,CAFoB,EAGpB;AAACA,EAAAA,KAAK,EAAE;AAAR,CAHoB,EAIpB;AAACA,EAAAA,KAAK,EAAE;AAAR,CAJoB,EAKpB;AAACA,EAAAA,KAAK,EAAE;AAAR,CALoB,EAMpB;AAACA,EAAAA,KAAK,EAAE;AAAR,CANoB,EAOpB;AAACA,EAAAA,KAAK,EAAE;AAAR,CAPoB,EAQpB;AAACA,EAAAA,KAAK,EAAE;AAAR,CARoB,CAAxB;AAWA,MAAMC,qBAAqB,GAAG,CAC1B;AAACD,EAAAA,KAAK,EAAE;AAAR,CAD0B,EAE1B;AAACA,EAAAA,KAAK,EAAE;AAAR,CAF0B,CAA9B,C,CAKA;;AACA,MAAME,gBAAgB,GAAGV,GAAG,CAACW,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,EAAAA,UAAU,EAAEb,GAAG,CAACc,MAAJ,GACPC,QADO,CACE,wBADF,CAD4B;AAGxCC,EAAAA,IAAI,EAAEhB,GAAG,CAACc,MAAJ,GACDC,QADC,CACQ,kBADR;AAHkC,CAAnB,CAAzB;AAOA,eAAe,SAASE,eAAT,GAA2B;AAAA;;AACtC,QAAMC,QAAQ,GAAIC,IAAD,IAAU;AACvB;AACA;AACA,QAAIC,YAAY,CAACC,OAAb,CAAqB,aAArB,MAAwC,IAA5C,EAAkD;AAC9CD,MAAAA,YAAY,CAACE,OAAb,CAAqB,aAArB,EAAoCC,IAAI,CAACC,SAAL,CAAe,CAAC;AAACX,QAAAA,UAAU,EAAEM,IAAI,CAACN,UAAlB;AAA8BG,QAAAA,IAAI,EAAEG,IAAI,CAACH;AAAzC,OAAD,CAAf,CAApC;AACH,KAFD,MAEO;AACH,UAAIS,cAAc,GAAGL,YAAY,CAACC,OAAb,CAAqB,aAArB,CAArB;AACA,UAAIK,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAWF,cAAX,CAAb;AACAC,MAAAA,MAAM,CAACE,IAAP,CAAY;AAACf,QAAAA,UAAU,EAAEM,IAAI,CAACN,UAAlB;AAA8BG,QAAAA,IAAI,EAAEG,IAAI,CAACH;AAAzC,OAAZ;AACAI,MAAAA,YAAY,CAACE,OAAb,CAAqB,aAArB,EAAoCC,IAAI,CAACC,SAAL,CAAeE,MAAf,CAApC;AACH;;AAEDG,IAAAA,KAAK,CAAC,mDAAmDV,IAAI,CAACN,UAAxD,GAAqE,QAArE,GAAgFM,IAAI,CAACH,IAAtF,CAAL,CACKc,IADL,CACWC,IAAD,IAAU;AACZC,MAAAA,MAAM,CAACC,QAAP,GAAkB,mDAAmDd,IAAI,CAACN,UAAxD,GAAqE,QAArE,GAAgFM,IAAI,CAACH,IAAvG;AACH,KAHL;AAIH,GAhBD;;AAkBA,QAAM;AAACkB,IAAAA,YAAD;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA;AAAxB,MAAqCvC,OAAO,CAAC;AAC/CwC,IAAAA,IAAI,EAAE,UADyC;AAE/CC,IAAAA,QAAQ,EAAEvC,WAAW,CAACW,gBAAD;AAF0B,GAAD,CAAlD,CAnBsC,CAwB1C;;AACI,QAAM6B,KAAK,GAAG;AACV,4BAAwB;AAACC,MAAAA,EAAE,EAAE,CAAL;AAAQC,MAAAA,KAAK,EAAE;AAAf,KADd;AAEVC,IAAAA,OAAO,EAAE,kBAFC;AAGVC,IAAAA,EAAE,EAAE,MAHM;AAIVC,IAAAA,EAAE,EAAE;AAJM,GAAd;AAOA,QAAMC,QAAQ,GAAG;AACbC,IAAAA,QAAQ,EAAE,MADG;AAEbC,IAAAA,MAAM,EAAE,QAFK;AAGbN,IAAAA,KAAK,EAAE;AAHM,GAAjB;AAMA,QAAMO,sBAAsB,GAAG;AAC3BR,IAAAA,EAAE,EAAE,CADuB;AAE3BS,IAAAA,SAAS,EAAE;AAFgB,GAA/B;AAKA,sBACI,QAAC,SAAD;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAEf,YAAY,CAAChB,QAAD,CAA5B;AAAwC,MAAA,UAAU,MAAlD;AAAA,8BACI,QAAC,UAAD;AAAY,QAAA,EAAE,EAAE8B,sBAAhB;AAAwC,QAAA,OAAO,EAAC,IAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,QAAC,GAAD;AACI,QAAA,EAAE,EAAET,KADR;AAAA,gCAII,QAAC,UAAD;AACI,UAAA,IAAI,EAAC,YADT;AAEI,UAAA,OAAO,EAAEJ,OAFb;AAGI,UAAA,YAAY,EAAE,EAHlB;AAII,UAAA,MAAM,EAAE;AAAA,gBAAC;AAACe,cAAAA,KAAK,EAAE;AAACC,gBAAAA,GAAD;AAAM,mBAAGD;AAAT,eAAR;AAAyBE,cAAAA,UAAU,EAAE;AAACC,gBAAAA;AAAD;AAArC,aAAD;AAAA,gCACJ,QAAC,YAAD,OACQH,KADR;AAEI,cAAA,aAAa,MAFjB;AAGI,cAAA,gBAAgB,MAHpB;AAII,cAAA,oBAAoB,EAAE,CAACI,MAAD,EAASC,KAAT,KAAmBD,MAAM,CAACE,EAAP,KAAcD,KAAK,CAACC,EAJjE;AAKI,cAAA,EAAE,EAAC,yBALP;AAMI,cAAA,QAAQ,EAAE,CAACC,KAAD,EAAQF,KAAR,KAAkBL,KAAK,CAACQ,QAAN,CAAeH,KAAK,CAAC/C,KAArB,CANhC;AAOI,cAAA,OAAO,EAAEC,qBAPb;AAQI,cAAA,WAAW,EAAGkD,MAAD,iBACT,QAAC,SAAD;AACI,gBAAA,QAAQ,MADZ;AAEI,gBAAA,KAAK,EAAE,CAAC,CAACN,KAFb;AAGI,gBAAA,UAAU,EAAEA,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEO,OAHvB;AAII,gBAAA,EAAE,EAAC,YAJP;AAKI,gBAAA,KAAK,EAAC,YALV;AAMI,gBAAA,IAAI,EAAC,YANT;AAOI,gBAAA,IAAI,EAAC,QAPT;AAQI,gBAAA,QAAQ,EAAET,GARd;AAAA,mBASQQ;AATR;AAAA;AAAA;AAAA;AAAA;AATR;AAAA;AAAA;AAAA;AAAA,oBADI;AAAA;AAJZ;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAkCI,QAAC,UAAD;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,OAAO,EAAExB,OAFb;AAGI,UAAA,YAAY,EAAE,EAHlB;AAII,UAAA,MAAM,EAAE;AAAA,gBAAC;AAACe,cAAAA,KAAK,EAAE;AAACC,gBAAAA,GAAD;AAAM,mBAAGD;AAAT,eAAR;AAAyBE,cAAAA,UAAU,EAAE;AAACC,gBAAAA;AAAD;AAArC,aAAD;AAAA,gCACJ,QAAC,YAAD,OACQH,KADR;AAEI,cAAA,aAAa,MAFjB;AAGI,cAAA,gBAAgB,MAHpB;AAII,cAAA,oBAAoB,EAAE,CAACI,MAAD,EAASC,KAAT,KAAmBD,MAAM,CAACE,EAAP,KAAcD,KAAK,CAACC,EAJjE;AAKI,cAAA,EAAE,EAAC,mBALP;AAMI,cAAA,QAAQ,EAAE,CAACC,KAAD,EAAQF,KAAR,KAAkBL,KAAK,CAACQ,QAAN,CAAeH,KAAK,CAAC/C,KAArB,CANhC;AAOI,cAAA,OAAO,EAAED,eAPb;AAQI,cAAA,WAAW,EAAGoD,MAAD,iBACT,QAAC,SAAD;AACI,gBAAA,QAAQ,MADZ;AAEI,gBAAA,KAAK,EAAE,CAAC,CAACN,KAFb;AAGI,gBAAA,UAAU,EAAEA,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEO,OAHvB;AAII,gBAAA,EAAE,EAAC,MAJP;AAKI,gBAAA,KAAK,EAAC,MALV;AAMI,gBAAA,IAAI,EAAC,MANT;AAOI,gBAAA,IAAI,EAAC,SAPT;AAQI,gBAAA,QAAQ,EAAET,GARd;AAAA,mBASQQ;AATR;AAAA;AAAA;AAAA;AAAA;AATR;AAAA;AAAA;AAAA;AAAA,oBADI;AAAA;AAJZ;AAAA;AAAA;AAAA;AAAA,gBAlCJ,eAgEI,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAE,CAACvB,SAAS,CAACyB,OAA7B;AAAsC,UAAA,IAAI,EAAC,OAA3C;AAAmD,UAAA,EAAE,EAAEhB,QAAvD;AAAiE,UAAA,IAAI,EAAC,QAAtE;AACQ,UAAA,OAAO,EAAC,WADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhEJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA6EH;;GAxHuB5B,e;UAmBuBpB,O;;;KAnBvBoB,e","sourcesContent":["import * as React from \"react\";\r\nimport {useForm, Controller} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n\r\n// Material UI Components\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst doseSuggestions = [\r\n    {label: \"10\"},\r\n    {label: \"20\"},\r\n    {label: \"30\"},\r\n    {label: \"40\"},\r\n    {label: \"50\"},\r\n    {label: \"60\"},\r\n    {label: \"70\"},\r\n    {label: \"80\"}\r\n];\r\n\r\nconst medicationSuggestions = [\r\n    {label: \"Lisinopril\"},\r\n    {label: \"Valsartan\"}\r\n];\r\n\r\n// Form validation using Yup\r\nconst validationSchema = Yup.object().shape({\r\n    medication: Yup.string()\r\n        .required(\"Medication is required\"),\r\n    dose: Yup.string()\r\n        .required(\"Dose is required\")\r\n});\r\n\r\nexport default function MedicationInput() {\r\n    const onSubmit = (data) => {\r\n        // This saves the medications into a local session storage for the purposes of displaying the medications on another page.\r\n        // If I were going to create a deployed version of the app, I would create a DB and save the data there.\r\n        if (localStorage.getItem(\"medications\") === null) {\r\n            localStorage.setItem(\"medications\", JSON.stringify([{medication: data.medication, dose: data.dose}]));\r\n        } else {\r\n            let medicationList = localStorage.getItem(\"medications\");\r\n            let parsed = JSON.parse(medicationList);\r\n            parsed.push({medication: data.medication, dose: data.dose});\r\n            localStorage.setItem(\"medications\", JSON.stringify(parsed))\r\n        }\r\n\r\n        fetch(\"http://localhost:3000/confirmation?medication=\" + data.medication + \"&dose=\" + data.dose)\r\n            .then((resp) => {\r\n                window.location = \"http://localhost:3000/confirmation?medication=\" + data.medication + \"&dose=\" + data.dose;\r\n            });\r\n    };\r\n\r\n    const {handleSubmit, control, formState} = useForm({\r\n        mode: \"onChange\",\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n\r\n//Styles and SX\r\n    const boxSx = {\r\n        \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\r\n        bgcolor: \"background.paper\",\r\n        ml: \"50px\",\r\n        mr: \"50px\"\r\n    };\r\n\r\n    const buttonSx = {\r\n        fontSize: \"17px\",\r\n        height: \"5.75ch\",\r\n        width: \"100%\"\r\n    };\r\n\r\n    const typographyMedicationSx = {\r\n        mb: 4,\r\n        textAlign: \"center\"\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                <Typography sx={typographyMedicationSx} variant=\"h4\">\r\n                    Add a new medication\r\n                </Typography>\r\n\r\n                <Box\r\n                    sx={boxSx}\r\n                >\r\n\r\n                    <Controller\r\n                        name=\"medication\"\r\n                        control={control}\r\n                        defaultValue={\"\"}\r\n                        render={({field: {ref, ...field}, fieldState: {error}}) => (\r\n                            <Autocomplete\r\n                                {...field}\r\n                                autoHighlight\r\n                                disableClearable\r\n                                isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                                id=\"medication-autocomplete\"\r\n                                onChange={(event, value) => field.onChange(value.label)}\r\n                                options={medicationSuggestions}\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                        required\r\n                                        error={!!error}\r\n                                        helperText={error?.message}\r\n                                        id=\"medication\"\r\n                                        label=\"Medication\"\r\n                                        name=\"medication\"\r\n                                        type=\"search\"\r\n                                        inputRef={ref}\r\n                                        {...params}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        )}\r\n                    />\r\n\r\n                    <Controller\r\n                        name=\"dose\"\r\n                        control={control}\r\n                        defaultValue={\"\"}\r\n                        render={({field: {ref, ...field}, fieldState: {error}}) => (\r\n                            <Autocomplete\r\n                                {...field}\r\n                                autoHighlight\r\n                                disableClearable\r\n                                isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                                id=\"dose-autocomplete\"\r\n                                onChange={(event, value) => field.onChange(value.label)}\r\n                                options={doseSuggestions}\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                        required\r\n                                        error={!!error}\r\n                                        helperText={error?.message}\r\n                                        id=\"dose\"\r\n                                        label=\"Dose\"\r\n                                        name=\"dose\"\r\n                                        type=\"numeric\"\r\n                                        inputRef={ref}\r\n                                        {...params}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        )}\r\n                    />\r\n\r\n                    <Button disabled={!formState.isValid} size=\"large\" sx={buttonSx} type=\"submit\"\r\n                            variant=\"contained\">Submit</Button>\r\n                </Box>\r\n            </form>\r\n        </Container>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}