{"ast":null,"code":"var _jsxFileName = \"/Users/valeriehosler/Desktop/Github/React-Medi-App/src/Components/AddReminder4.js\",\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\"; // Material UI Components\n\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport Box from \"@mui/material/Box\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport Link from \"@mui/material/Link\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\nimport Stack from \"@mui/material/Stack\";\nimport TimePicker from \"@mui/lab/TimePicker\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\"; // This gets the number of timePicker inputs that need to be created\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getNumber() {\n  let reminderList = localStorage.getItem(\"reminders\");\n  let parsed = JSON.parse(reminderList);\n  const mostRecent = parsed[parsed.length - 1];\n  return mostRecent.timesPerDay;\n}\n\nexport default function AddReminder4() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // Styles\n  const boxSx = {\n    \"& .MuiTextField-root\": {\n      mb: 5,\n      width: \"100%\"\n    },\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    ml: \"50px\",\n    mr: \"50px\"\n  };\n  const iconButtonSx = {\n    fontSize: 75,\n    ml: 2.5,\n    mr: 2.5\n  };\n  const linkSx = {\n    color: \"#1976d2\"\n  };\n  const stackSx = {\n    mb: 5\n  };\n  const breadcrumbs = [/*#__PURE__*/_jsxDEV(Link, {\n    underline: \"hover\",\n    color: \"inherit\",\n    href: \"/add-reminder\",\n    sx: linkSx,\n    children: \"Name & Dose\"\n  }, \"1\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Link, {\n    underline: \"hover\",\n    color: \"inherit\",\n    href: \"/add-reminder/days\",\n    sx: linkSx,\n    children: \"Days of Week\"\n  }, \"2\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Link, {\n    underline: \"hover\",\n    color: \"inherit\",\n    href: \"/add-reminder/days/nums\",\n    sx: linkSx,\n    children: \"# of Times\"\n  }, \"3\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n    color: \"text.primary\",\n    children: \"Times\"\n  }, \"4\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this)]; // This solution was inspired by this tutorial: https://rexebin.medium.com/use-material-ui-pickers-with-react-hook-form-3ed5d24d6afc\n\n  const TimeInputs = params => {\n    _s();\n\n    let name = \"Time \" + params.counter;\n    const [time, setTime] = useState(new Date(\"2000-01-01T00:00:00\"));\n    const value = getValues(name);\n    useEffect(() => {\n      register(name);\n    }, [name]);\n    useEffect(() => {\n      setTime(value || null);\n    }, [setTime, value]);\n    return /*#__PURE__*/_jsxDEV(Controller, {\n      control: control,\n      name: name,\n      defaultValue: time,\n      render: _ref => {\n        let {\n          field: {\n            ref,\n            ...field\n          }\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(TimePicker, { ...field,\n          label: name,\n          value: time,\n          onChange: time => {\n            setValue(name, time, {\n              shouldValidate: true,\n              shouldDirty: true\n            });\n            setTime(time);\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n            id: name,\n            name: name,\n            inputRef: ref,\n            ...params\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  };\n\n  _s(TimeInputs, \"vYRAdv+PJwxaVk6npiKsn2UdbfY=\");\n\n  const allTimes = [];\n\n  for (let i = 0; i < getNumber(); i++) {\n    allTimes.push( /*#__PURE__*/_jsxDEV(TimeInputs, {\n      counter: i + 1\n    }, \"TimeInputs\" + i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 23\n    }, this));\n  }\n\n  const onSubmit = data => {\n    if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\n      localStorage.setItem(\"reminders\", JSON.stringify([{\n        id: 0,\n        medication: \"\",\n        dose: \"\",\n        days: [],\n        timesPerDay: 0,\n        times: [],\n        submitted: false\n      }]));\n    }\n\n    let reminderList = localStorage.getItem(\"reminders\");\n    let parsed = JSON.parse(reminderList);\n    const mostRecent = parsed[parsed.length - 1];\n    const times = [];\n    Object.values(data).forEach(value => {\n      const val = value.toString();\n      const sliced = val.slice(16, 21);\n      let finalTime;\n      console.log(sliced);\n\n      if (sliced.charAt(0) === \"0\" && sliced.charAt(1) === \"0\") {\n        // this catches 12:00 - 12:59 am\n        finalTime = \"12:\" + sliced.slice(2) + \" am\";\n      } else if (sliced.charAt(0) === \"0\" && sliced.charAt(1) !== \"0\") {\n        // this catches 1:00 - 9:59 am\n        finalTime = sliced.slice(1) + \" am\";\n      } else if (sliced.charAt(0) === \"1\" && (sliced.charAt(1) === \"0\" || sliced.charAt(1) === \"1\")) {\n        // this catches 10:00 - 11:59 am\n        finalTime = sliced + \" am\";\n      } else if (sliced.charAt(0) === \"1\" && sliced.charAt(1) === \"2\") {\n        // this catches 12:00 - 12:59 pm\n        finalTime = sliced + \" pm\";\n      } else {\n        // this catches 1:00 pm and later\n        let newSliced = sliced.slice(0, 2);\n        finalTime = parseInt(newSliced) - 12 + sliced.slice(2) + \" pm\";\n      }\n\n      times.push(finalTime);\n    });\n    mostRecent.times = times;\n    parsed[parsed.length - 1] = mostRecent;\n    localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n    /*\n    fetch(\"http://localhost:3000/add-reminder/days/nums/times/confirmation\")\n        .then((resp) => {\n            window.location = \"http://localhost:3000/add-reminder/days/nums/times/confirmation\";\n        });\n     */\n  };\n\n  const {\n    control,\n    handleSubmit,\n    setValue,\n    register,\n    getValues\n  } = useForm();\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 2,\n      sx: stackSx,\n      children: /*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        separator: /*#__PURE__*/_jsxDEV(NavigateNextIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 32\n        }, this),\n        \"aria-label\": \"breadcrumb\",\n        children: breadcrumbs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: boxSx,\n        children: [/*#__PURE__*/_jsxDEV(LocalizationProvider, {\n          dateAdapter: AdapterDateFns,\n          children: allTimes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            href: \"/add-reminder/days/nums\",\n            children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {\n              sx: iconButtonSx\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 64\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n              sx: iconButtonSx\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(AddReminder4, \"urC9D8QqeBVa5cfe/F7PRHnPzAk=\", false, function () {\n  return [useForm];\n});\n\n_c = AddReminder4;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddReminder4\");","map":{"version":3,"sources":["/Users/valeriehosler/Desktop/Github/React-Medi-App/src/Components/AddReminder4.js"],"names":["useState","useEffect","useForm","Controller","ArrowBackIcon","ArrowForwardIcon","Box","Breadcrumbs","Button","Container","Link","LocalizationProvider","NavigateNextIcon","Stack","TimePicker","Typography","TextField","AdapterDateFns","getNumber","reminderList","localStorage","getItem","parsed","JSON","parse","mostRecent","length","timesPerDay","AddReminder4","boxSx","mb","width","alignItems","display","flexDirection","ml","mr","iconButtonSx","fontSize","linkSx","color","stackSx","breadcrumbs","TimeInputs","params","name","counter","time","setTime","Date","value","getValues","register","control","field","ref","setValue","shouldValidate","shouldDirty","allTimes","i","push","onSubmit","data","setItem","stringify","id","medication","dose","days","times","submitted","Object","values","forEach","val","toString","sliced","slice","finalTime","console","log","charAt","newSliced","parseInt","handleSubmit"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,OAAR,EAAiBC,UAAjB,QAAkC,iBAAlC,C,CAEA;;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,cAAP,MAA2B,yBAA3B,C,CAEA;;;;AACA,SAASC,SAAT,GAAqB;AACjB,MAAIC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAnB;AACA,MAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWL,YAAX,CAAb;AACA,QAAMM,UAAU,GAAGH,MAAM,CAACA,MAAM,CAACI,MAAP,GAAgB,CAAjB,CAAzB;AACA,SAAQD,UAAU,CAACE,WAAnB;AACH;;AAED,eAAe,SAASC,YAAT,GAAwB;AAAA;;AAAA;;AACnC;AACA,QAAMC,KAAK,GAAG;AACV,4BAAwB;AAACC,MAAAA,EAAE,EAAE,CAAL;AAAQC,MAAAA,KAAK,EAAE;AAAf,KADd;AAEVC,IAAAA,UAAU,EAAE,QAFF;AAGVC,IAAAA,OAAO,EAAE,MAHC;AAIVC,IAAAA,aAAa,EAAE,QAJL;AAKVC,IAAAA,EAAE,EAAE,MALM;AAMVC,IAAAA,EAAE,EAAE;AANM,GAAd;AASA,QAAMC,YAAY,GAAG;AACjBC,IAAAA,QAAQ,EAAE,EADO;AAEjBH,IAAAA,EAAE,EAAE,GAFa;AAGjBC,IAAAA,EAAE,EAAE;AAHa,GAArB;AAMA,QAAMG,MAAM,GAAG;AACXC,IAAAA,KAAK,EAAE;AADI,GAAf;AAIA,QAAMC,OAAO,GAAG;AACZX,IAAAA,EAAE,EAAE;AADQ,GAAhB;AAIA,QAAMY,WAAW,GAAG,cAChB,QAAC,IAAD;AAAc,IAAA,SAAS,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAC,SAAtC;AAAgD,IAAA,IAAI,EAAC,eAArD;AAAqE,IAAA,EAAE,EAAEH,MAAzE;AAAA;AAAA,KAAU,GAAV;AAAA;AAAA;AAAA;AAAA,UADgB,eAIhB,QAAC,IAAD;AAAc,IAAA,SAAS,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAC,SAAtC;AAAgD,IAAA,IAAI,EAAC,oBAArD;AAA0E,IAAA,EAAE,EAAEA,MAA9E;AAAA;AAAA,KAAU,GAAV;AAAA;AAAA;AAAA;AAAA,UAJgB,eAOhB,QAAC,IAAD;AAAc,IAAA,SAAS,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAC,SAAtC;AAAgD,IAAA,IAAI,EAAC,yBAArD;AAA+E,IAAA,EAAE,EAAEA,MAAnF;AAAA;AAAA,KAAU,GAAV;AAAA;AAAA;AAAA;AAAA,UAPgB,eAUhB,QAAC,UAAD;AAAoB,IAAA,KAAK,EAAC,cAA1B;AAAA;AAAA,KAAgB,GAAhB;AAAA;AAAA;AAAA;AAAA,UAVgB,CAApB,CAzBmC,CAwCnC;;AACA,QAAMI,UAAU,GAAIC,MAAD,IAAY;AAAA;;AAC3B,QAAIC,IAAI,GAAG,UAAUD,MAAM,CAACE,OAA5B;AAEA,UAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBhD,QAAQ,CAAC,IAAIiD,IAAJ,CAAS,qBAAT,CAAD,CAAhC;AACA,UAAMC,KAAK,GAAGC,SAAS,CAACN,IAAD,CAAvB;AAEA5C,IAAAA,SAAS,CAAC,MAAM;AACZmD,MAAAA,QAAQ,CAACP,IAAD,CAAR;AACH,KAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAGA5C,IAAAA,SAAS,CAAC,MAAM;AACZ+C,MAAAA,OAAO,CAACE,KAAK,IAAI,IAAV,CAAP;AACH,KAFQ,EAEN,CAACF,OAAD,EAAUE,KAAV,CAFM,CAAT;AAIA,wBACI,QAAC,UAAD;AACI,MAAA,OAAO,EAAEG,OADb;AAEI,MAAA,IAAI,EAAER,IAFV;AAGI,MAAA,YAAY,EAAEE,IAHlB;AAII,MAAA,MAAM,EAAE;AAAA,YAAC;AAACO,UAAAA,KAAK,EAAE;AAACC,YAAAA,GAAD;AAAM,eAAGD;AAAT;AAAR,SAAD;AAAA,4BACJ,QAAC,UAAD,OACQA,KADR;AAEI,UAAA,KAAK,EAAET,IAFX;AAGI,UAAA,KAAK,EAAEE,IAHX;AAII,UAAA,QAAQ,EAAGA,IAAD,IAAU;AAChBS,YAAAA,QAAQ,CAACX,IAAD,EAAOE,IAAP,EAAa;AAACU,cAAAA,cAAc,EAAE,IAAjB;AAAuBC,cAAAA,WAAW,EAAE;AAApC,aAAb,CAAR;AACAV,YAAAA,OAAO,CAACD,IAAD,CAAP;AACH,WAPL;AAQI,UAAA,WAAW,EAAGH,MAAD,iBACT,QAAC,SAAD;AACI,YAAA,EAAE,EAAEC,IADR;AAEI,YAAA,IAAI,EAAEA,IAFV;AAGI,YAAA,QAAQ,EAAEU,GAHd;AAAA,eAIQX;AAJR;AAAA;AAAA;AAAA;AAAA;AATR;AAAA;AAAA;AAAA;AAAA,gBADI;AAAA;AAJZ;AAAA;AAAA;AAAA;AAAA,YADJ;AA0BH,GAvCD;;AAzCmC,KAyC7BD,UAzC6B;;AAkFnC,QAAMgB,QAAQ,GAAG,EAAjB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1C,SAAS,EAA7B,EAAiC0C,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,QAAQ,CAACE,IAAT,eAAc,QAAC,UAAD;AAAY,MAAA,OAAO,EAAED,CAAC,GAAG;AAAzB,OAAiC,eAAeA,CAAhD;AAAA;AAAA;AAAA;AAAA,YAAd;AACH;;AAED,QAAME,QAAQ,GAAIC,IAAD,IAAU;AACvB,QAAI3C,YAAY,CAACC,OAAb,CAAqB,WAArB,MAAsC,IAAtC,IAA8CD,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCK,MAAlC,GAA2C,CAA7F,EAAgG;AAC5FN,MAAAA,YAAY,CAAC4C,OAAb,CAAqB,WAArB,EAAkCzC,IAAI,CAAC0C,SAAL,CAAe,CAAC;AAC9CC,QAAAA,EAAE,EAAE,CAD0C;AAE9CC,QAAAA,UAAU,EAAE,EAFkC;AAG9CC,QAAAA,IAAI,EAAE,EAHwC;AAI9CC,QAAAA,IAAI,EAAE,EAJwC;AAK9C1C,QAAAA,WAAW,EAAE,CALiC;AAM9C2C,QAAAA,KAAK,EAAE,EANuC;AAO9CC,QAAAA,SAAS,EAAE;AAPmC,OAAD,CAAf,CAAlC;AASH;;AAED,QAAIpD,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAnB;AACA,QAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWL,YAAX,CAAb;AACA,UAAMM,UAAU,GAAGH,MAAM,CAACA,MAAM,CAACI,MAAP,GAAgB,CAAjB,CAAzB;AACA,UAAM4C,KAAK,GAAG,EAAd;AAEAE,IAAAA,MAAM,CAACC,MAAP,CAAcV,IAAd,EAAoBW,OAApB,CAA6BxB,KAAD,IAAW;AACnC,YAAMyB,GAAG,GAAGzB,KAAK,CAAC0B,QAAN,EAAZ;AACA,YAAMC,MAAM,GAAGF,GAAG,CAACG,KAAJ,CAAU,EAAV,EAAc,EAAd,CAAf;AACA,UAAIC,SAAJ;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;;AAEA,UAAIA,MAAM,CAACK,MAAP,CAAc,CAAd,MAAqB,GAArB,IAA4BL,MAAM,CAACK,MAAP,CAAc,CAAd,MAAqB,GAArD,EAA0D;AAAE;AACxDH,QAAAA,SAAS,GAAG,QAAQF,MAAM,CAACC,KAAP,CAAa,CAAb,CAAR,GAA0B,KAAtC;AACH,OAFD,MAEO,IAAID,MAAM,CAACK,MAAP,CAAc,CAAd,MAAqB,GAArB,IAA4BL,MAAM,CAACK,MAAP,CAAc,CAAd,MAAqB,GAArD,EAA0D;AAAE;AAC/DH,QAAAA,SAAS,GAAGF,MAAM,CAACC,KAAP,CAAa,CAAb,IAAkB,KAA9B;AACH,OAFM,MAEA,IAAID,MAAM,CAACK,MAAP,CAAc,CAAd,MAAqB,GAArB,KAA6BL,MAAM,CAACK,MAAP,CAAc,CAAd,MAAqB,GAArB,IAA4BL,MAAM,CAACK,MAAP,CAAc,CAAd,MAAqB,GAA9E,CAAJ,EAAwF;AAAE;AAC7FH,QAAAA,SAAS,GAAGF,MAAM,GAAG,KAArB;AACH,OAFM,MAEA,IAAIA,MAAM,CAACK,MAAP,CAAc,CAAd,MAAqB,GAArB,IAA4BL,MAAM,CAACK,MAAP,CAAc,CAAd,MAAqB,GAArD,EAA0D;AAAE;AAC/DH,QAAAA,SAAS,GAAGF,MAAM,GAAG,KAArB;AACH,OAFM,MAEA;AAAE;AACL,YAAIM,SAAS,GAAGN,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAAhB;AACAC,QAAAA,SAAS,GAAIK,QAAQ,CAACD,SAAD,CAAR,GAAsB,EAAvB,GAA6BN,MAAM,CAACC,KAAP,CAAa,CAAb,CAA7B,GAA+C,KAA3D;AACH;;AAEDR,MAAAA,KAAK,CAACT,IAAN,CAAWkB,SAAX;AACH,KArBD;AAuBAtD,IAAAA,UAAU,CAAC6C,KAAX,GAAmBA,KAAnB;AAEAhD,IAAAA,MAAM,CAACA,MAAM,CAACI,MAAP,GAAgB,CAAjB,CAAN,GAA4BD,UAA5B;AACAL,IAAAA,YAAY,CAAC4C,OAAb,CAAqB,WAArB,EAAkCzC,IAAI,CAAC0C,SAAL,CAAe3C,MAAf,CAAlC;AAEA;AACR;AACA;AACA;AACA;AACA;AACK,GApDD;;AAsDA,QAAM;AAAC+B,IAAAA,OAAD;AAAUgC,IAAAA,YAAV;AAAwB7B,IAAAA,QAAxB;AAAkCJ,IAAAA,QAAlC;AAA4CD,IAAAA;AAA5C,MAAyDjD,OAAO,EAAtE;AAEA,sBACI,QAAC,SAAD;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAE,CAAhB;AAAmB,MAAA,EAAE,EAAEuC,OAAvB;AAAA,6BACI,QAAC,WAAD;AACI,QAAA,SAAS,eAAE,QAAC,gBAAD;AAAkB,UAAA,QAAQ,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,gBADf;AAEI,sBAAW,YAFf;AAAA,kBAIKC;AAJL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAUI;AAAM,MAAA,QAAQ,EAAE2C,YAAY,CAACvB,QAAD,CAA5B;AAAA,6BACI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAEjC,KAAT;AAAA,gCACI,QAAC,oBAAD;AAAsB,UAAA,WAAW,EAAEZ,cAAnC;AAAA,oBACK0C;AADL;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI,QAAC,GAAD;AAAA,kCACI,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,yBAAb;AAAA,mCAAuC,QAAC,aAAD;AAAe,cAAA,EAAE,EAAEtB;AAAnB;AAAA;AAAA;AAAA;AAAA;AAAvC;AAAA;AAAA;AAAA;AAAA,kBADJ,eAGI,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAA,mCAAsB,QAAC,gBAAD;AAAkB,cAAA,EAAE,EAAEA;AAAtB;AAAA;AAAA;AAAA;AAAA;AAAtB;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH;;IA1KuBT,Y;UA8I2C1B,O;;;KA9I3C0B,Y","sourcesContent":["import {useState, useEffect} from \"react\";\nimport {useForm, Controller} from \"react-hook-form\";\n\n// Material UI Components\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport Box from \"@mui/material/Box\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport Link from \"@mui/material/Link\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\nimport Stack from \"@mui/material/Stack\";\nimport TimePicker from \"@mui/lab/TimePicker\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\n\n// This gets the number of timePicker inputs that need to be created\nfunction getNumber() {\n    let reminderList = localStorage.getItem(\"reminders\");\n    let parsed = JSON.parse(reminderList);\n    const mostRecent = parsed[parsed.length - 1];\n    return (mostRecent.timesPerDay);\n}\n\nexport default function AddReminder4() {\n    // Styles\n    const boxSx = {\n        \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        ml: \"50px\",\n        mr: \"50px\",\n    };\n\n    const iconButtonSx = {\n        fontSize: 75,\n        ml: 2.5,\n        mr: 2.5\n    };\n\n    const linkSx = {\n        color: \"#1976d2\"\n    };\n\n    const stackSx = {\n        mb: 5\n    };\n\n    const breadcrumbs = [\n        <Link key=\"1\" underline=\"hover\" color=\"inherit\" href=\"/add-reminder\" sx={linkSx}>\n            Name & Dose\n        </Link>,\n        <Link key=\"2\" underline=\"hover\" color=\"inherit\" href=\"/add-reminder/days\" sx={linkSx}>\n            Days of Week\n        </Link>,\n        <Link key=\"3\" underline=\"hover\" color=\"inherit\" href=\"/add-reminder/days/nums\" sx={linkSx}>\n            # of Times\n        </Link>,\n        <Typography key=\"4\" color=\"text.primary\">\n            Times\n        </Typography>\n    ];\n\n    // This solution was inspired by this tutorial: https://rexebin.medium.com/use-material-ui-pickers-with-react-hook-form-3ed5d24d6afc\n    const TimeInputs = (params) => {\n        let name = \"Time \" + params.counter;\n\n        const [time, setTime] = useState(new Date(\"2000-01-01T00:00:00\"));\n        const value = getValues(name);\n\n        useEffect(() => {\n            register(name);\n        }, [name]);\n        useEffect(() => {\n            setTime(value || null);\n        }, [setTime, value]);\n\n        return (\n            <Controller\n                control={control}\n                name={name}\n                defaultValue={time}\n                render={({field: {ref, ...field}}) => (\n                    <TimePicker\n                        {...field}\n                        label={name}\n                        value={time}\n                        onChange={(time) => {\n                            setValue(name, time, {shouldValidate: true, shouldDirty: true});\n                            setTime(time);\n                        }}\n                        renderInput={(params) =>\n                            <TextField\n                                id={name}\n                                name={name}\n                                inputRef={ref}\n                                {...params}\n                            />\n                        }\n                    />\n                )}\n            />\n        );\n    };\n\n    const allTimes = [];\n\n    for (let i = 0; i < getNumber(); i++) {\n        allTimes.push(<TimeInputs counter={i + 1} key={\"TimeInputs\" + i}/>);\n    }\n\n    const onSubmit = (data) => {\n        if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\n            localStorage.setItem(\"reminders\", JSON.stringify([{\n                id: 0,\n                medication: \"\",\n                dose: \"\",\n                days: [],\n                timesPerDay: 0,\n                times: [],\n                submitted: false\n            }]));\n        }\n\n        let reminderList = localStorage.getItem(\"reminders\");\n        let parsed = JSON.parse(reminderList);\n        const mostRecent = parsed[parsed.length - 1];\n        const times = [];\n\n        Object.values(data).forEach((value) => {\n            const val = value.toString();\n            const sliced = val.slice(16, 21);\n            let finalTime;\n\n            console.log(sliced)\n\n            if (sliced.charAt(0) === \"0\" && sliced.charAt(1) === \"0\") { // this catches 12:00 - 12:59 am\n                finalTime = \"12:\" + sliced.slice(2) + \" am\";\n            } else if (sliced.charAt(0) === \"0\" && sliced.charAt(1) !== \"0\") { // this catches 1:00 - 9:59 am\n                finalTime = sliced.slice(1) + \" am\";\n            } else if (sliced.charAt(0) === \"1\" && (sliced.charAt(1) === \"0\" || sliced.charAt(1) === \"1\")) { // this catches 10:00 - 11:59 am\n                finalTime = sliced + \" am\";\n            } else if (sliced.charAt(0) === \"1\" && sliced.charAt(1) === \"2\") { // this catches 12:00 - 12:59 pm\n                finalTime = sliced + \" pm\";\n            } else { // this catches 1:00 pm and later\n                let newSliced = sliced.slice(0, 2);\n                finalTime = (parseInt(newSliced) - 12) + sliced.slice(2) + \" pm\";\n            }\n\n            times.push(finalTime);\n        });\n\n        mostRecent.times = times;\n\n        parsed[parsed.length - 1] = mostRecent;\n        localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n\n        /*\n        fetch(\"http://localhost:3000/add-reminder/days/nums/times/confirmation\")\n            .then((resp) => {\n                window.location = \"http://localhost:3000/add-reminder/days/nums/times/confirmation\";\n            });\n         */\n    };\n\n    const {control, handleSubmit, setValue, register, getValues} = useForm();\n\n    return (\n        <Container>\n            <Stack spacing={2} sx={stackSx}>\n                <Breadcrumbs\n                    separator={<NavigateNextIcon fontSize=\"small\"/>}\n                    aria-label=\"breadcrumb\"\n                >\n                    {breadcrumbs}\n                </Breadcrumbs>\n            </Stack>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <Box sx={boxSx}>\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                        {allTimes}\n                    </LocalizationProvider>\n\n                    <Box>\n                        <Button href=\"/add-reminder/days/nums\"><ArrowBackIcon sx={iconButtonSx}/></Button>\n\n                        <Button type=\"submit\"><ArrowForwardIcon sx={iconButtonSx}/></Button>\n                    </Box>\n                </Box>\n            </form>\n        </Container>\n    );\n}"]},"metadata":{},"sourceType":"module"}