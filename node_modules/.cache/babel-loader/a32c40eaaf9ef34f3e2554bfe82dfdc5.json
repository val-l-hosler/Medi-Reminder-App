{"ast":null,"code":"var e = require(\"react-hook-form\"),\n    r = function (r, i) {\n  for (var t in i.fields) {\n    var a = i.fields[t];\n\n    if (a && a.ref && \"reportValidity\" in a.ref) {\n      var o = e.get(r, t);\n      a.ref.setCustomValidity(o && o.message || \"\"), a.ref.reportValidity();\n    }\n  }\n};\n\nexports.toNestError = function (i, t) {\n  t.shouldUseNativeValidation && r(i, t);\n  var a = {};\n\n  for (var o in i) {\n    var s = e.get(t.fields, o);\n    e.set(a, o, Object.assign(i[o], {\n      ref: s && s.ref\n    }));\n  }\n\n  return a;\n}, exports.validateFieldsNatively = r;","map":{"version":3,"sources":["../src/validateFieldsNatively.ts","../src/toNestError.ts"],"names":["validateFieldsNatively","errors","options","fieldPath","fields","field","ref","error","get","setCustomValidity","message","reportValidity","shouldUseNativeValidation","fieldErrors","path","set","Object","assign"],"mappings":";IAGaA,CAAAA,GAAyB,UACpCC,CADoC,EAEpCC,CAFoC,EAEpCA;AAEA,OAAK,IAAMC,CAAX,IAAwBD,CAAAA,CAAQE,MAAhC,EAAwC;AACtC,QAAMC,CAAAA,GAAQH,CAAAA,CAAQE,MAARF,CAAeC,CAAfD,CAAd;;AAEA,QAAIG,CAAAA,IAASA,CAAAA,CAAMC,GAAfD,IAAsB,oBAAoBA,CAAAA,CAAMC,GAApD,EAAyD;AACvD,UAAMC,CAAAA,GAAQC,CAAAA,CAAAA,GAAAA,CAAIP,CAAJO,EAAYL,CAAZK,CAAd;AAEAH,MAAAA,CAAAA,CAAMC,GAAND,CAAUI,iBAAVJ,CAA6BE,CAAAA,IAASA,CAAAA,CAAMG,OAAfH,IAA2B,EAAxDF,GAEAA,CAAAA,CAAMC,GAAND,CAAUM,cAAVN,EAFAA;AAEUM;AAAAA;AAAAA,C;;AAAAA,OAAAA,CAAAA,WAAAA,GCLW,UACzBV,CADyB,EAEzBC,CAFyB,EAEzBA;AAEAA,EAAAA,CAAAA,CAAQU,yBAARV,IAAqCF,CAAAA,CAAuBC,CAAvBD,EAA+BE,CAA/BF,CAArCE;AAEA,MAAMW,CAAAA,GAAc,EAApB;;AACA,OAAK,IAAMC,CAAX,IAAmBb,CAAnB,EAA2B;AACzB,QAAMI,CAAAA,GAAQG,CAAAA,CAAAA,GAAAA,CAAIN,CAAAA,CAAQE,MAAZI,EAAoBM,CAApBN,CAAd;AAEAO,IAAAA,CAAAA,CAAAA,GAAAA,CACEF,CADFE,EAEED,CAFFC,EAGEC,MAAAA,CAAOC,MAAPD,CAAcf,CAAAA,CAAOa,CAAPb,CAAde,EAA4B;AAAEV,MAAAA,GAAAA,EAAKD,CAAAA,IAASA,CAAAA,CAAMC;AAAtB,KAA5BU,CAHFD;AAOF;;AAAA,SAAOF,CAAP;AAAOA,CDZOF,ECYPE,OAAAA,CAAAA,sBAAAA,GAAAA,CDZOF","sourcesContent":["import { get, FieldError, ResolverOptions } from 'react-hook-form';\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      const error = get(errors, fieldPath) as FieldError | undefined;\n\n      field.ref.setCustomValidity((error && error.message) || '');\n\n      field.ref.reportValidity();\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldError,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n"]},"metadata":{},"sourceType":"script"}