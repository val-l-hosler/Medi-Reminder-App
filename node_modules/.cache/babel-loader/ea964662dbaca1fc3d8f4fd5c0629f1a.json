{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\React-Medi-App\\\\src\\\\Components\\\\DisplayMedications.js\";\nimport { useState, useCallback } from \"react\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from '@mui/material/CardContent';\nimport Container from \"@mui/material/Container\";\nimport Typography from \"@mui/material/Typography\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DisplayMedications() {\n  function deleteMedication(e, medicationId, parsedMedications) {\n    e.preventDefault();\n    parsedMedications.splice(medicationId, 1);\n    localStorage.setItem(\"medications\", JSON.stringify(parsedMedications));\n  }\n\n  const buttonSx = {\n    borderRadius: 0,\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"50%\"\n  };\n  const cardSx = {\n    bgcolor: \"#eaeef3\",\n    boxShadow: 3,\n    m: 5\n  };\n  const typographyMedicationSx = {\n    textAlign: \"left\"\n  };\n  let medications;\n\n  if (localStorage.getItem(\"medications\") !== null) {\n    let medicationList = localStorage.getItem(\"medications\");\n    let parsed = JSON.parse(medicationList);\n    medications = parsed.map(medication => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        sx: cardSx,\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyMedicationSx,\n            variant: \"h5\",\n            children: [\"Medication: \", medication.medication]\n          }, medication.medication.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyMedicationSx,\n            variant: \"h5\",\n            children: [\"Dose: \", medication.dose, \" mg\"]\n          }, medication.dose.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"Edit Med\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: deleteMedication(medication.medication.id, parsed),\n            color: \"error\",\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"Delete Med\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, medication.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this);\n    });\n  } else {\n    medications = () => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        sx: cardSx,\n        variant: \"outlined\",\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyMedicationSx,\n            variant: \"h5\",\n            children: \"No medications are registered.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            href: \"/add-medication\",\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"Register med\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this);\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: medications\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n_c = DisplayMedications;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayMedications\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/React-Medi-App/src/Components/DisplayMedications.js"],"names":["useState","useCallback","Box","Button","Card","CardContent","Container","Typography","DisplayMedications","deleteMedication","e","medicationId","parsedMedications","preventDefault","splice","localStorage","setItem","JSON","stringify","buttonSx","borderRadius","fontSize","height","width","cardSx","bgcolor","boxShadow","m","typographyMedicationSx","textAlign","medications","getItem","medicationList","parsed","parse","map","medication","id","dose","flexDirection"],"mappings":"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","sourcesContent":["import {useState, useCallback} from \"react\";\r\n\r\n// Material UI Components\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Container from \"@mui/material/Container\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nexport default function DisplayMedications() {\r\n\r\n    function deleteMedication(e, medicationId, parsedMedications) {\r\n        e.preventDefault();\r\n        parsedMedications.splice(medicationId, 1);\r\n        localStorage.setItem(\"medications\", JSON.stringify(parsedMedications));\r\n    }\r\n\r\n    const buttonSx = {\r\n        borderRadius: 0,\r\n        fontSize: \"17px\",\r\n        height: \"5.75ch\",\r\n        width: \"50%\"\r\n    };\r\n\r\n    const cardSx = {\r\n        bgcolor: \"#eaeef3\",\r\n        boxShadow: 3,\r\n        m: 5\r\n    };\r\n\r\n    const typographyMedicationSx = {\r\n        textAlign: \"left\"\r\n    };\r\n\r\n    let medications;\r\n\r\n    if (localStorage.getItem(\"medications\") !== null) {\r\n        let medicationList = localStorage.getItem(\"medications\");\r\n        let parsed = JSON.parse(medicationList);\r\n\r\n        medications = parsed.map((medication) => {\r\n            return (\r\n                <Card key={medication.id} sx={cardSx}>\r\n                    <CardContent>\r\n                        <Typography key={medication.medication.id} sx={typographyMedicationSx} variant=\"h5\">\r\n                            Medication: {medication.medication}\r\n                        </Typography>\r\n                        <Typography key={medication.dose.id} sx={typographyMedicationSx} variant=\"h5\">\r\n                            Dose: {medication.dose} mg\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <Box>\r\n                        <Button size=\"large\" sx={buttonSx} variant=\"contained\">Edit Med</Button>\r\n                        <Button onClick={deleteMedication(medication.medication.id, parsed)} color=\"error\" size=\"large\"\r\n                                sx={buttonSx} variant=\"contained\">Delete\r\n                            Med</Button>\r\n                    </Box>\r\n                </Card>\r\n            )\r\n        });\r\n    } else {\r\n        medications = () => {\r\n            return (\r\n                <Card sx={cardSx} variant=\"outlined\">\r\n                    <CardContent>\r\n                        <Typography sx={typographyMedicationSx} variant=\"h5\">\r\n                            No medications are registered.\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <Box>\r\n                        <Button href=\"/add-medication\" size=\"large\" sx={buttonSx} variant=\"contained\">Register\r\n                            med</Button>\r\n                    </Box>\r\n                </Card>\r\n            )\r\n        };\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Box style={{flexDirection: \"column\"}}>\r\n                {medications}\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}