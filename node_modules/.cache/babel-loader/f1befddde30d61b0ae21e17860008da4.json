{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\Medi-Reminder-App\\\\src\\\\Components\\\\Registered Medications\\\\DisplayMedications.js\",\n    _s2 = $RefreshSig$();\n\n/*\r\nTHIS SHOULD BE SPLIT UP!!!\r\nOVER TIME, I WILL REFACTOR THIS SO IT IS SPLIT INTO MULTIPLE COMPONENTS\r\n */\nimport { useState, useCallback } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport * as Yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Container from \"@mui/material/Container\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\"; // Custom Components\n\nimport DoseInput from \"../Inputs/DoseInput.js\";\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst doseSuggestions = [{\n  label: \"10 mg\"\n}, {\n  label: \"20 mg\"\n}, {\n  label: \"30 mg\"\n}, {\n  label: \"40 mg\"\n}, {\n  label: \"50 mg\"\n}, {\n  label: \"60 mg\"\n}, {\n  label: \"70 mg\"\n}, {\n  label: \"80 mg\"\n}]; // Form validation using Yup\n\nconst validationSchema = Yup.object().shape({\n  dose: Yup.string().required(\"Dose is required\")\n}); // Styles\n\nconst boxSx = {\n  \"& .MuiTextField-root\": {\n    mb: 5,\n    width: \"100%\"\n  },\n  ml: 5,\n  mr: 5\n};\nconst buttonSx = {\n  borderRadius: 0,\n  fontSize: \"17px\",\n  height: \"5.75ch\",\n  width: \"50%\"\n};\nconst cardSx = {\n  bgcolor: \"#eeeeee\",\n  boxShadow: 3,\n  mb: 5,\n  mt: 5\n};\nconst containerSx = {\n  pl: 5,\n  pr: 5,\n  width: \"100%\"\n};\nconst dialogBoxSx = {\n  width: \"75vw\"\n};\nconst dialogTitleSx = {\n  p: 3\n};\nconst formButtonSx = {\n  borderRadius: 0,\n  fontSize: \"17px\",\n  height: \"5.75ch\",\n  mb: 5,\n  width: \"100%\"\n};\nconst iconButtonSx = {\n  position: \"absolute\",\n  right: 8,\n  top: 8,\n  color: theme => theme.palette.grey[500]\n};\nconst typographyMedicationSx = {\n  m: 1.5\n};\nconst updateDoseTypographySx = {\n  mb: 5,\n  ml: 5,\n  mr: 5,\n  textAlign: \"center\"\n};\nexport default function DisplayMedications() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // This is the array of medication objects that will be displayed on the cards\n  const medicationList = localStorage.getItem(\"medications\");\n  const parsedList = JSON.parse(medicationList); // This forces the component to re-render after a medication has been deleted\n\n  const [, updateState] = useState();\n  const forceUpdate = useCallback(() => updateState({}), []); // This is the Medication component that is displayed including a card, medication info, buttons, and dialogs\n\n  const Medication = _ref => {\n    _s();\n\n    let {\n      medication\n    } = _ref;\n    const {\n      handleSubmit,\n      control,\n      formState\n    } = useForm({\n      mode: \"onChange\",\n      resolver: yupResolver(validationSchema)\n    }); // This handles the update dose dialog\n\n    const [openUpdate, setOpenUpdate] = useState(false);\n\n    const handleClickOpenUpdate = () => {\n      setOpenUpdate(true);\n    };\n\n    const handleCloseUpdate = () => {\n      setOpenUpdate(false);\n    }; // Function for the update dose button\n\n\n    const updateDose = (medicationId, parsedMedications, data) => {\n      const {\n        dose: updatedDose\n      } = data;\n      let med;\n\n      for (const index of parsedMedications) {\n        if (index.id === medicationId) {\n          med = index;\n        }\n      }\n\n      med.dose = updatedDose;\n      localStorage.setItem(\"medications\", JSON.stringify(parsedMedications)); // This forces the dialog to close\n\n      setOpenUpdate(false);\n    }; // This handles the delete medication confirmation dialog\n\n\n    const [openDelete, setOpenDelete] = useState(false);\n\n    const handleClickOpenDelete = () => {\n      setOpenDelete(true);\n    };\n\n    const handleCloseDelete = () => {\n      setOpenDelete(false);\n    }; // Function for the delete med button\n\n\n    const deleteMedication = (medicationId, parsedMedications) => {\n      let index;\n\n      for (let i = 0; i < parsedMedications.length; i++) {\n        if (parsedMedications[i].id === medicationId) {\n          index = i;\n          break;\n        }\n      }\n\n      if (parsedMedications.length > 1) {\n        // This removes the appropriate index of the array of medication objects\n        parsedMedications.splice(index, 1);\n        parsedMedications = [...parsedMedications];\n      } else {\n        parsedMedications = [];\n      }\n\n      localStorage.setItem(\"medications\", JSON.stringify(parsedMedications)); // This forces the dialog to close\n\n      setOpenDelete(false); // This forces the medication list to re-render\n\n      forceUpdate();\n    }; // This is what is rendered for the Medication component\n\n\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        sx: cardSx,\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyMedicationSx,\n            variant: \"h5\",\n            children: [\"Medication: \", medication.medication]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyMedicationSx,\n            variant: \"h5\",\n            children: [\"Dose: \", medication.dose]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClickOpenUpdate,\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"Edit Dose\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClickOpenDelete,\n            color: \"error\",\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"Delete Med \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openDelete,\n        onClose: handleCloseDelete,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: dialogBoxSx,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              m: 5\n            },\n            children: [\" Do you want to delete \", medication.dose, \" of \", medication.medication, \"? \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => deleteMedication(medication.id, parsedList),\n              size: \"large\",\n              sx: buttonSx,\n              variant: \"contained\",\n              children: \"Yes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleCloseDelete,\n              color: \"error\",\n              size: \"large\",\n              sx: buttonSx,\n              variant: \"contained\",\n              children: \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openUpdate,\n        onClose: handleCloseUpdate,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          sx: dialogTitleSx,\n          children: handleCloseUpdate ? /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"close\",\n            onClick: handleCloseUpdate,\n            sx: iconButtonSx,\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: dialogBoxSx,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit(data => updateDose(medication.id, parsedList, data)),\n            noValidate: true,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              sx: updateDoseTypographySx,\n              variant: \"h5\",\n              children: \"Update dose\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: boxSx,\n              children: [/*#__PURE__*/_jsxDEV(DoseInput, {\n                control: control,\n                suggestions: doseSuggestions,\n                variant: \"outlined\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                disabled: !formState.isValid,\n                size: \"large\",\n                sx: formButtonSx,\n                type: \"submit\",\n                variant: \"contained\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this);\n  }; // End Medication component\n\n\n  _s(Medication, \"4Y9tlXzjuXBpiU6a8H7PE4PpCn8=\", false, function () {\n    return [useForm];\n  });\n\n  let medications; // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\n\n  if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\n    medications = parsedList.map(medication => {\n      return /*#__PURE__*/_jsxDEV(Medication, {\n        medication: medication\n      }, \"Medication_\" + medication.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 21\n      }, this);\n    });\n  } else {\n    medications = /*#__PURE__*/_jsxDEV(NoRegisteredMedications, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 23\n    }, this);\n  } // This is the actual final block of code that is rendered for this component\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: containerSx,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: medications\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(DisplayMedications, \"X5rEjsBNP/fh1FQA6Gy+z8f0U8w=\");\n\n_c = DisplayMedications;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayMedications\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/Medi-Reminder-App/src/Components/Registered Medications/DisplayMedications.js"],"names":["useState","useCallback","useForm","Yup","yupResolver","Box","Button","Card","CardContent","CloseIcon","Container","IconButton","Typography","Dialog","DialogTitle","DoseInput","NoRegisteredMedications","doseSuggestions","label","validationSchema","object","shape","dose","string","required","boxSx","mb","width","ml","mr","buttonSx","borderRadius","fontSize","height","cardSx","bgcolor","boxShadow","mt","containerSx","pl","pr","dialogBoxSx","dialogTitleSx","p","formButtonSx","iconButtonSx","position","right","top","color","theme","palette","grey","typographyMedicationSx","m","updateDoseTypographySx","textAlign","DisplayMedications","medicationList","localStorage","getItem","parsedList","JSON","parse","updateState","forceUpdate","Medication","medication","handleSubmit","control","formState","mode","resolver","openUpdate","setOpenUpdate","handleClickOpenUpdate","handleCloseUpdate","updateDose","medicationId","parsedMedications","data","updatedDose","med","index","id","setItem","stringify","openDelete","setOpenDelete","handleClickOpenDelete","handleCloseDelete","deleteMedication","i","length","splice","isValid","medications","map","flexDirection"],"mappings":"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","sourcesContent":["/*\r\nTHIS SHOULD BE SPLIT UP!!!\r\nOVER TIME, I WILL REFACTOR THIS SO IT IS SPLIT INTO MULTIPLE COMPONENTS\r\n */\r\n\r\nimport {useState, useCallback} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport * as Yup from \"yup\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\n\r\n// Material UI Components\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Container from \"@mui/material/Container\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\n\r\n// Custom Components\r\nimport DoseInput from \"../Inputs/DoseInput.js\";\r\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\r\n\r\nconst doseSuggestions = [\r\n    {label: \"10 mg\"},\r\n    {label: \"20 mg\"},\r\n    {label: \"30 mg\"},\r\n    {label: \"40 mg\"},\r\n    {label: \"50 mg\"},\r\n    {label: \"60 mg\"},\r\n    {label: \"70 mg\"},\r\n    {label: \"80 mg\"}\r\n];\r\n\r\n// Form validation using Yup\r\nconst validationSchema = Yup.object().shape({\r\n    dose: Yup.string()\r\n        .required(\"Dose is required\")\r\n});\r\n\r\n// Styles\r\nconst boxSx = {\r\n    \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\r\n    ml: 5,\r\n    mr: 5\r\n};\r\n\r\nconst buttonSx = {\r\n    borderRadius: 0,\r\n    fontSize: \"17px\",\r\n    height: \"5.75ch\",\r\n    width: \"50%\"\r\n};\r\n\r\nconst cardSx = {\r\n    bgcolor: \"#eeeeee\",\r\n    boxShadow: 3,\r\n    mb: 5,\r\n    mt: 5\r\n};\r\n\r\nconst containerSx = {\r\n    pl: 5,\r\n    pr: 5,\r\n    width: \"100%\"\r\n};\r\n\r\nconst dialogBoxSx = {\r\n    width: \"75vw\"\r\n};\r\n\r\nconst dialogTitleSx = {\r\n    p: 3\r\n};\r\n\r\nconst formButtonSx = {\r\n    borderRadius: 0,\r\n    fontSize: \"17px\",\r\n    height: \"5.75ch\",\r\n    mb: 5,\r\n    width: \"100%\"\r\n};\r\n\r\nconst iconButtonSx = {\r\n    position: \"absolute\",\r\n    right: 8,\r\n    top: 8,\r\n    color: (theme) => theme.palette.grey[500]\r\n};\r\n\r\nconst typographyMedicationSx = {\r\n    m: 1.5\r\n};\r\n\r\nconst updateDoseTypographySx = {\r\n    mb: 5,\r\n    ml: 5,\r\n    mr: 5,\r\n    textAlign: \"center\"\r\n};\r\n\r\nexport default function DisplayMedications() {\r\n    // This is the array of medication objects that will be displayed on the cards\r\n    const medicationList = localStorage.getItem(\"medications\");\r\n    const parsedList = JSON.parse(medicationList);\r\n\r\n    // This forces the component to re-render after a medication has been deleted\r\n    const [, updateState] = useState();\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n\r\n    // This is the Medication component that is displayed including a card, medication info, buttons, and dialogs\r\n    const Medication = ({medication}) => {\r\n        const {handleSubmit, control, formState} = useForm({\r\n            mode: \"onChange\",\r\n            resolver: yupResolver(validationSchema)\r\n        });\r\n\r\n        // This handles the update dose dialog\r\n        const [openUpdate, setOpenUpdate] = useState(false);\r\n        const handleClickOpenUpdate = () => {\r\n            setOpenUpdate(true);\r\n        };\r\n        const handleCloseUpdate = () => {\r\n            setOpenUpdate(false);\r\n        };\r\n\r\n        // Function for the update dose button\r\n        const updateDose = (medicationId, parsedMedications, data) => {\r\n            const {dose: updatedDose} = data;\r\n\r\n            let med;\r\n\r\n            for (const index of parsedMedications) {\r\n                if (index.id === medicationId) {\r\n                    med = index;\r\n                }\r\n            }\r\n\r\n            med.dose = updatedDose;\r\n            localStorage.setItem(\"medications\", JSON.stringify(parsedMedications));\r\n\r\n            // This forces the dialog to close\r\n            setOpenUpdate(false);\r\n        };\r\n\r\n        // This handles the delete medication confirmation dialog\r\n        const [openDelete, setOpenDelete] = useState(false);\r\n        const handleClickOpenDelete = () => {\r\n            setOpenDelete(true);\r\n        };\r\n        const handleCloseDelete = () => {\r\n            setOpenDelete(false);\r\n        };\r\n\r\n        // Function for the delete med button\r\n        const deleteMedication = (medicationId, parsedMedications) => {\r\n            let index;\r\n\r\n            for (let i = 0; i < parsedMedications.length; i++) {\r\n                if (parsedMedications[i].id === medicationId) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (parsedMedications.length > 1) {\r\n                // This removes the appropriate index of the array of medication objects\r\n                parsedMedications.splice(index, 1)\r\n                parsedMedications = [...parsedMedications];\r\n            } else {\r\n                parsedMedications = [];\r\n            }\r\n\r\n            localStorage.setItem(\"medications\", JSON.stringify(parsedMedications));\r\n\r\n            // This forces the dialog to close\r\n            setOpenDelete(false);\r\n\r\n            // This forces the medication list to re-render\r\n            forceUpdate();\r\n        };\r\n\r\n        // This is what is rendered for the Medication component\r\n        return (\r\n            <Box>\r\n                <Card sx={cardSx}>\r\n                    <CardContent>\r\n                        <Typography sx={typographyMedicationSx} variant=\"h5\">\r\n                            Medication: {medication.medication}\r\n                        </Typography>\r\n                        <Typography sx={typographyMedicationSx} variant=\"h5\">\r\n                            Dose: {medication.dose}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <Box>\r\n                        <Button onClick={handleClickOpenUpdate} size=\"large\"\r\n                                sx={buttonSx}\r\n                                variant=\"contained\">Edit\r\n                            Dose</Button>\r\n                        <Button onClick={handleClickOpenDelete} color=\"error\"\r\n                                size=\"large\"\r\n                                sx={buttonSx} variant=\"contained\">Delete\r\n                            Med </Button>\r\n                    </Box>\r\n                </Card>\r\n\r\n                {/* Delete medication confirmation dialog */}\r\n                <Dialog\r\n                    keepMounted={true}\r\n                    open={openDelete}\r\n                    onClose={handleCloseDelete}\r\n                >\r\n                    <Box sx={dialogBoxSx}>\r\n                        <Typography variant=\"h5\" sx={{m: 5}}> Do you want to\r\n                            delete {medication.dose} of {medication.medication}? </Typography>\r\n\r\n                        <Box>\r\n                            <Button onClick={() => deleteMedication(medication.id, parsedList)}\r\n                                    size=\"large\"\r\n                                    sx={buttonSx} variant=\"contained\">Yes</Button>\r\n                            <Button onClick={handleCloseDelete} color=\"error\"\r\n                                    size=\"large\"\r\n                                    sx={buttonSx} variant=\"contained\">No</Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Dialog>\r\n\r\n                {/* Update dose dialog */}\r\n                <Dialog\r\n                    keepMounted={true}\r\n                    open={openUpdate}\r\n                    onClose={handleCloseUpdate}\r\n                >\r\n                    <DialogTitle sx={dialogTitleSx}>\r\n                        {handleCloseUpdate ? (\r\n                            <IconButton\r\n                                aria-label=\"close\"\r\n                                onClick={handleCloseUpdate}\r\n                                sx={iconButtonSx}\r\n                            >\r\n                                <CloseIcon/>\r\n                            </IconButton>\r\n                        ) : null}\r\n                    </DialogTitle>\r\n\r\n                    <Box sx={dialogBoxSx}>\r\n                        <form onSubmit={handleSubmit((data) => updateDose(medication.id, parsedList, data))} noValidate>\r\n                            <Typography sx={updateDoseTypographySx} variant=\"h5\">\r\n                                Update dose\r\n                            </Typography>\r\n\r\n                            <Box\r\n                                sx={boxSx}\r\n                            >\r\n                                <DoseInput control={control} suggestions={doseSuggestions} variant={\"outlined\"}/>\r\n\r\n                                <Button disabled={!formState.isValid} size=\"large\"\r\n                                        sx={formButtonSx} type=\"submit\"\r\n                                        variant=\"contained\">Submit</Button>\r\n                            </Box>\r\n                        </form>\r\n                    </Box>\r\n                </Dialog>\r\n            </Box>\r\n        )\r\n    }; // End Medication component\r\n\r\n    let medications;\r\n\r\n    // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\r\n    if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\r\n        medications = parsedList.map((medication) => {\r\n            return (<Medication medication={medication} key={\"Medication_\" + medication.id}/>)\r\n        });\r\n    } else {\r\n        medications = <NoRegisteredMedications/>;\r\n    }\r\n\r\n    // This is the actual final block of code that is rendered for this component\r\n    return (\r\n        <Container sx={containerSx}>\r\n            <Box style={{flexDirection: \"column\"}}>\r\n                {medications}\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}