{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\Medi-Reminder-App\\\\src\\\\Components\\\\Registered Medications\\\\DisplayMedications.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\"; // Custom Components\n\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\nimport Medication from \"./Medication\"; // Styles\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerSx = {\n  pl: 5,\n  pr: 5,\n  width: \"100%\"\n};\nexport default function DisplayMedications() {\n  _s();\n\n  // This is the array of medication objects that will be displayed on the cards\n  const medicationList = localStorage.getItem(\"medications\");\n  const parsedList = JSON.parse(medicationList); // This forces the DisplayMedications component to re-render after a medication has been deleted\n\n  const [updated, setUpdated] = useState(false);\n  let medicationComps; // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\n\n  if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\n    const medications = [...parsedList];\n    let dupe = false;\n    let index = -1;\n\n    for (let i = 0; i < parsedList.length; i++) {\n      const {\n        medication: med1,\n        dose: dose1\n      } = parsedList[i];\n\n      for (let j = 0; j < medications.length; j++) {\n        const {\n          medication: med2,\n          dose: dose2\n        } = medications[i];\n\n        if (med1 === med2 && dose1 === dose2 && i !== j) {\n          index = j;\n          dupe = true;\n          break;\n        }\n      }\n\n      if (!dupe) {\n        medications.splice(index, 1);\n      }\n    }\n\n    console.log(medications);\n    medicationComps = parsedList.map(medication => {\n      return /*#__PURE__*/_jsxDEV(Medication, {\n        medication: medication,\n        updated: updated,\n        setUpdated: setUpdated,\n        parsedList: parsedList\n      }, \"Medication_\" + medication.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this);\n    });\n  } else {\n    medicationComps = /*#__PURE__*/_jsxDEV(NoRegisteredMedications, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 27\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: containerSx,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: medicationComps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DisplayMedications, \"pjG7K5oPhWzCY/iFyMNiH3SMaG0=\");\n\n_c = DisplayMedications;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayMedications\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/Medi-Reminder-App/src/Components/Registered Medications/DisplayMedications.js"],"names":["useState","Box","Container","NoRegisteredMedications","Medication","containerSx","pl","pr","width","DisplayMedications","medicationList","localStorage","getItem","parsedList","JSON","parse","updated","setUpdated","medicationComps","length","medications","dupe","index","i","medication","med1","dose","dose1","j","med2","dose2","splice","console","log","map","id","flexDirection"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,SAAP,MAAsB,yBAAtB,C,CAEA;;AACA,OAAOC,uBAAP,MAAoC,2BAApC;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;;AACA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,EAAE,EAAE,CADY;AAEhBC,EAAAA,EAAE,EAAE,CAFY;AAGhBC,EAAAA,KAAK,EAAE;AAHS,CAApB;AAMA,eAAe,SAASC,kBAAT,GAA8B;AAAA;;AACzC;AACA,QAAMC,cAAc,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAvB;AACA,QAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWL,cAAX,CAAnB,CAHyC,CAKzC;;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,KAAD,CAAtC;AAEA,MAAIkB,eAAJ,CARyC,CAUzC;;AACA,MAAIP,YAAY,CAACC,OAAb,CAAqB,aAArB,MAAwC,IAAxC,IAAgDD,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCO,MAApC,GAA6C,CAAjG,EAAoG;AAChG,UAAMC,WAAW,GAAG,CAAC,GAAGP,UAAJ,CAApB;AACA,QAAIQ,IAAI,GAAG,KAAX;AACA,QAAIC,KAAK,GAAG,CAAC,CAAb;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,UAAU,CAACM,MAA/B,EAAuCI,CAAC,EAAxC,EAA4C;AACxC,YAAM;AAACC,QAAAA,UAAU,EAAEC,IAAb;AAAmBC,QAAAA,IAAI,EAAEC;AAAzB,UAAkCd,UAAU,CAACU,CAAD,CAAlD;;AAEA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,WAAW,CAACD,MAAhC,EAAwCS,CAAC,EAAzC,EAA6C;AACzC,cAAM;AAACJ,UAAAA,UAAU,EAAEK,IAAb;AAAmBH,UAAAA,IAAI,EAAEI;AAAzB,YAAkCV,WAAW,CAACG,CAAD,CAAnD;;AAEA,YAAIE,IAAI,KAAKI,IAAT,IAAiBF,KAAK,KAAKG,KAA3B,IAAoCP,CAAC,KAAKK,CAA9C,EAAiD;AAC7CN,UAAAA,KAAK,GAAGM,CAAR;AACAP,UAAAA,IAAI,GAAG,IAAP;AACA;AACH;AACJ;;AAED,UAAG,CAACA,IAAJ,EAAU;AACND,QAAAA,WAAW,CAACW,MAAZ,CAAmBT,KAAnB,EAA0B,CAA1B;AACH;AACJ;;AAEDU,IAAAA,OAAO,CAACC,GAAR,CAAYb,WAAZ;AAEAF,IAAAA,eAAe,GAAGL,UAAU,CAACqB,GAAX,CAAgBV,UAAD,IAAgB;AAC7C,0BACI,QAAC,UAAD;AAAY,QAAA,UAAU,EAAEA,UAAxB;AAAoC,QAAA,OAAO,EAAER,OAA7C;AAAsD,QAAA,UAAU,EAAEC,UAAlE;AAA8E,QAAA,UAAU,EAAEJ;AAA1F,SACiB,gBAAgBW,UAAU,CAACW,EAD5C;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH,KAJiB,CAAlB;AAKH,GA9BD,MA8BO;AACHjB,IAAAA,eAAe,gBAAG,QAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,YAAlB;AACH;;AAED,sBACI,QAAC,SAAD;AAAW,IAAA,EAAE,EAAEb,WAAf;AAAA,2BACI,QAAC,GAAD;AAAK,MAAA,KAAK,EAAE;AAAC+B,QAAAA,aAAa,EAAE;AAAhB,OAAZ;AAAA,gBACKlB;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GApDuBT,kB;;KAAAA,kB","sourcesContent":["import {useState} from \"react\";\r\n\r\n// Material UI Components\r\nimport Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\n\r\n// Custom Components\r\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\r\nimport Medication from \"./Medication\";\r\n\r\n// Styles\r\nconst containerSx = {\r\n    pl: 5,\r\n    pr: 5,\r\n    width: \"100%\"\r\n};\r\n\r\nexport default function DisplayMedications() {\r\n    // This is the array of medication objects that will be displayed on the cards\r\n    const medicationList = localStorage.getItem(\"medications\");\r\n    const parsedList = JSON.parse(medicationList);\r\n\r\n    // This forces the DisplayMedications component to re-render after a medication has been deleted\r\n    const [updated, setUpdated] = useState(false);\r\n\r\n    let medicationComps;\r\n\r\n    // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\r\n    if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"medications\").length > 2) {\r\n        const medications = [...parsedList];\r\n        let dupe = false;\r\n        let index = -1;\r\n\r\n        for (let i = 0; i < parsedList.length; i++) {\r\n            const {medication: med1, dose: dose1} = parsedList[i];\r\n\r\n            for (let j = 0; j < medications.length; j++) {\r\n                const {medication: med2, dose: dose2} = medications[i];\r\n\r\n                if (med1 === med2 && dose1 === dose2 && i !== j) {\r\n                    index = j;\r\n                    dupe = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if(!dupe) {\r\n                medications.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        console.log(medications)\r\n\r\n        medicationComps = parsedList.map((medication) => {\r\n            return (\r\n                <Medication medication={medication} updated={updated} setUpdated={setUpdated} parsedList={parsedList}\r\n                            key={\"Medication_\" + medication.id}/>)\r\n        });\r\n    } else {\r\n        medicationComps = <NoRegisteredMedications/>;\r\n    }\r\n\r\n    return (\r\n        <Container sx={containerSx}>\r\n            <Box style={{flexDirection: \"column\"}}>\r\n                {medicationComps}\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}