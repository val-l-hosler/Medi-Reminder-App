{"ast":null,"code":"var _jsxFileName = \"/Users/valeriehosler/Desktop/Github/React-Medi-App/src/Components/DisplayReminders.js\",\n    _s2 = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\"; // Material UI Components\n\nimport AddIcon from \"@mui/icons-material/AddCircle\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Container from \"@mui/material/Container\";\nimport Typography from \"@mui/material/Typography\";\nimport Chip from \"@mui/material/Chip\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\"; // Custom Components\n\nimport NoRegisteredReminders from \"./NoRegisteredReminders\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DisplayReminders() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // Styles\n  const buttonSx = {\n    borderRadius: 0,\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"100%\"\n  };\n  const cardSx = {\n    bgcolor: \"#eeeeee\",\n    boxShadow: 3,\n    m: 5,\n    pb: 0,\n    pt: 0\n  };\n  const confirmationButtonSx = {\n    borderRadius: 0,\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"50%\"\n  };\n  const chipSx = {\n    fontSize: 17,\n    mb: 0.75,\n    mr: 1.5,\n    mt: 0.75\n  };\n  const typographyChipSx = {\n    m: 1.5\n  };\n  const typographySx = {\n    m: 1.5\n  }; // This is the array of reminder objects that will be displayed on the cards\n\n  let reminderList = localStorage.getItem(\"reminders\");\n  let parsed = JSON.parse(reminderList); // This forces the component to re-render after a medication has been deleted\n\n  const [, updateState] = useState();\n  const forceUpdate = useCallback(() => updateState({}), []);\n\n  const ChipList = params => {\n    return params.arr.map((index, i) => {\n      const handleDelete = () => {\n        params.arr.splice(index, 1);\n        const reminderList = localStorage.getItem(\"reminders\");\n        const parsed = JSON.parse(reminderList);\n\n        for (let i = 0; i < parsed.length; i++) {\n          if (parsed[i].id === params.id) {\n            parsed[i][params.objKey] = params.arr;\n          }\n        }\n\n        localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n        forceUpdate();\n      };\n\n      return /*#__PURE__*/_jsxDEV(Chip, {\n        onDelete: handleDelete,\n        sx: chipSx,\n        label: index\n      }, \"Chip\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this);\n    });\n  }; // This is the Medication component that is displayed including a card, medication info, buttons, and dialogs\n\n\n  const Reminder = _ref => {\n    _s();\n\n    let {\n      reminder\n    } = _ref;\n\n    // This is what is rendered for the Reminder component\n    const handleAddDay = () => {};\n\n    const handleAddTime = () => {}; // This handles the delete medication confirmation dialog\n\n\n    const [openDelete, setOpenDelete] = useState(false);\n\n    const handleClickOpenDelete = () => {\n      setOpenDelete(true);\n    };\n\n    const handleCloseDelete = () => {\n      setOpenDelete(false);\n    }; // Function for the delete med button\n\n\n    function deleteReminder(reminderId, parsedReminders) {\n      console.log(\"clicked\");\n      let index;\n\n      for (let i = 0; i < parsedReminders.length; i++) {\n        if (parsedReminders[i].id === reminderId) {\n          index = i;\n        }\n      }\n\n      if (parsedReminders.length > 1) {\n        // This removes the appropriate index of the array of reminder objects\n        parsedReminders.splice(index, 1);\n      } else {\n        parsedReminders = [];\n      }\n\n      localStorage.setItem(\"reminders\", JSON.stringify(parsedReminders)); // This forces the dialog to close\n\n      setOpenDelete(false); // This forces the reminder list to re-render\n\n      forceUpdate();\n    }\n\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        sx: cardSx,\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographySx,\n            variant: \"h5\",\n            children: [\"Medication: \", reminder.medication]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographySx,\n            variant: \"h5\",\n            children: [\"Dose: \", reminder.dose, \" mg\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyChipSx,\n            variant: \"h5\",\n            children: [\"Days: \", /*#__PURE__*/_jsxDEV(ChipList, {\n              id: reminder.id,\n              arr: reminder.days,\n              objKey: \"days\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              color: \"primary\",\n              onDelete: handleAddDay,\n              deleteIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 89\n              }, this),\n              sx: chipSx,\n              label: \"Add day\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyChipSx,\n            variant: \"h5\",\n            children: [\"Times: \", /*#__PURE__*/_jsxDEV(ChipList, {\n              id: reminder.id,\n              arr: reminder.times,\n              objKey: \"times\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 36\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              color: \"primary\",\n              onDelete: handleAddTime,\n              deleteIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 90\n              }, this),\n              sx: chipSx,\n              label: \"Add time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClickOpenDelete,\n            color: \"error\",\n            size: \"large\",\n            sx: buttonSx,\n            variant: \"contained\",\n            children: \"Delete Reminder\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openDelete,\n        onClose: handleCloseDelete,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            m: 5\n          },\n          children: [\" Do you want to delete the reminder for \", reminder.dose, \" mg of \", reminder.medication, \"? \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => deleteReminder(reminder.id, parsed),\n            size: \"large\",\n            sx: confirmationButtonSx,\n            variant: \"contained\",\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleCloseDelete,\n            color: \"error\",\n            size: \"large\",\n            sx: confirmationButtonSx,\n            variant: \"contained\",\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this);\n  }; // End Reminder component\n\n\n  _s(Reminder, \"BYS7SGB23ccRMpDF1Hw4hcABmWE=\");\n\n  let reminders; // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\n\n  if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"reminders\").length > 2) {\n    reminders = parsed.map((reminder, index) => {\n      return /*#__PURE__*/_jsxDEV(Reminder, {\n        reminder: reminder\n      }, \"reminder\" + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }, this);\n    });\n  } else {\n    reminders = /*#__PURE__*/_jsxDEV(NoRegisteredReminders, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 21\n    }, this);\n  } // This is the actual final block of code that is rendered for this component\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: reminders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(DisplayReminders, \"X5rEjsBNP/fh1FQA6Gy+z8f0U8w=\");\n\n_c = DisplayReminders;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayReminders\");","map":{"version":3,"sources":["/Users/valeriehosler/Desktop/Github/React-Medi-App/src/Components/DisplayReminders.js"],"names":["useCallback","useState","AddIcon","Box","Card","CardContent","Container","Typography","Chip","Button","Dialog","NoRegisteredReminders","DisplayReminders","buttonSx","borderRadius","fontSize","height","width","cardSx","bgcolor","boxShadow","m","pb","pt","confirmationButtonSx","chipSx","mb","mr","mt","typographyChipSx","typographySx","reminderList","localStorage","getItem","parsed","JSON","parse","updateState","forceUpdate","ChipList","params","arr","map","index","i","handleDelete","splice","length","id","objKey","setItem","stringify","Reminder","reminder","handleAddDay","handleAddTime","openDelete","setOpenDelete","handleClickOpenDelete","handleCloseDelete","deleteReminder","reminderId","parsedReminders","console","log","medication","dose","days","times","reminders","flexDirection"],"mappings":"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","sourcesContent":["import {useCallback, useState} from \"react\";\n\n// Material UI Components\nimport AddIcon from \"@mui/icons-material/AddCircle\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Container from \"@mui/material/Container\";\nimport Typography from \"@mui/material/Typography\";\nimport Chip from \"@mui/material/Chip\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\n\n// Custom Components\nimport NoRegisteredReminders from \"./NoRegisteredReminders\";\n\nexport default function DisplayReminders() {\n    // Styles\n    const buttonSx = {\n        borderRadius: 0,\n        fontSize: \"17px\",\n        height: \"5.75ch\",\n        width: \"100%\"\n    };\n\n    const cardSx = {\n        bgcolor: \"#eeeeee\",\n        boxShadow: 3,\n        m: 5,\n        pb: 0,\n        pt: 0\n    };\n\n    const confirmationButtonSx = {\n        borderRadius: 0,\n        fontSize: \"17px\",\n        height: \"5.75ch\",\n        width: \"50%\"\n    };\n\n    const chipSx = {\n        fontSize: 17,\n        mb: 0.75,\n        mr: 1.5,\n        mt: 0.75\n    };\n\n    const typographyChipSx = {\n        m: 1.5\n    };\n\n    const typographySx = {\n        m: 1.5\n    };\n\n\n    // This is the array of reminder objects that will be displayed on the cards\n    let reminderList = localStorage.getItem(\"reminders\");\n    let parsed = JSON.parse(reminderList);\n\n    // This forces the component to re-render after a medication has been deleted\n    const [, updateState] = useState();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    const ChipList = (params) => {\n        return (params.arr.map((index, i) => {\n            const handleDelete = () => {\n                params.arr.splice(index, 1);\n\n                const reminderList = localStorage.getItem(\"reminders\");\n                const parsed = JSON.parse(reminderList);\n\n                for (let i = 0; i < parsed.length; i++) {\n                    if (parsed[i].id === params.id) {\n                        parsed[i][params.objKey] = params.arr;\n                    }\n                }\n\n                localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n                forceUpdate();\n            };\n\n            return (<Chip onDelete={handleDelete} sx={chipSx} key={\"Chip\" + i} label={index}/>);\n        }));\n    };\n\n    // This is the Medication component that is displayed including a card, medication info, buttons, and dialogs\n    const Reminder = ({reminder}) => {\n        // This is what is rendered for the Reminder component\n        const handleAddDay = () => {\n        };\n        const handleAddTime = () => {\n        };\n\n        // This handles the delete medication confirmation dialog\n        const [openDelete, setOpenDelete] = useState(false);\n        const handleClickOpenDelete = () => {\n            setOpenDelete(true);\n        };\n        const handleCloseDelete = () => {\n            setOpenDelete(false);\n        };\n\n        // Function for the delete med button\n        function deleteReminder(reminderId, parsedReminders) {\n            console.log(\"clicked\")\n\n            let index;\n\n            for (let i = 0; i < parsedReminders.length; i++) {\n                if (parsedReminders[i].id === reminderId) {\n                    index = i;\n                }\n            }\n\n            if (parsedReminders.length > 1) {\n                // This removes the appropriate index of the array of reminder objects\n                parsedReminders.splice(index, 1);\n            } else {\n                parsedReminders = [];\n            }\n\n            localStorage.setItem(\"reminders\", JSON.stringify(parsedReminders));\n\n            // This forces the dialog to close\n            setOpenDelete(false);\n\n            // This forces the reminder list to re-render\n            forceUpdate();\n        }\n\n        return (\n            <Box>\n                <Card sx={cardSx}>\n                    <CardContent>\n                        <Typography sx={typographySx} variant=\"h5\">\n                            Medication: {reminder.medication}\n                        </Typography>\n                        <Typography sx={typographySx} variant=\"h5\">\n                            Dose: {reminder.dose} mg\n                        </Typography>\n                        <Typography sx={typographyChipSx} variant=\"h5\">\n                            Days: <ChipList id={reminder.id} arr={reminder.days} objKey={\"days\"}/>\n                            {/* Note: the onDelete creates the icon in the appropriate spot and there isn't an onAdd option */}\n                            <Chip color={\"primary\"} onDelete={handleAddDay} deleteIcon={<AddIcon/>} sx={chipSx}\n                                  label={\"Add day\"}/>\n                        </Typography>\n                        <Typography sx={typographyChipSx} variant=\"h5\">\n                            Times: <ChipList id={reminder.id} arr={reminder.times} objKey={\"times\"}/>\n                            {/* Note: the onDelete creates the icon in the appropriate spot and there isn't an onAdd option */}\n                            <Chip color={\"primary\"} onDelete={handleAddTime} deleteIcon={<AddIcon/>} sx={chipSx}\n                                  label={\"Add time\"}/>\n                        </Typography>\n                    </CardContent>\n                    <Box>\n                        <Button onClick={handleClickOpenDelete} color=\"error\"\n                                size=\"large\"\n                                sx={buttonSx} variant=\"contained\">Delete Reminder</Button>\n                    </Box>\n                </Card>\n\n                {/* Delete reminder confirmation dialog */}\n                <Dialog\n                    keepMounted={true}\n                    open={openDelete}\n                    onClose={handleCloseDelete}\n                >\n                    <Typography variant=\"h5\" sx={{m: 5}}> Do you want to delete the reminder for {reminder.dose} mg\n                        of {reminder.medication}? </Typography>\n\n                    <Box>\n                        <Button onClick={() => deleteReminder(reminder.id, parsed)}\n                                size=\"large\"\n                                sx={confirmationButtonSx} variant=\"contained\">Yes</Button>\n                        <Button onClick={handleCloseDelete} color=\"error\"\n                                size=\"large\"\n                                sx={confirmationButtonSx} variant=\"contained\">No</Button>\n                    </Box>\n                </Dialog>\n            </Box>\n        )\n    }; // End Reminder component\n\n    let reminders;\n\n    // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\n    if (localStorage.getItem(\"medications\") !== null && localStorage.getItem(\"reminders\").length > 2) {\n        reminders = parsed.map((reminder, index) => {\n            return (<Reminder reminder={reminder} key={\"reminder\" + index}/>)\n        });\n    } else {\n        reminders = <NoRegisteredReminders/>;\n    }\n\n    // This is the actual final block of code that is rendered for this component\n    return (\n        <Container>\n            <Box style={{flexDirection: \"column\"}}>\n                {reminders}\n            </Box>\n        </Container>\n    );\n}"]},"metadata":{},"sourceType":"module"}