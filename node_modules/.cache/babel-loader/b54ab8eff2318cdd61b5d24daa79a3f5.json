{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\Medi-Reminder-App\\\\src\\\\Components\\\\Registered Reminders\\\\ChipList.js\";\nimport { v4 as uuidv4 } from \"uuid\"; // Material UI Components\n\nimport Chip from \"@mui/material/Chip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chipSx = {\n  fontSize: 17,\n  mb: 0.75,\n  mr: 1.5,\n  mt: 0.75\n};\nexport default function ChipList(_ref) {\n  let {\n    type,\n    parsedList,\n    arr,\n    parentId,\n    reminderUpdated,\n    setReminderUpdated\n  } = _ref;\n\n  if (type === \"times\") {\n    arr.sort((a, b) => {\n      return new Date('1970/01/01 ' + a) - new Date('1970/01/01 ' + b);\n    });\n  } else {\n    const days = {\n      Monday: 0,\n      Tuesday: 1,\n      Wednesday: 2,\n      Thursday: 3,\n      Friday: 4,\n      Saturday: 5,\n      Sunday: 6\n    };\n    arr.sort((a, b) => {\n      const day1 = days[a];\n      const day2 = days[b];\n      return day1 > day2 ? 1 : -1;\n    });\n  } // This checks to see if Every day was chosen for the days chips\n\n\n  let everyDayFlag = false;\n  let everyDayObj;\n  arr.some(index => {\n    if (index === \"Every day\") {\n      everyDayFlag = true;\n      everyDayObj = index;\n      return false;\n    }\n\n    return true;\n  });\n  let unique;\n  let editableUnique;\n\n  if (!everyDayFlag) {\n    unique = [...new Set(arr)];\n    editableUnique = [...unique];\n  } else {\n    unique = [everyDayObj];\n    editableUnique = [...unique];\n\n    if (editableUnique.length > 0) {\n      // This adds \"Every day\" to the beginning of the arr\n      editableUnique.unshift(\"Every day\"); // This removes all the other days\n\n      editableUnique.splice(1);\n\n      for (const reminder of parsedList) {\n        if (reminder.id === parentId) {\n          // This resets the appropriate object's key/value pair with the updated list\n          reminder[type] = editableUnique;\n          break;\n        }\n      }\n\n      localStorage.setItem(\"reminders\", JSON.stringify(parsedList));\n    }\n  }\n\n  const handleDelete = uIdx => {\n    // This removes the appropriate index from the array that is passed into the params\n    editableUnique.splice(uIdx, 1);\n\n    for (const reminder of parsedList) {\n      if (reminder.id === parentId) {\n        // This resets the appropriate object's key/value pair with the updated list\n        reminder[type] = editableUnique;\n        break;\n      }\n    }\n\n    localStorage.setItem(\"reminders\", JSON.stringify(parsedList)); // This forces the reminder list to re-render\n\n    setReminderUpdated(!reminderUpdated);\n  };\n\n  return unique.map((chip, uIndex) => {\n    const chipKey = \"Chip_\" + uuidv4();\n    return /*#__PURE__*/_jsxDEV(Chip, {\n      onDelete: () => handleDelete(uIndex),\n      sx: chipSx,\n      label: chip\n    }, chipKey, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this);\n  });\n}\n_c = ChipList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChipList\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/Medi-Reminder-App/src/Components/Registered Reminders/ChipList.js"],"names":["v4","uuidv4","Chip","chipSx","fontSize","mb","mr","mt","ChipList","type","parsedList","arr","parentId","reminderUpdated","setReminderUpdated","sort","a","b","Date","days","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","day1","day2","everyDayFlag","everyDayObj","some","index","unique","editableUnique","Set","length","unshift","splice","reminder","id","localStorage","setItem","JSON","stringify","handleDelete","uIdx","map","chip","uIndex","chipKey"],"mappings":"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","sourcesContent":["import {v4 as uuidv4} from \"uuid\";\r\n\r\n// Material UI Components\r\nimport Chip from \"@mui/material/Chip\";\r\n\r\nconst chipSx = {\r\n    fontSize: 17,\r\n    mb: 0.75,\r\n    mr: 1.5,\r\n    mt: 0.75\r\n};\r\n\r\nexport default function ChipList({type, parsedList, arr, parentId, reminderUpdated, setReminderUpdated}) {\r\n    if (type === \"times\") {\r\n        arr.sort((a, b) => {\r\n            return new Date('1970/01/01 ' + a) - new Date('1970/01/01 ' + b);\r\n        });\r\n    } else {\r\n        const days = {\r\n            Monday: 0,\r\n            Tuesday: 1,\r\n            Wednesday: 2,\r\n            Thursday: 3,\r\n            Friday: 4,\r\n            Saturday: 5,\r\n            Sunday: 6\r\n        };\r\n\r\n        arr.sort((a, b) => {\r\n            const day1 = days[a];\r\n            const day2 = days[b];\r\n            return (day1 > day2) ? 1 : -1;\r\n        });\r\n    }\r\n\r\n    // This checks to see if Every day was chosen for the days chips\r\n    let everyDayFlag = false;\r\n    let everyDayObj;\r\n\r\n    arr.some(index => {\r\n        if (index === \"Every day\") {\r\n            everyDayFlag = true;\r\n            everyDayObj = index;\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\n    let unique;\r\n    let editableUnique;\r\n\r\n    if (!everyDayFlag) {\r\n        unique = [...new Set(arr)];\r\n        editableUnique = [...unique];\r\n    } else {\r\n        unique = [everyDayObj];\r\n        editableUnique = [...unique];\r\n\r\n        if (editableUnique.length > 0) {\r\n            // This adds \"Every day\" to the beginning of the arr\r\n            editableUnique.unshift(\"Every day\");\r\n            // This removes all the other days\r\n            editableUnique.splice(1);\r\n\r\n            for (const reminder of parsedList) {\r\n                if (reminder.id === parentId) {\r\n                    // This resets the appropriate object's key/value pair with the updated list\r\n                    reminder[type] = editableUnique;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            localStorage.setItem(\"reminders\", JSON.stringify(parsedList));\r\n        }\r\n    }\r\n\r\n    const handleDelete = (uIdx) => {\r\n        // This removes the appropriate index from the array that is passed into the params\r\n        editableUnique.splice(uIdx, 1);\r\n\r\n        for (const reminder of parsedList) {\r\n            if (reminder.id === parentId) {\r\n                // This resets the appropriate object's key/value pair with the updated list\r\n                reminder[type] = editableUnique;\r\n                break;\r\n            }\r\n        }\r\n\r\n        localStorage.setItem(\"reminders\", JSON.stringify(parsedList));\r\n\r\n        // This forces the reminder list to re-render\r\n        setReminderUpdated(!reminderUpdated);\r\n    };\r\n\r\n    return (unique.map((chip, uIndex) => {\r\n        const chipKey = \"Chip_\" + uuidv4();\r\n\r\n        return (<Chip onDelete={() => handleDelete(uIndex)} sx={chipSx} key={chipKey}\r\n                      label={chip}/>);\r\n    }));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}