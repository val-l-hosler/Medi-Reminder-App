{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\React-Medi-App\\\\src\\\\Components\\\\RegisterReminder.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\"; // Material UI Components\n\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport TextField from \"@mui/material/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initDaysOptions = [{\n  label: \"Every day\",\n  disabled: false\n}, {\n  label: \"Sunday\",\n  disabled: false\n}, {\n  label: \"Monday\",\n  disabled: false\n}, {\n  label: \"Tuesday\",\n  disabled: false\n}, {\n  label: \"Wednesday\",\n  disabled: false\n}, {\n  label: \"Thursday\",\n  disabled: false\n}, {\n  label: \"Friday\",\n  disabled: false\n}, {\n  label: \"Saturday\",\n  disabled: false\n}];\nconst medicationSuggestions = [{\n  label: \"Lisinopril\"\n}, {\n  label: \"Valsartan\"\n}];\nexport default function RegisterReminder() {\n  _s();\n\n  // This declares the state variables\n  const [daysOfWeekSuggestions, setOptions] = useState(initDaysOptions);\n  const [selected, setSelected] = useState([]); //Styles and SX\n\n  const boxSx = {\n    \"& .MuiTextField-root\": {\n      mb: 5,\n      width: \"100%\"\n    },\n    bgcolor: \"background.paper\",\n    ml: \"50px\",\n    mr: \"50px\"\n  };\n  const buttonSx = {\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"100%\"\n  }; // Form validation using Yup\n\n  const validationSchema = Yup.object().shape({\n    medication: Yup.string().required(\"Medication is required\"),\n    daysOfWeek: Yup.array().of(Yup.object().shape({\n      label: Yup.string(),\n      disabled: Yup.bool()\n    })).min(1, \"Days of the week are required\")\n  }); // React Hook Form formState and useForm\n\n  const {\n    handleSubmit,\n    control\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  }); // This makes sure the user can't choose both \"Every day\" and days of the week, but they can still manually choose every day\n\n  const onOptionsChange = (event, valueArr) => {\n    setSelected(valueArr);\n\n    if (valueArr.length === 0) {\n      const resetOptions = [...daysOfWeekSuggestions].map(opt => {\n        opt.disabled = false;\n        return opt;\n      });\n      setOptions(resetOptions);\n    } else {\n      const everyDaySelected = valueArr.find(item => item.label === \"Every day\");\n      const notEveryDaySelected = valueArr.find(item => item.label !== \"Every day\");\n\n      if (everyDaySelected) {\n        const updatedOptions = [...daysOfWeekSuggestions].map(opt => {\n          opt.disabled = opt.label !== \"Every day\";\n          return opt;\n        });\n        setOptions(updatedOptions);\n      }\n\n      if (notEveryDaySelected) {\n        const updatedOptions = [...daysOfWeekSuggestions].map(opt => {\n          opt.disabled = opt.label === \"Every day\";\n          return opt;\n        });\n        setOptions(updatedOptions);\n      }\n    }\n  }; // Form onSubmit\n\n\n  const onSubmit = data => {\n    console.log(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: boxSx,\n        children: [/*#__PURE__*/_jsxDEV(Controller, {\n          control: control,\n          defaultValue: [],\n          name: \"medication\",\n          render: _ref => {\n            let {\n              field: {\n                ref,\n                ...field\n              },\n              fieldState: {\n                error\n              }\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(Autocomplete, { ...field,\n              disableClearable: true,\n              disablePortal: true,\n              id: \"medication-autocomplete\",\n              options: medicationSuggestions,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                error: !!error,\n                helperText: error === null || error === void 0 ? void 0 : error.message,\n                id: \"medication\",\n                inputRef: ref,\n                label: \"Medication\",\n                name: \"medication\",\n                type: \"search\",\n                ...params\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 58\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          control: control,\n          defaultValue: [],\n          name: \"daysOfWeek\",\n          render: _ref2 => {\n            let {\n              field: {\n                ref,\n                ...field\n              },\n              fieldState: {\n                error\n              }\n            } = _ref2;\n            return /*#__PURE__*/_jsxDEV(Autocomplete, { ...field,\n              disableClearable: true,\n              disablePortal: true,\n              filterSelectedOptions: true,\n              multiple: true,\n              getOptionDisabled: option => !!option.disabled,\n              getOptionLabel: option => option.label,\n              id: \"days-autocomplete\",\n              onChange: (event, value) => onOptionsChange(event, value),\n              options: daysOfWeekSuggestions,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                error: !!error,\n                id: \"daysOfWeek\",\n                helperText: error === null || error === void 0 ? void 0 : error.message,\n                inputRef: ref,\n                label: \"Days of the week\",\n                name: \"daysOfWeek\",\n                type: \"search\",\n                ...params\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 58\n              }, this),\n              value: selected\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSubmit(onSubmit),\n          size: \"large\",\n          sx: buttonSx,\n          type: \"submit\",\n          variant: \"contained\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RegisterReminder, \"7FX2VYg/omeQqouyyjxrFW1ZgzU=\", false, function () {\n  return [useForm];\n});\n\n_c = RegisterReminder;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterReminder\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/React-Medi-App/src/Components/RegisterReminder.js"],"names":["React","useState","useForm","Controller","yupResolver","Yup","Box","Button","Container","Autocomplete","TextField","initDaysOptions","label","disabled","medicationSuggestions","RegisterReminder","daysOfWeekSuggestions","setOptions","selected","setSelected","boxSx","mb","width","bgcolor","ml","mr","buttonSx","fontSize","height","validationSchema","object","shape","medication","string","required","daysOfWeek","array","of","bool","min","handleSubmit","control","resolver","onOptionsChange","event","valueArr","length","resetOptions","map","opt","everyDaySelected","find","item","notEveryDaySelected","updatedOptions","onSubmit","data","console","log","field","ref","fieldState","error","params","message","option","value"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {useForm, Controller} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n\r\n// Material UI Components\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nconst initDaysOptions = [\r\n    {label: \"Every day\", disabled: false},\r\n    {label: \"Sunday\", disabled: false},\r\n    {label: \"Monday\", disabled: false},\r\n    {label: \"Tuesday\", disabled: false},\r\n    {label: \"Wednesday\", disabled: false},\r\n    {label: \"Thursday\", disabled: false},\r\n    {label: \"Friday\", disabled: false},\r\n    {label: \"Saturday\", disabled: false}\r\n];\r\n\r\nconst medicationSuggestions = [\r\n    {label: \"Lisinopril\"},\r\n    {label: \"Valsartan\"}\r\n];\r\n\r\nexport default function RegisterReminder() {\r\n    // This declares the state variables\r\n    const [daysOfWeekSuggestions, setOptions] = useState(initDaysOptions);\r\n    const [selected, setSelected] = useState([]);\r\n\r\n    //Styles and SX\r\n    const boxSx = {\r\n        \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\r\n        bgcolor: \"background.paper\",\r\n        ml: \"50px\",\r\n        mr: \"50px\"\r\n    };\r\n\r\n    const buttonSx = {\r\n        fontSize: \"17px\",\r\n        height: \"5.75ch\",\r\n        width: \"100%\"\r\n    };\r\n\r\n    // Form validation using Yup\r\n    const validationSchema = Yup.object().shape({\r\n        medication: Yup.string()\r\n            .required(\"Medication is required\"),\r\n        daysOfWeek: Yup.array()\r\n            .of(\r\n                Yup.object().shape({\r\n                    label: Yup.string(),\r\n                    disabled: Yup.bool()\r\n                })\r\n            )\r\n            .min(1, \"Days of the week are required\")\r\n    });\r\n\r\n    // React Hook Form formState and useForm\r\n    const {handleSubmit, control} = useForm({\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n\r\n    // This makes sure the user can't choose both \"Every day\" and days of the week, but they can still manually choose every day\r\n    const onOptionsChange = (event, valueArr) => {\r\n        setSelected(valueArr);\r\n        if (valueArr.length === 0) {\r\n            const resetOptions = [...daysOfWeekSuggestions].map((opt) => {\r\n                opt.disabled = false;\r\n                return opt;\r\n            });\r\n            setOptions(resetOptions);\r\n        } else {\r\n            const everyDaySelected = valueArr.find(\r\n                (item) => item.label === \"Every day\"\r\n            );\r\n\r\n            const notEveryDaySelected = valueArr.find(\r\n                (item) => item.label !== \"Every day\"\r\n            );\r\n\r\n            if (everyDaySelected) {\r\n                const updatedOptions = [...daysOfWeekSuggestions].map((opt) => {\r\n                    opt.disabled = opt.label !== \"Every day\";\r\n                    return opt;\r\n                });\r\n                setOptions(updatedOptions);\r\n            }\r\n\r\n            if (notEveryDaySelected) {\r\n                const updatedOptions = [...daysOfWeekSuggestions].map((opt) => {\r\n                    opt.disabled = opt.label === \"Every day\";\r\n                    return opt;\r\n                });\r\n                setOptions(updatedOptions);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Form onSubmit\r\n    const onSubmit = (data) => {\r\n        console.log(data);\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <form>\r\n                <Box\r\n                    sx={boxSx}\r\n                >\r\n\r\n                    <Controller\r\n                        control={control}\r\n                        defaultValue={[]}\r\n                        name=\"medication\"\r\n                        render={({field: {ref, ...field}, fieldState: {error}}) => (\r\n                            <Autocomplete\r\n                                {...field}\r\n                                disableClearable\r\n                                disablePortal\r\n                                id=\"medication-autocomplete\"\r\n                                options={medicationSuggestions}\r\n                                renderInput={(params) => <TextField\r\n                                    required\r\n                                    error={!!error}\r\n                                    helperText={error?.message}\r\n                                    id=\"medication\"\r\n                                    inputRef={ref}\r\n                                    label=\"Medication\"\r\n                                    name=\"medication\"\r\n                                    type=\"search\"\r\n                                    {...params}\r\n                                />}\r\n                            />\r\n                        )}\r\n                    />\r\n\r\n                    <Controller\r\n                        control={control}\r\n                        defaultValue={[]}\r\n                        name=\"daysOfWeek\"\r\n                        render={({field: {ref, ...field}, fieldState: {error}}) => (\r\n                            <Autocomplete\r\n                                {...field}\r\n                                disableClearable\r\n                                disablePortal\r\n                                filterSelectedOptions\r\n                                multiple\r\n                                getOptionDisabled={(option) => !!option.disabled}\r\n                                getOptionLabel={(option) => option.label}\r\n                                id=\"days-autocomplete\"\r\n                                onChange={(event, value) => onOptionsChange(event, value)}\r\n                                options={daysOfWeekSuggestions}\r\n                                renderInput={(params) => <TextField\r\n                                    required\r\n                                    error={!!error}\r\n                                    id=\"daysOfWeek\"\r\n                                    helperText={error?.message}\r\n                                    inputRef={ref}\r\n                                    label=\"Days of the week\"\r\n                                    name=\"daysOfWeek\"\r\n                                    type=\"search\"\r\n                                    {...params}\r\n                                />}\r\n                                value={selected}\r\n                            />\r\n                        )}\r\n                    />\r\n\r\n                    <Button onClick={handleSubmit(onSubmit)} size=\"large\" sx={buttonSx} type=\"submit\"\r\n                            variant=\"contained\">Submit</Button>\r\n                </Box>\r\n            </form>\r\n        </Container>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}