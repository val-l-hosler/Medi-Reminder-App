{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\React-Medi-App\\\\src\\\\Components\\\\DisplayReminders.js\",\n    _s2 = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\"; // Material UI Components\n\nimport AddIcon from \"@mui/icons-material/AddCircle\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Container from \"@mui/material/Container\";\nimport IconButton from \"@mui/material/IconButton\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport Typography from \"@mui/material/Typography\";\nimport Chip from \"@mui/material/Chip\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\"; // Custom Components\n\nimport DaysInput from \"./DaysInput.js\";\nimport NoRegisteredReminders from \"./NoRegisteredReminders.js\";\nimport TimeInput from \"./TimeInput.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initOptions = [{\n  label: \"Every day\",\n  disabled: false\n}, {\n  label: \"Sunday\",\n  disabled: false\n}, {\n  label: \"Monday\",\n  disabled: false\n}, {\n  label: \"Tuesday\",\n  disabled: false\n}, {\n  label: \"Wednesday\",\n  disabled: false\n}, {\n  label: \"Thursday\",\n  disabled: false\n}, {\n  label: \"Friday\",\n  disabled: false\n}, {\n  label: \"Saturday\",\n  disabled: false\n}];\nconst validationSchema = Yup.object().shape({\n  daysOfWeek: Yup.array().of(Yup.object().shape({\n    label: Yup.string(),\n    disabled: Yup.boolean()\n  })).min(1, \"Days of the week are required\")\n});\nexport default function DisplayReminders() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // Styles\n  const boxSx = {\n    \"& .MuiTextField-root\": {\n      mb: 5,\n      width: \"100%\"\n    },\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    ml: \"50px\",\n    mr: \"50px\"\n  };\n  const buttonSx = {\n    borderRadius: 0,\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"100%\"\n  };\n  const cardSx = {\n    bgcolor: \"#eeeeee\",\n    boxShadow: 3,\n    mb: 5,\n    mt: 5,\n    pb: 0,\n    pt: 0\n  };\n  const containerSx = {\n    m: 0,\n    pl: 5,\n    pr: 5,\n    width: \"100%\"\n  };\n  const confirmationButtonSx = {\n    borderRadius: 0,\n    fontSize: \"17px\",\n    height: \"5.75ch\",\n    width: \"50%\"\n  };\n  const chipSx = {\n    fontSize: 17,\n    mb: 0.75,\n    mr: 1.5,\n    mt: 0.75\n  };\n  const dialogBoxSx = {\n    width: \"75vw\"\n  };\n  const dialogTitleSx = {\n    m: 0,\n    p: 3\n  };\n  const dialogTypographySx = {\n    mb: 5,\n    ml: 5,\n    mr: 5\n  };\n  const iconButtonSx = {\n    position: \"absolute\",\n    right: 8,\n    top: 8,\n    color: theme => theme.palette.grey[500]\n  };\n  const typographyChipSx = {\n    m: 1.5\n  };\n  const typographySx = {\n    m: 1.5\n  }; // This is the array of reminder objects that will be displayed on the cards\n\n  const reminderList = localStorage.getItem(\"reminders\");\n  const parsed = JSON.parse(reminderList); // This forces the component to re-render after a medication has been deleted\n\n  const [, updateState] = useState();\n  const forceUpdate = useCallback(() => updateState({}), []);\n\n  const ChipList = params => {\n    params.arr.sort();\n    return params.arr.map((index, i) => {\n      const handleDelete = () => {\n        // This removes the appropriate index from the array that is passed into the params\n        params.arr.splice(i, 1);\n        const reminderList = localStorage.getItem(\"reminders\");\n        const parsed = JSON.parse(reminderList);\n\n        for (let i = 0; i < parsed.length; i++) {\n          if (parsed[i].id === params.id) {\n            // This resets the appropriate object's key/value pair with the updated list\n            parsed[i][params.objKey] = params.arr;\n          }\n        }\n\n        localStorage.setItem(\"reminders\", JSON.stringify(parsed)); // This forces the medication list to re-render\n\n        forceUpdate();\n      };\n\n      return /*#__PURE__*/_jsxDEV(Chip, {\n        onDelete: handleDelete,\n        sx: chipSx,\n        label: index\n      }, \"Chip\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this);\n    });\n  }; // This is the Reminder component that is displayed including a card, reminder info, and a delete reminder button\n\n\n  const Reminder = _ref => {\n    _s();\n\n    let {\n      reminder\n    } = _ref;\n\n    function getThisReminder(reminderId, parsedReminders) {\n      let index;\n\n      for (let i = 0; i < parsedReminders.length; i++) {\n        if (parsedReminders[i].id === reminderId) {\n          index = i;\n        }\n      }\n\n      return [parsedReminders[index], index];\n    } // This handles the add day dialog\n\n\n    const [openAddDay, setOpenAddDay] = useState(false);\n\n    const handleClickAddDay = () => {\n      setOpenAddDay(true);\n    };\n\n    const handleCloseAddDay = () => {\n      setOpenAddDay(false);\n    };\n\n    function addDay(reminderId, parsedReminders, data) {\n      const thisReminder = getThisReminder(reminderId, parsedReminders)[0];\n      const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\n      thisReminder.days = [...thisReminder.days, data.daysOfWeek[0].label];\n      parsed[thisReminderIndex] = thisReminder;\n      localStorage.setItem(\"reminders\", JSON.stringify(parsed)); // This forces the dialog to close\n\n      setOpenAddDay(false); // This forces the reminder list to re-render\n\n      forceUpdate();\n    } // This needs to be inside the component or else an unmounted component error displays in the console\n    // This controls the add day form\n\n\n    const {\n      control: controlAddDay,\n      handleSubmit: handleSubmitAddDay,\n      formState: formStateAddDay\n    } = useForm({\n      mode: \"onChange\",\n      resolver: yupResolver(validationSchema)\n    }); // This handles the add time dialog\n\n    const [openAddTime, setOpenAddTime] = useState(false);\n\n    const handleClickAddTime = () => {\n      setOpenAddTime(true);\n    };\n\n    const handleCloseAddTime = () => {\n      setOpenAddTime(false);\n    }; // This needs to be inside the component or else an unmounted component error displays in the console\n    // This controls the add time form\n\n\n    const {\n      control: controlAddTime,\n      handleSubmit: handleSubmitAddTime,\n      setValue: setValueAddTime,\n      register: registerAddTime,\n      getValues: getValuesAddTime\n    } = useForm({\n      mode: \"onChange\",\n      resolver: yupResolver(validationSchema)\n    }); // Function that is triggered when the add time form is submitted\n\n    function addTime(reminderId, parsedReminders, data) {\n      const thisReminder = getThisReminder(reminderId, parsedReminders)[0];\n      const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\n      let time;\n      Object.values(data).forEach(value => {\n        const val = value.toString();\n        const sliced = val.slice(16, 21);\n        let finalTime;\n\n        if (sliced.charAt(0) === \"0\" && sliced.charAt(1) === \"0\") {\n          // this catches 12:00 - 12:59 am\n          finalTime = \"12\" + sliced.slice(2) + \" am\";\n        } else if (sliced.charAt(0) === \"0\" && sliced.charAt(1) !== \"0\") {\n          // this catches 1:00 - 9:59 am\n          finalTime = sliced.slice(1) + \" am\";\n        } else if (sliced.charAt(0) === \"1\" && (sliced.charAt(1) === \"0\" || sliced.charAt(1) === \"1\")) {\n          // this catches 10:00 - 11:59 am\n          finalTime = sliced + \" am\";\n        } else if (sliced.charAt(0) === \"1\" && sliced.charAt(1) === \"2\") {\n          // this catches 12:00 - 12:59 pm\n          finalTime = sliced + \" pm\";\n        } else {\n          // this catches 1:00 pm and later\n          let newSliced = sliced.slice(0, 2);\n          finalTime = parseInt(newSliced) - 12 + sliced.slice(2) + \" pm\";\n        }\n\n        time = finalTime;\n      });\n      thisReminder.times = [...thisReminder.times, time];\n      parsed[thisReminderIndex] = thisReminder;\n      localStorage.setItem(\"reminders\", JSON.stringify(parsed)); // This forces the dialog to close\n\n      setOpenAddTime(false); // This forces the reminder list to re-render\n\n      forceUpdate();\n    } // This handles the delete medication confirmation dialog\n\n\n    const [openDelete, setOpenDelete] = useState(false);\n\n    const handleClickOpenDelete = () => {\n      setOpenDelete(true);\n    };\n\n    const handleCloseDelete = () => {\n      setOpenDelete(false);\n    }; // Function for the delete reminder button\n\n\n    function deleteReminder(reminderId, parsedReminders) {\n      const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\n\n      if (parsedReminders.length > 1) {\n        // This removes the appropriate index of the array of reminder objects\n        parsedReminders.splice(thisReminderIndex, 1);\n      } else {\n        parsedReminders = [];\n      }\n\n      localStorage.setItem(\"reminders\", JSON.stringify(parsedReminders)); // This forces the dialog to close\n\n      setOpenDelete(false); // This forces the reminder list to re-render\n\n      forceUpdate();\n    } // This is what is rendered for the Reminder component\n\n\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        sx: cardSx,\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographySx,\n            variant: \"h5\",\n            children: [\"Medication: \", reminder.medication]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographySx,\n            variant: \"h5\",\n            children: [\"Dose: \", reminder.dose, \" mg\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyChipSx,\n            variant: \"h5\",\n            children: [\"Days: \", /*#__PURE__*/_jsxDEV(ChipList, {\n              id: reminder.id,\n              arr: reminder.days,\n              objKey: \"days\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              color: \"primary\",\n              onDelete: handleClickAddDay,\n              deleteIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 94\n              }, this),\n              sx: chipSx,\n              label: \"Add day\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: typographyChipSx,\n            variant: \"h5\",\n            children: [\"Times: \", /*#__PURE__*/_jsxDEV(ChipList, {\n              id: reminder.id,\n              arr: reminder.times,\n              objKey: \"times\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 36\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              color: \"primary\",\n              onDelete: handleClickAddTime,\n              deleteIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 95\n              }, this),\n              sx: chipSx,\n              label: \"Add time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClickOpenDelete,\n          color: \"error\",\n          size: \"large\",\n          sx: buttonSx,\n          variant: \"contained\",\n          children: \"Delete Reminder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openAddDay,\n        onClose: handleCloseAddDay,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          sx: dialogTitleSx,\n          children: handleCloseAddDay ? /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"close\",\n            onClick: handleCloseAddDay,\n            sx: iconButtonSx,\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: dialogBoxSx,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmitAddDay(data => addDay(reminder.id, parsed, data)),\n            noValidate: true,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: boxSx,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                sx: dialogTypographySx,\n                variant: \"h5\",\n                children: \"Add day\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(DaysInput, {\n                initOptions: initOptions,\n                control: controlAddDay,\n                label: \"Day\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                disabled: !formStateAddDay.isValid,\n                size: \"large\",\n                sx: { ...buttonSx,\n                  mb: 5\n                },\n                type: \"submit\",\n                variant: \"contained\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openAddTime,\n        onClose: handleCloseAddTime,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          sx: dialogTitleSx,\n          children: handleCloseAddTime ? /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"close\",\n            onClick: handleCloseAddTime,\n            sx: iconButtonSx,\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: dialogBoxSx,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmitAddTime(data => addTime(reminder.id, parsed, data)),\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: boxSx,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                sx: dialogTypographySx,\n                variant: \"h5\",\n                children: \"Add time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n                dateAdapter: AdapterDateFns,\n                children: /*#__PURE__*/_jsxDEV(TimeInput, {\n                  setValue: setValueAddTime,\n                  getValues: getValuesAddTime,\n                  register: registerAddTime,\n                  control: controlAddTime,\n                  counter: \"\"\n                }, \"TimeInputs\" + reminder.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 386,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"large\",\n                sx: { ...buttonSx,\n                  mb: 5\n                },\n                type: \"submit\",\n                variant: \"contained\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        keepMounted: true,\n        open: openDelete,\n        onClose: handleCloseDelete,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: dialogBoxSx,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              m: 5\n            },\n            children: [\" Do you want to delete the reminder for \", reminder.dose, \" mg of \", reminder.medication, \"? \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => deleteReminder(reminder.id, parsed),\n              size: \"large\",\n              sx: confirmationButtonSx,\n              variant: \"contained\",\n              children: \"Yes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleCloseDelete,\n              color: \"error\",\n              size: \"large\",\n              sx: confirmationButtonSx,\n              variant: \"contained\",\n              children: \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this);\n  }; // End Reminder component\n\n\n  _s(Reminder, \"7GWnOcf5Obn9cMpSuPxl/puUYhM=\", false, function () {\n    return [useForm, useForm];\n  });\n\n  let reminders; // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\n\n  if (localStorage.getItem(\"reminders\") !== null && localStorage.getItem(\"reminders\").length > 2) {\n    reminders = parsed.map((reminder, index) => {\n      return /*#__PURE__*/_jsxDEV(Reminder, {\n        reminder: reminder\n      }, \"reminder\" + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 21\n      }, this);\n    });\n  } else {\n    reminders = /*#__PURE__*/_jsxDEV(NoRegisteredReminders, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 21\n    }, this);\n  } // This is the actual final block of code that is rendered for this component\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: containerSx,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        flexDirection: \"column\"\n      },\n      children: reminders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 435,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(DisplayReminders, \"X5rEjsBNP/fh1FQA6Gy+z8f0U8w=\");\n\n_c = DisplayReminders;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayReminders\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/React-Medi-App/src/Components/DisplayReminders.js"],"names":["useCallback","useState","useForm","yupResolver","Yup","AddIcon","Box","Card","CardContent","CloseIcon","Container","IconButton","LocalizationProvider","Typography","Chip","Button","Dialog","DialogTitle","AdapterDateFns","DaysInput","NoRegisteredReminders","TimeInput","initOptions","label","disabled","validationSchema","object","shape","daysOfWeek","array","of","string","boolean","min","DisplayReminders","boxSx","mb","width","alignItems","display","flexDirection","ml","mr","buttonSx","borderRadius","fontSize","height","cardSx","bgcolor","boxShadow","mt","pb","pt","containerSx","m","pl","pr","confirmationButtonSx","chipSx","dialogBoxSx","dialogTitleSx","p","dialogTypographySx","iconButtonSx","position","right","top","color","theme","palette","grey","typographyChipSx","typographySx","reminderList","localStorage","getItem","parsed","JSON","parse","updateState","forceUpdate","ChipList","params","arr","sort","map","index","i","handleDelete","splice","length","id","objKey","setItem","stringify","Reminder","reminder","getThisReminder","reminderId","parsedReminders","openAddDay","setOpenAddDay","handleClickAddDay","handleCloseAddDay","addDay","data","thisReminder","thisReminderIndex","days","control","controlAddDay","handleSubmit","handleSubmitAddDay","formState","formStateAddDay","mode","resolver","openAddTime","setOpenAddTime","handleClickAddTime","handleCloseAddTime","controlAddTime","handleSubmitAddTime","setValue","setValueAddTime","register","registerAddTime","getValues","getValuesAddTime","addTime","time","Object","values","forEach","value","val","toString","sliced","slice","finalTime","charAt","newSliced","parseInt","times","openDelete","setOpenDelete","handleClickOpenDelete","handleCloseDelete","deleteReminder","medication","dose","isValid","reminders"],"mappings":"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","sourcesContent":["import {useCallback, useState} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n\r\n// Material UI Components\r\nimport AddIcon from \"@mui/icons-material/AddCircle\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Container from \"@mui/material/Container\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\n\r\n// Custom Components\r\nimport DaysInput from \"./DaysInput.js\";\r\nimport NoRegisteredReminders from \"./NoRegisteredReminders.js\";\r\nimport TimeInput from \"./TimeInput.js\";\r\n\r\nconst initOptions = [\r\n    {label: \"Every day\", disabled: false},\r\n    {label: \"Sunday\", disabled: false},\r\n    {label: \"Monday\", disabled: false},\r\n    {label: \"Tuesday\", disabled: false},\r\n    {label: \"Wednesday\", disabled: false},\r\n    {label: \"Thursday\", disabled: false},\r\n    {label: \"Friday\", disabled: false},\r\n    {label: \"Saturday\", disabled: false}\r\n];\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    daysOfWeek: Yup.array()\r\n        .of(\r\n            Yup.object().shape({\r\n                label: Yup.string(),\r\n                disabled: Yup.boolean()\r\n            })\r\n        )\r\n        .min(1, \"Days of the week are required\")\r\n});\r\n\r\nexport default function DisplayReminders() {\r\n    // Styles\r\n    const boxSx = {\r\n        \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\r\n        alignItems: \"center\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        ml: \"50px\",\r\n        mr: \"50px\"\r\n    };\r\n\r\n    const buttonSx = {\r\n        borderRadius: 0,\r\n        fontSize: \"17px\",\r\n        height: \"5.75ch\",\r\n        width: \"100%\"\r\n    };\r\n\r\n    const cardSx = {\r\n        bgcolor: \"#eeeeee\",\r\n        boxShadow: 3,\r\n        mb: 5,\r\n        mt: 5,\r\n        pb: 0,\r\n        pt: 0\r\n    };\r\n\r\n    const containerSx = {\r\n        m: 0,\r\n        pl: 5,\r\n        pr: 5,\r\n        width: \"100%\"\r\n    };\r\n\r\n    const confirmationButtonSx = {\r\n        borderRadius: 0,\r\n        fontSize: \"17px\",\r\n        height: \"5.75ch\",\r\n        width: \"50%\"\r\n    };\r\n\r\n    const chipSx = {\r\n        fontSize: 17,\r\n        mb: 0.75,\r\n        mr: 1.5,\r\n        mt: 0.75\r\n    };\r\n\r\n    const dialogBoxSx = {\r\n        width: \"75vw\"\r\n    };\r\n\r\n    const dialogTitleSx = {\r\n        m: 0,\r\n        p: 3\r\n    };\r\n\r\n    const dialogTypographySx = {\r\n        mb: 5,\r\n        ml: 5,\r\n        mr: 5\r\n    };\r\n\r\n    const iconButtonSx = {\r\n        position: \"absolute\",\r\n        right: 8,\r\n        top: 8,\r\n        color: (theme) => theme.palette.grey[500]\r\n    };\r\n\r\n    const typographyChipSx = {\r\n        m: 1.5\r\n    };\r\n\r\n    const typographySx = {\r\n        m: 1.5\r\n    };\r\n\r\n    // This is the array of reminder objects that will be displayed on the cards\r\n    const reminderList = localStorage.getItem(\"reminders\");\r\n    const parsed = JSON.parse(reminderList);\r\n\r\n    // This forces the component to re-render after a medication has been deleted\r\n    const [, updateState] = useState();\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n\r\n    const ChipList = (params) => {\r\n        params.arr.sort();\r\n        \r\n        return (params.arr.map((index, i) => {\r\n            const handleDelete = () => {\r\n                // This removes the appropriate index from the array that is passed into the params\r\n                params.arr.splice(i, 1);\r\n\r\n                const reminderList = localStorage.getItem(\"reminders\");\r\n                const parsed = JSON.parse(reminderList);\r\n\r\n                for (let i = 0; i < parsed.length; i++) {\r\n                    if (parsed[i].id === params.id) {\r\n                        // This resets the appropriate object's key/value pair with the updated list\r\n                        parsed[i][params.objKey] = params.arr;\r\n                    }\r\n                }\r\n\r\n                localStorage.setItem(\"reminders\", JSON.stringify(parsed));\r\n\r\n                // This forces the medication list to re-render\r\n                forceUpdate();\r\n            };\r\n\r\n            return (<Chip onDelete={handleDelete} sx={chipSx} key={\"Chip\" + i} label={index}/>);\r\n        }));\r\n    };\r\n\r\n    // This is the Reminder component that is displayed including a card, reminder info, and a delete reminder button\r\n    const Reminder = ({reminder}) => {\r\n        function getThisReminder(reminderId, parsedReminders) {\r\n            let index;\r\n\r\n            for (let i = 0; i < parsedReminders.length; i++) {\r\n                if (parsedReminders[i].id === reminderId) {\r\n                    index = i;\r\n                }\r\n            }\r\n\r\n            return [parsedReminders[index], index];\r\n        }\r\n\r\n        // This handles the add day dialog\r\n        const [openAddDay, setOpenAddDay] = useState(false);\r\n        const handleClickAddDay = () => {\r\n            setOpenAddDay(true);\r\n        };\r\n        const handleCloseAddDay = () => {\r\n            setOpenAddDay(false);\r\n        };\r\n\r\n        function addDay(reminderId, parsedReminders, data) {\r\n            const thisReminder = getThisReminder(reminderId, parsedReminders)[0];\r\n            const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\r\n            thisReminder.days = [...thisReminder.days, data.daysOfWeek[0].label];\r\n            parsed[thisReminderIndex] = thisReminder;\r\n            localStorage.setItem(\"reminders\", JSON.stringify(parsed));\r\n\r\n            // This forces the dialog to close\r\n            setOpenAddDay(false);\r\n\r\n            // This forces the reminder list to re-render\r\n            forceUpdate();\r\n        }\r\n\r\n        // This needs to be inside the component or else an unmounted component error displays in the console\r\n        // This controls the add day form\r\n        const {control: controlAddDay, handleSubmit: handleSubmitAddDay, formState: formStateAddDay} = useForm({\r\n            mode: \"onChange\",\r\n            resolver: yupResolver(validationSchema)\r\n        });\r\n\r\n        // This handles the add time dialog\r\n        const [openAddTime, setOpenAddTime] = useState(false);\r\n        const handleClickAddTime = () => {\r\n            setOpenAddTime(true);\r\n        };\r\n        const handleCloseAddTime = () => {\r\n            setOpenAddTime(false);\r\n        };\r\n\r\n        // This needs to be inside the component or else an unmounted component error displays in the console\r\n        // This controls the add time form\r\n        const {\r\n            control: controlAddTime,\r\n            handleSubmit: handleSubmitAddTime,\r\n            setValue: setValueAddTime,\r\n            register: registerAddTime,\r\n            getValues: getValuesAddTime\r\n        } = useForm({\r\n            mode: \"onChange\",\r\n            resolver: yupResolver(validationSchema)\r\n        });\r\n\r\n        // Function that is triggered when the add time form is submitted\r\n        function addTime(reminderId, parsedReminders, data) {\r\n            const thisReminder = getThisReminder(reminderId, parsedReminders)[0];\r\n            const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\r\n            let time;\r\n\r\n            Object.values(data).forEach((value) => {\r\n                const val = value.toString();\r\n                const sliced = val.slice(16, 21);\r\n                let finalTime;\r\n\r\n                if (sliced.charAt(0) === \"0\" && sliced.charAt(1) === \"0\") { // this catches 12:00 - 12:59 am\r\n                    finalTime = \"12\" + sliced.slice(2) + \" am\";\r\n                } else if (sliced.charAt(0) === \"0\" && sliced.charAt(1) !== \"0\") { // this catches 1:00 - 9:59 am\r\n                    finalTime = sliced.slice(1) + \" am\";\r\n                } else if (sliced.charAt(0) === \"1\" && (sliced.charAt(1) === \"0\" || sliced.charAt(1) === \"1\")) { // this catches 10:00 - 11:59 am\r\n                    finalTime = sliced + \" am\";\r\n                } else if (sliced.charAt(0) === \"1\" && sliced.charAt(1) === \"2\") { // this catches 12:00 - 12:59 pm\r\n                    finalTime = sliced + \" pm\";\r\n                } else { // this catches 1:00 pm and later\r\n                    let newSliced = sliced.slice(0, 2);\r\n                    finalTime = (parseInt(newSliced) - 12) + sliced.slice(2) + \" pm\";\r\n                }\r\n\r\n                time = finalTime;\r\n            });\r\n\r\n            thisReminder.times = [...thisReminder.times, time];\r\n            parsed[thisReminderIndex] = thisReminder;\r\n            localStorage.setItem(\"reminders\", JSON.stringify(parsed));\r\n\r\n            // This forces the dialog to close\r\n            setOpenAddTime(false);\r\n\r\n            // This forces the reminder list to re-render\r\n            forceUpdate();\r\n        }\r\n\r\n        // This handles the delete medication confirmation dialog\r\n        const [openDelete, setOpenDelete] = useState(false);\r\n        const handleClickOpenDelete = () => {\r\n            setOpenDelete(true);\r\n        };\r\n        const handleCloseDelete = () => {\r\n            setOpenDelete(false);\r\n        };\r\n\r\n        // Function for the delete reminder button\r\n        function deleteReminder(reminderId, parsedReminders) {\r\n            const thisReminderIndex = getThisReminder(reminderId, parsedReminders)[1];\r\n\r\n            if (parsedReminders.length > 1) {\r\n                // This removes the appropriate index of the array of reminder objects\r\n                parsedReminders.splice(thisReminderIndex, 1);\r\n            } else {\r\n                parsedReminders = [];\r\n            }\r\n\r\n            localStorage.setItem(\"reminders\", JSON.stringify(parsedReminders));\r\n\r\n            // This forces the dialog to close\r\n            setOpenDelete(false);\r\n\r\n            // This forces the reminder list to re-render\r\n            forceUpdate();\r\n        }\r\n\r\n        // This is what is rendered for the Reminder component\r\n        return (\r\n            <Box>\r\n                <Card sx={cardSx}>\r\n                    <CardContent>\r\n                        <Typography sx={typographySx} variant=\"h5\">\r\n                            Medication: {reminder.medication}\r\n                        </Typography>\r\n                        <Typography sx={typographySx} variant=\"h5\">\r\n                            Dose: {reminder.dose} mg\r\n                        </Typography>\r\n                        <Typography sx={typographyChipSx} variant=\"h5\">\r\n                            Days: <ChipList id={reminder.id} arr={reminder.days} objKey={\"days\"}/>\r\n                            {/* Note: the onDelete creates the icon in the appropriate spot and there isn't an onAdd option */}\r\n                            <Chip color={\"primary\"} onDelete={handleClickAddDay} deleteIcon={<AddIcon/>} sx={chipSx}\r\n                                  label={\"Add day\"}/>\r\n                        </Typography>\r\n                        <Typography sx={typographyChipSx} variant=\"h5\">\r\n                            Times: <ChipList id={reminder.id} arr={reminder.times} objKey={\"times\"}/>\r\n                            {/* Note: the onDelete creates the icon in the appropriate spot and there isn't an onAdd option */}\r\n                            <Chip color={\"primary\"} onDelete={handleClickAddTime} deleteIcon={<AddIcon/>} sx={chipSx}\r\n                                  label={\"Add time\"}/>\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <Button onClick={handleClickOpenDelete} color=\"error\"\r\n                            size=\"large\"\r\n                            sx={buttonSx} variant=\"contained\">Delete Reminder</Button>\r\n                </Card>\r\n\r\n                {/* Add day dialog */}\r\n                <Dialog\r\n                    keepMounted={true}\r\n                    open={openAddDay}\r\n                    onClose={handleCloseAddDay}\r\n                >\r\n                    <DialogTitle sx={dialogTitleSx}>\r\n                        {handleCloseAddDay ? (\r\n                            <IconButton\r\n                                aria-label=\"close\"\r\n                                onClick={handleCloseAddDay}\r\n                                sx={iconButtonSx}\r\n                            >\r\n                                <CloseIcon/>\r\n                            </IconButton>\r\n                        ) : null}\r\n                    </DialogTitle>\r\n\r\n                    <Box sx={dialogBoxSx}>\r\n                        <form onSubmit={handleSubmitAddDay((data) => addDay(reminder.id, parsed, data))} noValidate>\r\n                            <Box sx={boxSx}>\r\n                                <Typography sx={dialogTypographySx} variant=\"h5\">\r\n                                    Add day\r\n                                </Typography>\r\n\r\n                                <DaysInput initOptions={initOptions} control={controlAddDay} label={\"Day\"}/>\r\n\r\n                                <Button disabled={!formStateAddDay.isValid} size=\"large\" sx={{...buttonSx, mb: 5}}\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\">Submit</Button>\r\n                            </Box>\r\n                        </form>\r\n                    </Box>\r\n                </Dialog>\r\n\r\n                {/* Add time dialog */}\r\n                <Dialog\r\n                    keepMounted={true}\r\n                    open={openAddTime}\r\n                    onClose={handleCloseAddTime}\r\n                >\r\n                    <DialogTitle sx={dialogTitleSx}>\r\n                        {handleCloseAddTime ? (\r\n                            <IconButton\r\n                                aria-label=\"close\"\r\n                                onClick={handleCloseAddTime}\r\n                                sx={iconButtonSx}\r\n                            >\r\n                                <CloseIcon/>\r\n                            </IconButton>\r\n                        ) : null}\r\n                    </DialogTitle>\r\n\r\n                    <Box sx={dialogBoxSx}>\r\n                        <form onSubmit={handleSubmitAddTime((data) => addTime(reminder.id, parsed, data))}>\r\n                            <Box sx={boxSx}>\r\n                                <Typography sx={dialogTypographySx} variant=\"h5\">\r\n                                    Add time\r\n                                </Typography>\r\n\r\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                    <TimeInput setValue={setValueAddTime} getValues={getValuesAddTime}\r\n                                               register={registerAddTime}\r\n                                               control={controlAddTime}\r\n                                               counter={\"\"} key={\"TimeInputs\" + reminder.id}/>\r\n                                </LocalizationProvider>\r\n                                <Button size=\"large\" sx={{...buttonSx, mb: 5}} type=\"submit\"\r\n                                        variant=\"contained\">Submit</Button>\r\n                            </Box>\r\n                        </form>\r\n                    </Box>\r\n                </Dialog>\r\n\r\n                {/* Delete reminder confirmation dialog */}\r\n                <Dialog\r\n                    keepMounted={true}\r\n                    open={openDelete}\r\n                    onClose={handleCloseDelete}\r\n                >\r\n                    <Box sx={dialogBoxSx}>\r\n                        <Typography variant=\"h5\" sx={{m: 5}}> Do you want to delete the reminder for {reminder.dose} mg\r\n                            of {reminder.medication}? </Typography>\r\n\r\n                        <Box>\r\n                            <Button onClick={() => deleteReminder(reminder.id, parsed)}\r\n                                    size=\"large\"\r\n                                    sx={confirmationButtonSx} variant=\"contained\">Yes</Button>\r\n                            <Button onClick={handleCloseDelete} color=\"error\"\r\n                                    size=\"large\"\r\n                                    sx={confirmationButtonSx} variant=\"contained\">No</Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Dialog>\r\n            </Box>\r\n        )\r\n    }; // End Reminder component\r\n\r\n    let reminders;\r\n\r\n    // I also set this condition (localStorage.getItem(\"medications\").length > 2) because if the array is empty, the length === 2\r\n    if (localStorage.getItem(\"reminders\") !== null && localStorage.getItem(\"reminders\").length > 2) {\r\n        reminders = parsed.map((reminder, index) => {\r\n            return (<Reminder reminder={reminder} key={\"reminder\" + index}/>)\r\n        });\r\n    } else {\r\n        reminders = <NoRegisteredReminders/>;\r\n    }\r\n\r\n    // This is the actual final block of code that is rendered for this component\r\n    return (\r\n        <Container sx={containerSx}>\r\n            <Box style={{flexDirection: \"column\"}}>\r\n                {reminders}\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}