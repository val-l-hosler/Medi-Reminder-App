{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17246\\\\Desktop\\\\Github\\\\Val-l-hosler\\\\React-Medi-App\\\\src\\\\Components\\\\AddReminder1.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\"; // Material UI Components\n\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\nimport Box from \"@mui/material/Box\";\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport TextField from \"@mui/material/TextField\"; // Custom Components\n\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object().shape({\n  medication: Yup.string().required(\"Medication is required\"),\n  dose: Yup.string().required(\"Dose is required\")\n});\n\nfunction setSuggestions() {\n  // This is the array of medication objects that will be displayed on the cards\n  const medicationList = localStorage.getItem(\"medications\");\n  const parsed = JSON.parse(medicationList); // This will be an array of medication suggestions for the inputs\n\n  let medSuggestions;\n  let doseSuggestions;\n\n  if (parsed !== null && parsed.length > 0) {\n    const meds = {};\n    const doses = {};\n    parsed.forEach((medication, index) => {\n      meds[medication.medication] = index;\n      doses[medication.dose] = index;\n    });\n    medSuggestions = Object.keys(meds).map(med => {\n      return {\n        label: med\n      };\n    });\n    doseSuggestions = Object.keys(doses).map(dose => {\n      return {\n        label: dose\n      };\n    });\n    return [medSuggestions, doseSuggestions];\n  }\n\n  return [];\n}\n\nexport default function AddReminder1() {\n  _s();\n\n  // Styles\n  const autoCompleteSx = {\n    width: \"100%\"\n  };\n  const boxSx = {\n    \"& .MuiTextField-root\": {\n      mb: 5,\n      width: \"100%\"\n    },\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  };\n  const containerSx = {\n    m: 0,\n    pl: 5,\n    pr: 5,\n    width: \"100%\"\n  };\n  const iconButtonSx = {\n    fontSize: 75\n  };\n  const stackSx = {\n    mb: 5\n  };\n  const typographySx = {\n    mb: 5,\n    textAlign: \"center\"\n  };\n  const breadcrumbs = [/*#__PURE__*/_jsxDEV(Typography, {\n    color: \"text.primary\",\n    children: \"Name & Dose\"\n  }, \"1\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this)];\n  const {\n    handleSubmit,\n    control,\n    formState\n  } = useForm({\n    mode: \"onChange\",\n    resolver: yupResolver(validationSchema)\n  });\n\n  const onSubmit = data => {\n    // This saves the reminder into a local session storage for the purposes of displaying the reminders on another page.\n    // If I were going to create a deployed version of the app, I would create a DB and save the data there.\n    // I also set this condition --> localStorage.getItem(\"reminders\").length < 2 --> because if the array is empty, the length === 2\n    if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\n      localStorage.setItem(\"reminders\", JSON.stringify([{\n        id: 0,\n        medication: data.medication,\n        dose: data.dose,\n        days: [],\n        timesPerDay: 0,\n        times: [],\n        submitted: false\n      }]));\n    } else {\n      const reminderList = localStorage.getItem(\"reminders\");\n      const parsed = JSON.parse(reminderList);\n      const newId = parsed[parsed.length - 1].id + 1;\n      parsed.push({\n        id: newId,\n        medication: data.medication,\n        dose: data.dose,\n        days: [],\n        timesPerDay: 0,\n        times: [],\n        submitted: false\n      });\n      localStorage.setItem(\"reminders\", JSON.stringify(parsed));\n    }\n\n    fetch(\"/add-reminder/days\").then(() => {\n      window.location = \"/add-reminder/days\";\n    });\n  }; // I added these because without it, all the autofill elements were showing up as selected\n\n\n  const [medValue, setMedValue] = useState(null);\n  const [doseValue, setDoseValue] = useState(null); // If there are any registered medications\n\n  if (setSuggestions().length > 1) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      sx: containerSx,\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        sx: stackSx,\n        children: /*#__PURE__*/_jsxDEV(Breadcrumbs, {\n          separator: /*#__PURE__*/_jsxDEV(NavigateNextIcon, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 36\n          }, this),\n          \"aria-label\": \"breadcrumb\",\n          children: breadcrumbs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        noValidate: true,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: typographySx,\n          variant: \"h4\",\n          children: \"What medication do you want to make a reminder for?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: boxSx,\n          children: [/*#__PURE__*/_jsxDEV(Controller, {\n            name: \"medication\",\n            control: control,\n            render: _ref => {\n              let {\n                field: {\n                  ref,\n                  ...field\n                },\n                fieldState: {\n                  error\n                }\n              } = _ref;\n              return /*#__PURE__*/_jsxDEV(Autocomplete, { ...field,\n                autoHighlight: true,\n                disableClearable: true,\n                disablePortal: true,\n                isOptionEqualToValue: (option, value) => value.label === option.label,\n                id: \"medication-autocomplete\",\n                onChange: (event, value) => {\n                  field.onChange(value.label);\n                  setMedValue(value);\n                },\n                options: setSuggestions()[0],\n                value: medValue,\n                sx: autoCompleteSx,\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                  required: true,\n                  error: !!error,\n                  helperText: error === null || error === void 0 ? void 0 : error.message,\n                  id: \"medication\",\n                  label: \"Medication\",\n                  name: \"medication\",\n                  type: \"search\",\n                  inputRef: ref,\n                  ...params\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 33\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"dose\",\n            control: control,\n            render: _ref2 => {\n              let {\n                field: {\n                  ref,\n                  ...field\n                },\n                fieldState: {\n                  error\n                }\n              } = _ref2;\n              return /*#__PURE__*/_jsxDEV(Autocomplete, { ...field,\n                autoHighlight: true,\n                disableClearable: true,\n                disablePortal: true,\n                isOptionEqualToValue: (option, value) => value.label === option.label,\n                id: \"dose-autocomplete\",\n                onChange: (event, value) => {\n                  field.onChange(value.label);\n                  setDoseValue(value);\n                },\n                options: setSuggestions()[1],\n                value: doseValue,\n                sx: autoCompleteSx,\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                  required: true,\n                  error: !!error,\n                  helperText: error === null || error === void 0 ? void 0 : error.message,\n                  id: \"dose\",\n                  label: \"Dose\",\n                  name: \"dose\",\n                  type: \"numeric\",\n                  inputRef: ref,\n                  ...params\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 33\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: !formState.isValid,\n            type: \"submit\",\n            children: /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n              sx: iconButtonSx\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      sx: containerSx,\n      children: /*#__PURE__*/_jsxDEV(NoRegisteredMedications, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(AddReminder1, \"dyBe5ytwkJcVl/bXbO3vauybUJg=\", false, function () {\n  return [useForm];\n});\n\n_c = AddReminder1;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddReminder1\");","map":{"version":3,"sources":["C:/Users/17246/Desktop/Github/Val-l-hosler/React-Medi-App/src/Components/AddReminder1.js"],"names":["useState","useForm","Controller","yupResolver","Yup","ArrowForwardIcon","Box","Breadcrumbs","Button","Container","NavigateNextIcon","Stack","Typography","Autocomplete","TextField","NoRegisteredMedications","validationSchema","object","shape","medication","string","required","dose","setSuggestions","medicationList","localStorage","getItem","parsed","JSON","parse","medSuggestions","doseSuggestions","length","meds","doses","forEach","index","Object","keys","map","med","label","AddReminder1","autoCompleteSx","width","boxSx","mb","alignItems","display","flexDirection","containerSx","m","pl","pr","iconButtonSx","fontSize","stackSx","typographySx","textAlign","breadcrumbs","handleSubmit","control","formState","mode","resolver","onSubmit","data","setItem","stringify","id","days","timesPerDay","times","submitted","reminderList","newId","push","fetch","then","window","location","medValue","setMedValue","doseValue","setDoseValue","field","ref","fieldState","error","option","value","event","onChange","params","message","isValid"],"mappings":"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","sourcesContent":["import {useState} from \"react\";\r\nimport {useForm, Controller} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n\r\n// Material UI Components\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Breadcrumbs from \"@mui/material/Breadcrumbs\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Container from \"@mui/material/Container\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\n// Custom Components\r\nimport NoRegisteredMedications from \"./NoRegisteredMedications\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    medication: Yup.string()\r\n        .required(\"Medication is required\"),\r\n    dose: Yup.string()\r\n        .required(\"Dose is required\"),\r\n});\r\n\r\nfunction setSuggestions() {\r\n    // This is the array of medication objects that will be displayed on the cards\r\n    const medicationList = localStorage.getItem(\"medications\");\r\n    const parsed = JSON.parse(medicationList);\r\n\r\n    // This will be an array of medication suggestions for the inputs\r\n    let medSuggestions;\r\n    let doseSuggestions;\r\n\r\n    if (parsed !== null && parsed.length > 0) {\r\n        const meds = {};\r\n        const doses = {};\r\n\r\n        parsed.forEach((medication, index) => {\r\n            meds[medication.medication] = index;\r\n            doses[medication.dose] = index;\r\n        });\r\n\r\n        medSuggestions = Object.keys(meds).map((med) => {\r\n            return {label: med};\r\n        })\r\n\r\n        doseSuggestions = Object.keys(doses).map((dose) => {\r\n            return {label: dose};\r\n        })\r\n\r\n        return [medSuggestions, doseSuggestions];\r\n    }\r\n\r\n    return [];\r\n}\r\n\r\nexport default function AddReminder1() {\r\n    // Styles\r\n    const autoCompleteSx = {\r\n        width: \"100%\"\r\n    };\r\n\r\n    const boxSx = {\r\n        \"& .MuiTextField-root\": {mb: 5, width: \"100%\"},\r\n        alignItems: \"center\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    };\r\n\r\n    const containerSx = {\r\n        m: 0,\r\n        pl: 5,\r\n        pr: 5,\r\n        width: \"100%\"\r\n    };\r\n\r\n    const iconButtonSx = {\r\n        fontSize: 75\r\n    };\r\n\r\n    const stackSx = {\r\n        mb: 5\r\n    };\r\n\r\n    const typographySx = {\r\n        mb: 5,\r\n        textAlign: \"center\"\r\n    };\r\n\r\n    const breadcrumbs = [\r\n        <Typography key=\"1\" color=\"text.primary\">\r\n            Name & Dose\r\n        </Typography>\r\n    ];\r\n\r\n    const {handleSubmit, control, formState} = useForm({\r\n        mode: \"onChange\",\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n\r\n    const onSubmit = (data) => {\r\n        // This saves the reminder into a local session storage for the purposes of displaying the reminders on another page.\r\n        // If I were going to create a deployed version of the app, I would create a DB and save the data there.\r\n        // I also set this condition --> localStorage.getItem(\"reminders\").length < 2 --> because if the array is empty, the length === 2\r\n        if (localStorage.getItem(\"reminders\") === null || localStorage.getItem(\"reminders\").length < 3) {\r\n            localStorage.setItem(\"reminders\", JSON.stringify([{\r\n                id: 0,\r\n                medication: data.medication,\r\n                dose: data.dose,\r\n                days: [],\r\n                timesPerDay: 0,\r\n                times: [],\r\n                submitted: false\r\n            }]));\r\n        } else {\r\n            const reminderList = localStorage.getItem(\"reminders\");\r\n            const parsed = JSON.parse(reminderList);\r\n            const newId = parsed[parsed.length - 1].id + 1;\r\n\r\n            parsed.push({\r\n                id: newId,\r\n                medication: data.medication,\r\n                dose: data.dose,\r\n                days: [],\r\n                timesPerDay: 0,\r\n                times: [],\r\n                submitted: false\r\n            });\r\n\r\n            localStorage.setItem(\"reminders\", JSON.stringify(parsed));\r\n        }\r\n\r\n        fetch(\"/add-reminder/days\")\r\n            .then(() => {\r\n                window.location = \"/add-reminder/days\";\r\n            });\r\n    };\r\n\r\n    // I added these because without it, all the autofill elements were showing up as selected\r\n    const [medValue, setMedValue] = useState(null);\r\n    const [doseValue, setDoseValue] = useState(null);\r\n\r\n    // If there are any registered medications\r\n    if (setSuggestions().length > 1) {\r\n        return (\r\n            <Container sx={containerSx}>\r\n                <Stack spacing={2} sx={stackSx}>\r\n                    <Breadcrumbs\r\n                        separator={<NavigateNextIcon fontSize=\"small\"/>}\r\n                        aria-label=\"breadcrumb\"\r\n                    >\r\n                        {breadcrumbs}\r\n                    </Breadcrumbs>\r\n                </Stack>\r\n\r\n                <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                    <Typography sx={typographySx} variant=\"h4\">\r\n                        What medication do you want to make a reminder for?\r\n                    </Typography>\r\n\r\n                    <Box\r\n                        sx={boxSx}\r\n                    >\r\n                        <Controller\r\n                            name=\"medication\"\r\n                            control={control}\r\n                            render={({field: {ref, ...field}, fieldState: {error}}) => (\r\n                                <Autocomplete\r\n                                    {...field}\r\n                                    autoHighlight\r\n                                    disableClearable\r\n                                    disablePortal\r\n                                    isOptionEqualToValue={(option, value) => value.label === option.label}\r\n                                    id=\"medication-autocomplete\"\r\n                                    onChange={(event, value) => {\r\n                                        field.onChange(value.label);\r\n                                        setMedValue(value);\r\n                                    }}\r\n                                    options={setSuggestions()[0]}\r\n                                    value={medValue}\r\n                                    sx={autoCompleteSx}\r\n                                    renderInput={(params) => (\r\n                                        <TextField\r\n                                            required\r\n                                            error={!!error}\r\n                                            helperText={error?.message}\r\n                                            id=\"medication\"\r\n                                            label=\"Medication\"\r\n                                            name=\"medication\"\r\n                                            type=\"search\"\r\n                                            inputRef={ref}\r\n                                            {...params}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            )}\r\n                        />\r\n\r\n                        <Controller\r\n                            name=\"dose\"\r\n                            control={control}\r\n                            render={({field: {ref, ...field}, fieldState: {error}}) => (\r\n                                <Autocomplete\r\n                                    {...field}\r\n                                    autoHighlight\r\n                                    disableClearable\r\n                                    disablePortal\r\n                                    isOptionEqualToValue={(option, value) => value.label === option.label}\r\n                                    id=\"dose-autocomplete\"\r\n                                    onChange={(event, value) => {\r\n                                        field.onChange(value.label);\r\n                                        setDoseValue(value);\r\n                                    }}\r\n                                    options={setSuggestions()[1]}\r\n                                    value={doseValue}\r\n                                    sx={autoCompleteSx}\r\n                                    renderInput={(params) => (\r\n                                        <TextField\r\n                                            required\r\n                                            error={!!error}\r\n                                            helperText={error?.message}\r\n                                            id=\"dose\"\r\n                                            label=\"Dose\"\r\n                                            name=\"dose\"\r\n                                            type=\"numeric\"\r\n                                            inputRef={ref}\r\n                                            {...params}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            )}\r\n                        />\r\n\r\n                        <Button disabled={!formState.isValid}\r\n                                type=\"submit\"><ArrowForwardIcon sx={iconButtonSx}/></Button>\r\n                    </Box>\r\n                </form>\r\n            </Container>\r\n        );\r\n    } else {\r\n        return (\r\n            <Container sx={containerSx}>\r\n                <NoRegisteredMedications/>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}